package githubv4

// AbortQueuedMigrationsInput is an autogenerated input type of AbortQueuedMigrations.
type AbortQueuedMigrationsInput struct {
	// The ID of the organization that is running the migrations.
	OwnerID ID "json:\"ownerId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AbortQueuedMigrationsInput implements the Input interface.
var _ Input = (*AbortQueuedMigrationsInput)(nil)

// isInput implements the Input interface.
func (AbortQueuedMigrationsInput) isInput() {}

// AcceptEnterpriseAdministratorInvitationInput is an autogenerated input type of AcceptEnterpriseAdministratorInvitation.
type AcceptEnterpriseAdministratorInvitationInput struct {
	// The id of the invitation being accepted.
	InvitationID ID "json:\"invitationId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AcceptEnterpriseAdministratorInvitationInput implements the Input interface.
var _ Input = (*AcceptEnterpriseAdministratorInvitationInput)(nil)

// isInput implements the Input interface.
func (AcceptEnterpriseAdministratorInvitationInput) isInput() {}

// AcceptTopicSuggestionInput is an autogenerated input type of AcceptTopicSuggestion.
type AcceptTopicSuggestionInput struct {
	// The Node ID of the repository.
	RepositoryID ID "json:\"repositoryId\""
	// The name of the suggested topic.
	Name string "json:\"name\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AcceptTopicSuggestionInput implements the Input interface.
var _ Input = (*AcceptTopicSuggestionInput)(nil)

// isInput implements the Input interface.
func (AcceptTopicSuggestionInput) isInput() {}

// ActorType represents the actor's type.
type ActorType string

const (
	// ActorTypeUser. Indicates a user actor.
	ActorTypeUser ActorType = "USER"
	// ActorTypeTeam. Indicates a team actor.
	ActorTypeTeam ActorType = "TEAM"
)

// AddAssigneesToAssignableInput is an autogenerated input type of AddAssigneesToAssignable.
type AddAssigneesToAssignableInput struct {
	// The id of the assignable object to add assignees to.
	AssignableID ID "json:\"assignableId\""
	// The id of users to add as assignees.
	AssigneeIDs []ID "json:\"assigneeIds\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddAssigneesToAssignableInput implements the Input interface.
var _ Input = (*AddAssigneesToAssignableInput)(nil)

// isInput implements the Input interface.
func (AddAssigneesToAssignableInput) isInput() {}

// AddCommentInput is an autogenerated input type of AddComment.
type AddCommentInput struct {
	// The Node ID of the subject to modify.
	SubjectID ID "json:\"subjectId\""
	// The contents of the comment.
	Body string "json:\"body\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddCommentInput implements the Input interface.
var _ Input = (*AddCommentInput)(nil)

// isInput implements the Input interface.
func (AddCommentInput) isInput() {}

// AddDiscussionCommentInput is an autogenerated input type of AddDiscussionComment.
type AddDiscussionCommentInput struct {
	// The Node ID of the discussion to comment on.
	DiscussionID ID "json:\"discussionId\""
	// The Node ID of the discussion comment within this discussion to reply to.
	ReplyToID *ID "json:\"replyToId\""
	// The contents of the comment.
	Body string "json:\"body\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddDiscussionCommentInput implements the Input interface.
var _ Input = (*AddDiscussionCommentInput)(nil)

// isInput implements the Input interface.
func (AddDiscussionCommentInput) isInput() {}

// AddDiscussionPollVoteInput is an autogenerated input type of AddDiscussionPollVote.
type AddDiscussionPollVoteInput struct {
	// The Node ID of the discussion poll option to vote for.
	PollOptionID ID "json:\"pollOptionId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddDiscussionPollVoteInput implements the Input interface.
var _ Input = (*AddDiscussionPollVoteInput)(nil)

// isInput implements the Input interface.
func (AddDiscussionPollVoteInput) isInput() {}

// AddEnterpriseOrganizationMemberInput is an autogenerated input type of AddEnterpriseOrganizationMember.
type AddEnterpriseOrganizationMemberInput struct {
	// The ID of the enterprise which owns the organization.
	EnterpriseID ID "json:\"enterpriseId\""
	// The ID of the organization the users will be added to.
	OrganizationID ID "json:\"organizationId\""
	// The IDs of the enterprise members to add.
	UserIDs []ID "json:\"userIds\""
	// The role to assign the users in the organization.
	Role *OrganizationMemberRole "json:\"role\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddEnterpriseOrganizationMemberInput implements the Input interface.
var _ Input = (*AddEnterpriseOrganizationMemberInput)(nil)

// isInput implements the Input interface.
func (AddEnterpriseOrganizationMemberInput) isInput() {}

// AddEnterpriseSupportEntitlementInput is an autogenerated input type of AddEnterpriseSupportEntitlement.
type AddEnterpriseSupportEntitlementInput struct {
	// The ID of the Enterprise which the admin belongs to.
	EnterpriseID ID "json:\"enterpriseId\""
	// The login of a member who will receive the support entitlement.
	Login string "json:\"login\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddEnterpriseSupportEntitlementInput implements the Input interface.
var _ Input = (*AddEnterpriseSupportEntitlementInput)(nil)

// isInput implements the Input interface.
func (AddEnterpriseSupportEntitlementInput) isInput() {}

// AddLabelsToLabelableInput is an autogenerated input type of AddLabelsToLabelable.
type AddLabelsToLabelableInput struct {
	// The id of the labelable object to add labels to.
	LabelableID ID "json:\"labelableId\""
	// The ids of the labels to add.
	LabelIDs []ID "json:\"labelIds\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddLabelsToLabelableInput implements the Input interface.
var _ Input = (*AddLabelsToLabelableInput)(nil)

// isInput implements the Input interface.
func (AddLabelsToLabelableInput) isInput() {}

// AddProjectCardInput is an autogenerated input type of AddProjectCard.
type AddProjectCardInput struct {
	// The Node ID of the ProjectColumn.
	ProjectColumnID ID "json:\"projectColumnId\""
	// The content of the card. Must be a member of the ProjectCardItem union.
	ContentID *ID "json:\"contentId\""
	// The note on the card.
	Note *string "json:\"note\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddProjectCardInput implements the Input interface.
var _ Input = (*AddProjectCardInput)(nil)

// isInput implements the Input interface.
func (AddProjectCardInput) isInput() {}

// AddProjectColumnInput is an autogenerated input type of AddProjectColumn.
type AddProjectColumnInput struct {
	// The Node ID of the project.
	ProjectID ID "json:\"projectId\""
	// The name of the column.
	Name string "json:\"name\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddProjectColumnInput implements the Input interface.
var _ Input = (*AddProjectColumnInput)(nil)

// isInput implements the Input interface.
func (AddProjectColumnInput) isInput() {}

// AddProjectV2DraftIssueInput is an autogenerated input type of AddProjectV2DraftIssue.
type AddProjectV2DraftIssueInput struct {
	// The ID of the Project to add the draft issue to.
	ProjectID ID "json:\"projectId\""
	// The title of the draft issue. A project item can also be created by providing the URL of an Issue or Pull Request if you have access.
	Title string "json:\"title\""
	// The body of the draft issue.
	Body *string "json:\"body\""
	// The IDs of the assignees of the draft issue.
	AssigneeIDs *[]ID "json:\"assigneeIds\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddProjectV2DraftIssueInput implements the Input interface.
var _ Input = (*AddProjectV2DraftIssueInput)(nil)

// isInput implements the Input interface.
func (AddProjectV2DraftIssueInput) isInput() {}

// AddProjectV2ItemByIDInput is an autogenerated input type of AddProjectV2ItemById.
type AddProjectV2ItemByIDInput struct {
	// The ID of the Project to add the item to.
	ProjectID ID "json:\"projectId\""
	// The id of the Issue or Pull Request to add.
	ContentID ID "json:\"contentId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddProjectV2ItemByIDInput implements the Input interface.
var _ Input = (*AddProjectV2ItemByIDInput)(nil)

// isInput implements the Input interface.
func (AddProjectV2ItemByIDInput) isInput() {}

// AddPullRequestReviewCommentInput is an autogenerated input type of AddPullRequestReviewComment.
type AddPullRequestReviewCommentInput struct {
	// The node ID of the pull request reviewing
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `pullRequestId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation.
	PullRequestID *ID "json:\"pullRequestId\""
	// The Node ID of the review to modify.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `pullRequestReviewId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation.
	PullRequestReviewID *ID "json:\"pullRequestReviewId\""
	// The SHA of the commit to comment on.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation.
	CommitOID *GitObjectID "json:\"commitOID\""
	// The text of the comment. This field is required
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation.
	Body *string "json:\"body\""
	// The relative path of the file to comment on.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation.
	Path *string "json:\"path\""
	// The line index in the diff to comment on.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation.
	Position *int "json:\"position\""
	// The comment id to reply to.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation.
	InReplyTo *ID "json:\"inReplyTo\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddPullRequestReviewCommentInput implements the Input interface.
var _ Input = (*AddPullRequestReviewCommentInput)(nil)

// isInput implements the Input interface.
func (AddPullRequestReviewCommentInput) isInput() {}

// AddPullRequestReviewInput is an autogenerated input type of AddPullRequestReview.
type AddPullRequestReviewInput struct {
	// The Node ID of the pull request to modify.
	PullRequestID ID "json:\"pullRequestId\""
	// The commit OID the review pertains to.
	CommitOID *GitObjectID "json:\"commitOID\""
	// The contents of the review body comment.
	Body *string "json:\"body\""
	// The event to perform on the pull request review.
	Event *PullRequestReviewEvent "json:\"event\""
	// The review line comments.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `comments` will be removed. use the `threads` argument instead
	// **Reason:** We are deprecating comment fields that use diff-relative positioning.
	Comments *[]*DraftPullRequestReviewComment "json:\"comments\""
	// The review line comment threads.
	Threads *[]*DraftPullRequestReviewThread "json:\"threads\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddPullRequestReviewInput implements the Input interface.
var _ Input = (*AddPullRequestReviewInput)(nil)

// isInput implements the Input interface.
func (AddPullRequestReviewInput) isInput() {}

// AddPullRequestReviewThreadInput is an autogenerated input type of AddPullRequestReviewThread.
type AddPullRequestReviewThreadInput struct {
	// Path to the file being commented on.
	Path string "json:\"path\""
	// Body of the thread's first comment.
	Body string "json:\"body\""
	// The node ID of the pull request reviewing.
	PullRequestID *ID "json:\"pullRequestId\""
	// The Node ID of the review to modify.
	PullRequestReviewID *ID "json:\"pullRequestReviewId\""
	// The line of the blob to which the thread refers, required for line-level threads. The end of the line range for multi-line comments.
	Line *int "json:\"line\""
	// The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
	Side *DiffSide "json:\"side\""
	// The first line of the range to which the comment refers.
	StartLine *int "json:\"startLine\""
	// The side of the diff on which the start line resides.
	StartSide *DiffSide "json:\"startSide\""
	// The level at which the comments in the corresponding thread are targeted, can be a diff line or a file.
	SubjectType *PullRequestReviewThreadSubjectType "json:\"subjectType\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddPullRequestReviewThreadInput implements the Input interface.
var _ Input = (*AddPullRequestReviewThreadInput)(nil)

// isInput implements the Input interface.
func (AddPullRequestReviewThreadInput) isInput() {}

// AddReactionInput is an autogenerated input type of AddReaction.
type AddReactionInput struct {
	// The Node ID of the subject to modify.
	SubjectID ID "json:\"subjectId\""
	// The name of the emoji to react with.
	Content ReactionContent "json:\"content\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddReactionInput implements the Input interface.
var _ Input = (*AddReactionInput)(nil)

// isInput implements the Input interface.
func (AddReactionInput) isInput() {}

// AddStarInput is an autogenerated input type of AddStar.
type AddStarInput struct {
	// The Starrable ID to star.
	StarrableID ID "json:\"starrableId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddStarInput implements the Input interface.
var _ Input = (*AddStarInput)(nil)

// isInput implements the Input interface.
func (AddStarInput) isInput() {}

// AddUpvoteInput is an autogenerated input type of AddUpvote.
type AddUpvoteInput struct {
	// The Node ID of the discussion or comment to upvote.
	SubjectID ID "json:\"subjectId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddUpvoteInput implements the Input interface.
var _ Input = (*AddUpvoteInput)(nil)

// isInput implements the Input interface.
func (AddUpvoteInput) isInput() {}

// AddVerifiableDomainInput is an autogenerated input type of AddVerifiableDomain.
type AddVerifiableDomainInput struct {
	// The ID of the owner to add the domain to.
	OwnerID ID "json:\"ownerId\""
	// The URL of the domain.
	Domain URI "json:\"domain\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that AddVerifiableDomainInput implements the Input interface.
var _ Input = (*AddVerifiableDomainInput)(nil)

// isInput implements the Input interface.
func (AddVerifiableDomainInput) isInput() {}

// ApproveDeploymentsInput is an autogenerated input type of ApproveDeployments.
type ApproveDeploymentsInput struct {
	// The node ID of the workflow run containing the pending deployments.
	WorkflowRunID ID "json:\"workflowRunId\""
	// The ids of environments to reject deployments.
	EnvironmentIDs []ID "json:\"environmentIds\""
	// Optional comment for approving deployments.
	Comment *string "json:\"comment\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ApproveDeploymentsInput implements the Input interface.
var _ Input = (*ApproveDeploymentsInput)(nil)

// isInput implements the Input interface.
func (ApproveDeploymentsInput) isInput() {}

// ApproveVerifiableDomainInput is an autogenerated input type of ApproveVerifiableDomain.
type ApproveVerifiableDomainInput struct {
	// The ID of the verifiable domain to approve.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ApproveVerifiableDomainInput implements the Input interface.
var _ Input = (*ApproveVerifiableDomainInput)(nil)

// isInput implements the Input interface.
func (ApproveVerifiableDomainInput) isInput() {}

// ArchiveProjectV2ItemInput is an autogenerated input type of ArchiveProjectV2Item.
type ArchiveProjectV2ItemInput struct {
	// The ID of the Project to archive the item from.
	ProjectID ID "json:\"projectId\""
	// The ID of the ProjectV2Item to archive.
	ItemID ID "json:\"itemId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ArchiveProjectV2ItemInput implements the Input interface.
var _ Input = (*ArchiveProjectV2ItemInput)(nil)

// isInput implements the Input interface.
func (ArchiveProjectV2ItemInput) isInput() {}

// ArchiveRepositoryInput is an autogenerated input type of ArchiveRepository.
type ArchiveRepositoryInput struct {
	// The ID of the repository to mark as archived.
	RepositoryID ID "json:\"repositoryId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ArchiveRepositoryInput implements the Input interface.
var _ Input = (*ArchiveRepositoryInput)(nil)

// isInput implements the Input interface.
func (ArchiveRepositoryInput) isInput() {}

// AuditLogOrder represents ordering options for Audit Log connections.
type AuditLogOrder struct {
	// The field to order Audit Logs by.
	Field *AuditLogOrderField "json:\"field\""
	// The ordering direction.
	Direction *OrderDirection "json:\"direction\""
}

// Compile-time assertion that AuditLogOrder implements the Input interface.
var _ Input = (*AuditLogOrder)(nil)

// isInput implements the Input interface.
func (AuditLogOrder) isInput() {}

// AuditLogOrderField represents properties by which Audit Log connections can be ordered.
type AuditLogOrderField string

const (
	// AuditLogOrderFieldCreatedAt. Order audit log entries by timestamp.
	AuditLogOrderFieldCreatedAt AuditLogOrderField = "CREATED_AT"
)

// BranchNamePatternParametersInput represents parameters to be used for the branch_name_pattern rule.
type BranchNamePatternParametersInput struct {
	// How this rule will appear to users.
	Name *string "json:\"name\""
	// If true, the rule will fail if the pattern matches.
	Negate *bool "json:\"negate\""
	// The operator to use for matching.
	Operator string "json:\"operator\""
	// The pattern to match with.
	Pattern string "json:\"pattern\""
}

// Compile-time assertion that BranchNamePatternParametersInput implements the Input interface.
var _ Input = (*BranchNamePatternParametersInput)(nil)

// isInput implements the Input interface.
func (BranchNamePatternParametersInput) isInput() {}

// BulkSponsorship represents information about a sponsorship to make for a user or organization with a GitHub Sponsors profile, as part of sponsoring many users or organizations at once.
type BulkSponsorship struct {
	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
	SponsorableID *ID "json:\"sponsorableId\""
	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
	SponsorableLogin *string "json:\"sponsorableLogin\""
	// The amount to pay to the sponsorable in US dollars. Valid values: 1-12000.
	Amount int "json:\"amount\""
}

// Compile-time assertion that BulkSponsorship implements the Input interface.
var _ Input = (*BulkSponsorship)(nil)

// isInput implements the Input interface.
func (BulkSponsorship) isInput() {}

// CancelEnterpriseAdminInvitationInput is an autogenerated input type of CancelEnterpriseAdminInvitation.
type CancelEnterpriseAdminInvitationInput struct {
	// The Node ID of the pending enterprise administrator invitation.
	InvitationID ID "json:\"invitationId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CancelEnterpriseAdminInvitationInput implements the Input interface.
var _ Input = (*CancelEnterpriseAdminInvitationInput)(nil)

// isInput implements the Input interface.
func (CancelEnterpriseAdminInvitationInput) isInput() {}

// CancelSponsorshipInput is an autogenerated input type of CancelSponsorship.
type CancelSponsorshipInput struct {
	// The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
	SponsorID *ID "json:\"sponsorId\""
	// The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
	SponsorLogin *string "json:\"sponsorLogin\""
	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
	SponsorableID *ID "json:\"sponsorableId\""
	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
	SponsorableLogin *string "json:\"sponsorableLogin\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CancelSponsorshipInput implements the Input interface.
var _ Input = (*CancelSponsorshipInput)(nil)

// isInput implements the Input interface.
func (CancelSponsorshipInput) isInput() {}

// ChangeUserStatusInput is an autogenerated input type of ChangeUserStatus.
type ChangeUserStatusInput struct {
	// The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
	Emoji *string "json:\"emoji\""
	// A short description of your current status.
	Message *string "json:\"message\""
	// The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible.
	OrganizationID *ID "json:\"organizationId\""
	// Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
	LimitedAvailability *bool "json:\"limitedAvailability\""
	// If set, the user status will not be shown after this date.
	ExpiresAt *DateTime "json:\"expiresAt\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ChangeUserStatusInput implements the Input interface.
var _ Input = (*ChangeUserStatusInput)(nil)

// isInput implements the Input interface.
func (ChangeUserStatusInput) isInput() {}

// CheckAnnotationData represents information from a check run analysis to specific lines of code.
type CheckAnnotationData struct {
	// The path of the file to add an annotation to.
	Path string "json:\"path\""
	// The location of the annotation.
	Location CheckAnnotationRange "json:\"location\""
	// Represents an annotation's information level.
	AnnotationLevel CheckAnnotationLevel "json:\"annotationLevel\""
	// A short description of the feedback for these lines of code.
	Message string "json:\"message\""
	// The title that represents the annotation.
	Title *string "json:\"title\""
	// Details about this annotation.
	RawDetails *string "json:\"rawDetails\""
}

// Compile-time assertion that CheckAnnotationData implements the Input interface.
var _ Input = (*CheckAnnotationData)(nil)

// isInput implements the Input interface.
func (CheckAnnotationData) isInput() {}

// CheckAnnotationLevel represents represents an annotation's information level.
type CheckAnnotationLevel string

const (
	// CheckAnnotationLevelFailure. An annotation indicating an inescapable error.
	CheckAnnotationLevelFailure CheckAnnotationLevel = "FAILURE"
	// CheckAnnotationLevelNotice. An annotation indicating some information.
	CheckAnnotationLevelNotice CheckAnnotationLevel = "NOTICE"
	// CheckAnnotationLevelWarning. An annotation indicating an ignorable error.
	CheckAnnotationLevelWarning CheckAnnotationLevel = "WARNING"
)

// CheckAnnotationRange represents information from a check run analysis to specific lines of code.
type CheckAnnotationRange struct {
	// The starting line of the range.
	StartLine int "json:\"startLine\""
	// The starting column of the range.
	StartColumn *int "json:\"startColumn\""
	// The ending line of the range.
	EndLine int "json:\"endLine\""
	// The ending column of the range.
	EndColumn *int "json:\"endColumn\""
}

// Compile-time assertion that CheckAnnotationRange implements the Input interface.
var _ Input = (*CheckAnnotationRange)(nil)

// isInput implements the Input interface.
func (CheckAnnotationRange) isInput() {}

// CheckConclusionState represents the possible states for a check suite or run conclusion.
type CheckConclusionState string

const (
	// CheckConclusionStateActionRequired. The check suite or run requires action.
	CheckConclusionStateActionRequired CheckConclusionState = "ACTION_REQUIRED"
	// CheckConclusionStateTimedOut. The check suite or run has timed out.
	CheckConclusionStateTimedOut CheckConclusionState = "TIMED_OUT"
	// CheckConclusionStateCancelled. The check suite or run has been cancelled.
	CheckConclusionStateCancelled CheckConclusionState = "CANCELLED"
	// CheckConclusionStateFailure. The check suite or run has failed.
	CheckConclusionStateFailure CheckConclusionState = "FAILURE"
	// CheckConclusionStateSuccess. The check suite or run has succeeded.
	CheckConclusionStateSuccess CheckConclusionState = "SUCCESS"
	// CheckConclusionStateNeutral. The check suite or run was neutral.
	CheckConclusionStateNeutral CheckConclusionState = "NEUTRAL"
	// CheckConclusionStateSkipped. The check suite or run was skipped.
	CheckConclusionStateSkipped CheckConclusionState = "SKIPPED"
	// CheckConclusionStateStartupFailure. The check suite or run has failed at startup.
	CheckConclusionStateStartupFailure CheckConclusionState = "STARTUP_FAILURE"
	// CheckConclusionStateStale. The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
	CheckConclusionStateStale CheckConclusionState = "STALE"
)

// CheckRunAction represents possible further actions the integrator can perform.
type CheckRunAction struct {
	// The text to be displayed on a button in the web UI.
	Label string "json:\"label\""
	// A short explanation of what this action would do.
	Description string "json:\"description\""
	// A reference for the action on the integrator's system.
	Identifier string "json:\"identifier\""
}

// Compile-time assertion that CheckRunAction implements the Input interface.
var _ Input = (*CheckRunAction)(nil)

// isInput implements the Input interface.
func (CheckRunAction) isInput() {}

// CheckRunFilter represents the filters that are available when fetching check runs.
type CheckRunFilter struct {
	// Filters the check runs by this type.
	CheckType *CheckRunType "json:\"checkType\""
	// Filters the check runs created by this application ID.
	AppID *int "json:\"appId\""
	// Filters the check runs by this name.
	CheckName *string "json:\"checkName\""
	// Filters the check runs by this status. Superceded by statuses.
	Status *CheckStatusState "json:\"status\""
	// Filters the check runs by this status. Overrides status.
	Statuses *[]CheckStatusState "json:\"statuses\""
	// Filters the check runs by these conclusions.
	Conclusions *[]CheckConclusionState "json:\"conclusions\""
}

// Compile-time assertion that CheckRunFilter implements the Input interface.
var _ Input = (*CheckRunFilter)(nil)

// isInput implements the Input interface.
func (CheckRunFilter) isInput() {}

// CheckRunOutput represents descriptive details about the check run.
type CheckRunOutput struct {
	// A title to provide for this check run.
	Title string "json:\"title\""
	// The summary of the check run (supports Commonmark).
	Summary string "json:\"summary\""
	// The details of the check run (supports Commonmark).
	Text *string "json:\"text\""
	// The annotations that are made as part of the check run.
	Annotations *[]CheckAnnotationData "json:\"annotations\""
	// Images attached to the check run output displayed in the GitHub pull request UI.
	Images *[]CheckRunOutputImage "json:\"images\""
}

// Compile-time assertion that CheckRunOutput implements the Input interface.
var _ Input = (*CheckRunOutput)(nil)

// isInput implements the Input interface.
func (CheckRunOutput) isInput() {}

// CheckRunOutputImage represents images attached to the check run output displayed in the GitHub pull request UI.
type CheckRunOutputImage struct {
	// The alternative text for the image.
	Alt string "json:\"alt\""
	// The full URL of the image.
	ImageURL URI "json:\"imageUrl\""
	// A short image description.
	Caption *string "json:\"caption\""
}

// Compile-time assertion that CheckRunOutputImage implements the Input interface.
var _ Input = (*CheckRunOutputImage)(nil)

// isInput implements the Input interface.
func (CheckRunOutputImage) isInput() {}

// CheckRunState represents the possible states of a check run in a status rollup.
type CheckRunState string

const (
	// CheckRunStateActionRequired. The check run requires action.
	CheckRunStateActionRequired CheckRunState = "ACTION_REQUIRED"
	// CheckRunStateCancelled. The check run has been cancelled.
	CheckRunStateCancelled CheckRunState = "CANCELLED"
	// CheckRunStateCompleted. The check run has been completed.
	CheckRunStateCompleted CheckRunState = "COMPLETED"
	// CheckRunStateFailure. The check run has failed.
	CheckRunStateFailure CheckRunState = "FAILURE"
	// CheckRunStateInProgress. The check run is in progress.
	CheckRunStateInProgress CheckRunState = "IN_PROGRESS"
	// CheckRunStateNeutral. The check run was neutral.
	CheckRunStateNeutral CheckRunState = "NEUTRAL"
	// CheckRunStatePending. The check run is in pending state.
	CheckRunStatePending CheckRunState = "PENDING"
	// CheckRunStateQueued. The check run has been queued.
	CheckRunStateQueued CheckRunState = "QUEUED"
	// CheckRunStateSkipped. The check run was skipped.
	CheckRunStateSkipped CheckRunState = "SKIPPED"
	// CheckRunStateStale. The check run was marked stale by GitHub. Only GitHub can use this conclusion.
	CheckRunStateStale CheckRunState = "STALE"
	// CheckRunStateStartupFailure. The check run has failed at startup.
	CheckRunStateStartupFailure CheckRunState = "STARTUP_FAILURE"
	// CheckRunStateSuccess. The check run has succeeded.
	CheckRunStateSuccess CheckRunState = "SUCCESS"
	// CheckRunStateTimedOut. The check run has timed out.
	CheckRunStateTimedOut CheckRunState = "TIMED_OUT"
	// CheckRunStateWaiting. The check run is in waiting state.
	CheckRunStateWaiting CheckRunState = "WAITING"
)

// CheckRunType represents the possible types of check runs.
type CheckRunType string

const (
	// CheckRunTypeAll. Every check run available.
	CheckRunTypeAll CheckRunType = "ALL"
	// CheckRunTypeLatest. The latest check run.
	CheckRunTypeLatest CheckRunType = "LATEST"
)

// CheckStatusState represents the possible states for a check suite or run status.
type CheckStatusState string

const (
	// CheckStatusStateQueued. The check suite or run has been queued.
	CheckStatusStateQueued CheckStatusState = "QUEUED"
	// CheckStatusStateInProgress. The check suite or run is in progress.
	CheckStatusStateInProgress CheckStatusState = "IN_PROGRESS"
	// CheckStatusStateCompleted. The check suite or run has been completed.
	CheckStatusStateCompleted CheckStatusState = "COMPLETED"
	// CheckStatusStateWaiting. The check suite or run is in waiting state.
	CheckStatusStateWaiting CheckStatusState = "WAITING"
	// CheckStatusStatePending. The check suite or run is in pending state.
	CheckStatusStatePending CheckStatusState = "PENDING"
	// CheckStatusStateRequested. The check suite or run has been requested.
	CheckStatusStateRequested CheckStatusState = "REQUESTED"
)

// CheckSuiteAutoTriggerPreference represents the auto-trigger preferences that are available for check suites.
type CheckSuiteAutoTriggerPreference struct {
	// The node ID of the application that owns the check suite.
	AppID ID "json:\"appId\""
	// Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.
	Setting bool "json:\"setting\""
}

// Compile-time assertion that CheckSuiteAutoTriggerPreference implements the Input interface.
var _ Input = (*CheckSuiteAutoTriggerPreference)(nil)

// isInput implements the Input interface.
func (CheckSuiteAutoTriggerPreference) isInput() {}

// CheckSuiteFilter represents the filters that are available when fetching check suites.
type CheckSuiteFilter struct {
	// Filters the check suites created by this application ID.
	AppID *int "json:\"appId\""
	// Filters the check suites by this name.
	CheckName *string "json:\"checkName\""
}

// Compile-time assertion that CheckSuiteFilter implements the Input interface.
var _ Input = (*CheckSuiteFilter)(nil)

// isInput implements the Input interface.
func (CheckSuiteFilter) isInput() {}

// ClearLabelsFromLabelableInput is an autogenerated input type of ClearLabelsFromLabelable.
type ClearLabelsFromLabelableInput struct {
	// The id of the labelable object to clear the labels from.
	LabelableID ID "json:\"labelableId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ClearLabelsFromLabelableInput implements the Input interface.
var _ Input = (*ClearLabelsFromLabelableInput)(nil)

// isInput implements the Input interface.
func (ClearLabelsFromLabelableInput) isInput() {}

// ClearProjectV2ItemFieldValueInput is an autogenerated input type of ClearProjectV2ItemFieldValue.
type ClearProjectV2ItemFieldValueInput struct {
	// The ID of the Project.
	ProjectID ID "json:\"projectId\""
	// The ID of the item to be cleared.
	ItemID ID "json:\"itemId\""
	// The ID of the field to be cleared.
	FieldID ID "json:\"fieldId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ClearProjectV2ItemFieldValueInput implements the Input interface.
var _ Input = (*ClearProjectV2ItemFieldValueInput)(nil)

// isInput implements the Input interface.
func (ClearProjectV2ItemFieldValueInput) isInput() {}

// CloneProjectInput is an autogenerated input type of CloneProject.
type CloneProjectInput struct {
	// The owner ID to create the project under.
	TargetOwnerID ID "json:\"targetOwnerId\""
	// The source project to clone.
	SourceID ID "json:\"sourceId\""
	// Whether or not to clone the source project's workflows.
	IncludeWorkflows bool "json:\"includeWorkflows\""
	// The name of the project.
	Name string "json:\"name\""
	// The description of the project.
	Body *string "json:\"body\""
	// The visibility of the project, defaults to false (private).
	Public *bool "json:\"public\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CloneProjectInput implements the Input interface.
var _ Input = (*CloneProjectInput)(nil)

// isInput implements the Input interface.
func (CloneProjectInput) isInput() {}

// CloneTemplateRepositoryInput is an autogenerated input type of CloneTemplateRepository.
type CloneTemplateRepositoryInput struct {
	// The Node ID of the template repository.
	RepositoryID ID "json:\"repositoryId\""
	// The name of the new repository.
	Name string "json:\"name\""
	// The ID of the owner for the new repository.
	OwnerID ID "json:\"ownerId\""
	// A short description of the new repository.
	Description *string "json:\"description\""
	// Indicates the repository's visibility level.
	Visibility RepositoryVisibility "json:\"visibility\""
	// Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template.
	IncludeAllBranches *bool "json:\"includeAllBranches\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CloneTemplateRepositoryInput implements the Input interface.
var _ Input = (*CloneTemplateRepositoryInput)(nil)

// isInput implements the Input interface.
func (CloneTemplateRepositoryInput) isInput() {}

// CloseDiscussionInput is an autogenerated input type of CloseDiscussion.
type CloseDiscussionInput struct {
	// ID of the discussion to be closed.
	DiscussionID ID "json:\"discussionId\""
	// The reason why the discussion is being closed.
	Reason *DiscussionCloseReason "json:\"reason\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CloseDiscussionInput implements the Input interface.
var _ Input = (*CloseDiscussionInput)(nil)

// isInput implements the Input interface.
func (CloseDiscussionInput) isInput() {}

// CloseIssueInput is an autogenerated input type of CloseIssue.
type CloseIssueInput struct {
	// ID of the issue to be closed.
	IssueID ID "json:\"issueId\""
	// The reason the issue is to be closed.
	StateReason *IssueClosedStateReason "json:\"stateReason\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CloseIssueInput implements the Input interface.
var _ Input = (*CloseIssueInput)(nil)

// isInput implements the Input interface.
func (CloseIssueInput) isInput() {}

// ClosePullRequestInput is an autogenerated input type of ClosePullRequest.
type ClosePullRequestInput struct {
	// ID of the pull request to be closed.
	PullRequestID ID "json:\"pullRequestId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ClosePullRequestInput implements the Input interface.
var _ Input = (*ClosePullRequestInput)(nil)

// isInput implements the Input interface.
func (ClosePullRequestInput) isInput() {}

// CollaboratorAffiliation represents collaborators affiliation level with a subject.
type CollaboratorAffiliation string

const (
	// CollaboratorAffiliationOutside. All outside collaborators of an organization-owned subject.
	CollaboratorAffiliationOutside CollaboratorAffiliation = "OUTSIDE"
	// CollaboratorAffiliationDirect. All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
	CollaboratorAffiliationDirect CollaboratorAffiliation = "DIRECT"
	// CollaboratorAffiliationAll. All collaborators the authenticated user can see.
	CollaboratorAffiliationAll CollaboratorAffiliation = "ALL"
)

// CommentAuthorAssociation represents a comment author association with repository.
type CommentAuthorAssociation string

const (
	// CommentAuthorAssociationMember. Author is a member of the organization that owns the repository.
	CommentAuthorAssociationMember CommentAuthorAssociation = "MEMBER"
	// CommentAuthorAssociationOwner. Author is the owner of the repository.
	CommentAuthorAssociationOwner CommentAuthorAssociation = "OWNER"
	// CommentAuthorAssociationMannequin. Author is a placeholder for an unclaimed user.
	CommentAuthorAssociationMannequin CommentAuthorAssociation = "MANNEQUIN"
	// CommentAuthorAssociationCollaborator. Author has been invited to collaborate on the repository.
	CommentAuthorAssociationCollaborator CommentAuthorAssociation = "COLLABORATOR"
	// CommentAuthorAssociationContributor. Author has previously committed to the repository.
	CommentAuthorAssociationContributor CommentAuthorAssociation = "CONTRIBUTOR"
	// CommentAuthorAssociationFirstTimeContributor. Author has not previously committed to the repository.
	CommentAuthorAssociationFirstTimeContributor CommentAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	// CommentAuthorAssociationFirstTimer. Author has not previously committed to GitHub.
	CommentAuthorAssociationFirstTimer CommentAuthorAssociation = "FIRST_TIMER"
	// CommentAuthorAssociationNone. Author has no association with the repository.
	CommentAuthorAssociationNone CommentAuthorAssociation = "NONE"
)

// CommentCannotUpdateReason represents the possible errors that will prevent a user from updating a comment.
type CommentCannotUpdateReason string

const (
	// CommentCannotUpdateReasonArchived. Unable to create comment because repository is archived.
	CommentCannotUpdateReasonArchived CommentCannotUpdateReason = "ARCHIVED"
	// CommentCannotUpdateReasonInsufficientAccess. You must be the author or have write access to this repository to update this comment.
	CommentCannotUpdateReasonInsufficientAccess CommentCannotUpdateReason = "INSUFFICIENT_ACCESS"
	// CommentCannotUpdateReasonLocked. Unable to create comment because issue is locked.
	CommentCannotUpdateReasonLocked CommentCannotUpdateReason = "LOCKED"
	// CommentCannotUpdateReasonLoginRequired. You must be logged in to update this comment.
	CommentCannotUpdateReasonLoginRequired CommentCannotUpdateReason = "LOGIN_REQUIRED"
	// CommentCannotUpdateReasonMaintenance. Repository is under maintenance.
	CommentCannotUpdateReasonMaintenance CommentCannotUpdateReason = "MAINTENANCE"
	// CommentCannotUpdateReasonVerifiedEmailRequired. At least one email address must be verified to update this comment.
	CommentCannotUpdateReasonVerifiedEmailRequired CommentCannotUpdateReason = "VERIFIED_EMAIL_REQUIRED"
	// CommentCannotUpdateReasonDenied. You cannot update this comment.
	CommentCannotUpdateReasonDenied CommentCannotUpdateReason = "DENIED"
)

// CommitAuthor represents specifies an author for filtering Git commits.
type CommitAuthor struct {
	// ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails.
	ID *ID "json:\"id\""
	// Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
	Emails *[]string "json:\"emails\""
}

// Compile-time assertion that CommitAuthor implements the Input interface.
var _ Input = (*CommitAuthor)(nil)

// isInput implements the Input interface.
func (CommitAuthor) isInput() {}

// CommitAuthorEmailPatternParametersInput represents parameters to be used for the commit_author_email_pattern rule.
type CommitAuthorEmailPatternParametersInput struct {
	// How this rule will appear to users.
	Name *string "json:\"name\""
	// If true, the rule will fail if the pattern matches.
	Negate *bool "json:\"negate\""
	// The operator to use for matching.
	Operator string "json:\"operator\""
	// The pattern to match with.
	Pattern string "json:\"pattern\""
}

// Compile-time assertion that CommitAuthorEmailPatternParametersInput implements the Input interface.
var _ Input = (*CommitAuthorEmailPatternParametersInput)(nil)

// isInput implements the Input interface.
func (CommitAuthorEmailPatternParametersInput) isInput() {}

// CommitContributionOrder represents ordering options for commit contribution connections.
type CommitContributionOrder struct {
	// The field by which to order commit contributions.
	Field CommitContributionOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that CommitContributionOrder implements the Input interface.
var _ Input = (*CommitContributionOrder)(nil)

// isInput implements the Input interface.
func (CommitContributionOrder) isInput() {}

// CommitContributionOrderField represents properties by which commit contribution connections can be ordered.
type CommitContributionOrderField string

const (
	// CommitContributionOrderFieldOccurredAt. Order commit contributions by when they were made.
	CommitContributionOrderFieldOccurredAt CommitContributionOrderField = "OCCURRED_AT"
	// CommitContributionOrderFieldCommitCount. Order commit contributions by how many commits they represent.
	CommitContributionOrderFieldCommitCount CommitContributionOrderField = "COMMIT_COUNT"
)

// CommitMessage represents a message to include with a new commit.
type CommitMessage struct {
	// The headline of the message.
	Headline string "json:\"headline\""
	// The body of the message.
	Body *string "json:\"body\""
}

// Compile-time assertion that CommitMessage implements the Input interface.
var _ Input = (*CommitMessage)(nil)

// isInput implements the Input interface.
func (CommitMessage) isInput() {}

// CommitMessagePatternParametersInput represents parameters to be used for the commit_message_pattern rule.
type CommitMessagePatternParametersInput struct {
	// How this rule will appear to users.
	Name *string "json:\"name\""
	// If true, the rule will fail if the pattern matches.
	Negate *bool "json:\"negate\""
	// The operator to use for matching.
	Operator string "json:\"operator\""
	// The pattern to match with.
	Pattern string "json:\"pattern\""
}

// Compile-time assertion that CommitMessagePatternParametersInput implements the Input interface.
var _ Input = (*CommitMessagePatternParametersInput)(nil)

// isInput implements the Input interface.
func (CommitMessagePatternParametersInput) isInput() {}

// CommittableBranch represents a git ref for a commit to be appended to.
//
// The ref must be a branch, i.e. its fully qualified name must start
// with `refs/heads/` (although the input is not required to be fully
// qualified).
//
// The Ref may be specified by its global node ID or by the
// `repositoryNameWithOwner` and `branchName`.
//
// ### Examples
//
// Specify a branch using a global node ID:
//
//	{ "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }
//
// Specify a branch using `repositoryNameWithOwner` and `branchName`:
//
//	{
//	  "repositoryNameWithOwner": "github/graphql-client",
//	  "branchName": "main"
//	}.
type CommittableBranch struct {
	// The Node ID of the Ref to be updated.
	ID *ID "json:\"id\""
	// The nameWithOwner of the repository to commit to.
	RepositoryNameWithOwner *string "json:\"repositoryNameWithOwner\""
	// The unqualified name of the branch to append the commit to.
	BranchName *string "json:\"branchName\""
}

// Compile-time assertion that CommittableBranch implements the Input interface.
var _ Input = (*CommittableBranch)(nil)

// isInput implements the Input interface.
func (CommittableBranch) isInput() {}

// CommitterEmailPatternParametersInput represents parameters to be used for the committer_email_pattern rule.
type CommitterEmailPatternParametersInput struct {
	// How this rule will appear to users.
	Name *string "json:\"name\""
	// If true, the rule will fail if the pattern matches.
	Negate *bool "json:\"negate\""
	// The operator to use for matching.
	Operator string "json:\"operator\""
	// The pattern to match with.
	Pattern string "json:\"pattern\""
}

// Compile-time assertion that CommitterEmailPatternParametersInput implements the Input interface.
var _ Input = (*CommitterEmailPatternParametersInput)(nil)

// isInput implements the Input interface.
func (CommitterEmailPatternParametersInput) isInput() {}

// ComparisonStatus represents the status of a git comparison between two refs.
type ComparisonStatus string

const (
	// ComparisonStatusDiverged. The head ref is both ahead and behind of the base ref, indicating git history has diverged.
	ComparisonStatusDiverged ComparisonStatus = "DIVERGED"
	// ComparisonStatusAhead. The head ref is ahead of the base ref.
	ComparisonStatusAhead ComparisonStatus = "AHEAD"
	// ComparisonStatusBehind. The head ref is behind the base ref.
	ComparisonStatusBehind ComparisonStatus = "BEHIND"
	// ComparisonStatusIdentical. The head ref and base ref are identical.
	ComparisonStatusIdentical ComparisonStatus = "IDENTICAL"
)

// ContributionLevel represents varying levels of contributions from none to many.
type ContributionLevel string

const (
	// ContributionLevelNone. No contributions occurred.
	ContributionLevelNone ContributionLevel = "NONE"
	// ContributionLevelFirstQuartile. Lowest 25% of days of contributions.
	ContributionLevelFirstQuartile ContributionLevel = "FIRST_QUARTILE"
	// ContributionLevelSecondQuartile. Second lowest 25% of days of contributions. More contributions than the first quartile.
	ContributionLevelSecondQuartile ContributionLevel = "SECOND_QUARTILE"
	// ContributionLevelThirdQuartile. Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
	ContributionLevelThirdQuartile ContributionLevel = "THIRD_QUARTILE"
	// ContributionLevelFourthQuartile. Highest 25% of days of contributions. More contributions than the third quartile.
	ContributionLevelFourthQuartile ContributionLevel = "FOURTH_QUARTILE"
)

// ContributionOrder represents ordering options for contribution connections.
type ContributionOrder struct {
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that ContributionOrder implements the Input interface.
var _ Input = (*ContributionOrder)(nil)

// isInput implements the Input interface.
func (ContributionOrder) isInput() {}

// ConvertProjectCardNoteToIssueInput is an autogenerated input type of ConvertProjectCardNoteToIssue.
type ConvertProjectCardNoteToIssueInput struct {
	// The ProjectCard ID to convert.
	ProjectCardID ID "json:\"projectCardId\""
	// The ID of the repository to create the issue in.
	RepositoryID ID "json:\"repositoryId\""
	// The title of the newly created issue. Defaults to the card's note text.
	Title *string "json:\"title\""
	// The body of the newly created issue.
	Body *string "json:\"body\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ConvertProjectCardNoteToIssueInput implements the Input interface.
var _ Input = (*ConvertProjectCardNoteToIssueInput)(nil)

// isInput implements the Input interface.
func (ConvertProjectCardNoteToIssueInput) isInput() {}

// ConvertPullRequestToDraftInput is an autogenerated input type of ConvertPullRequestToDraft.
type ConvertPullRequestToDraftInput struct {
	// ID of the pull request to convert to draft.
	PullRequestID ID "json:\"pullRequestId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ConvertPullRequestToDraftInput implements the Input interface.
var _ Input = (*ConvertPullRequestToDraftInput)(nil)

// isInput implements the Input interface.
func (ConvertPullRequestToDraftInput) isInput() {}

// CopyProjectV2Input is an autogenerated input type of CopyProjectV2.
type CopyProjectV2Input struct {
	// The ID of the source Project to copy.
	ProjectID ID "json:\"projectId\""
	// The owner ID of the new project.
	OwnerID ID "json:\"ownerId\""
	// The title of the project.
	Title string "json:\"title\""
	// Include draft issues in the new project.
	IncludeDraftIssues *bool "json:\"includeDraftIssues\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CopyProjectV2Input implements the Input interface.
var _ Input = (*CopyProjectV2Input)(nil)

// isInput implements the Input interface.
func (CopyProjectV2Input) isInput() {}

// CreateAttributionInvitationInput is an autogenerated input type of CreateAttributionInvitation.
type CreateAttributionInvitationInput struct {
	// The Node ID of the owner scoping the reattributable data.
	OwnerID ID "json:\"ownerId\""
	// The Node ID of the account owning the data to reattribute.
	SourceID ID "json:\"sourceId\""
	// The Node ID of the account which may claim the data.
	TargetID ID "json:\"targetId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateAttributionInvitationInput implements the Input interface.
var _ Input = (*CreateAttributionInvitationInput)(nil)

// isInput implements the Input interface.
func (CreateAttributionInvitationInput) isInput() {}

// CreateBranchProtectionRuleInput is an autogenerated input type of CreateBranchProtectionRule.
type CreateBranchProtectionRuleInput struct {
	// The global relay id of the repository in which a new branch protection rule should be created in.
	RepositoryID ID "json:\"repositoryId\""
	// The glob-like pattern used to determine matching branches.
	Pattern string "json:\"pattern\""
	// Are approving reviews required to update matching branches.
	RequiresApprovingReviews *bool "json:\"requiresApprovingReviews\""
	// Number of approving reviews required to update matching branches.
	RequiredApprovingReviewCount *int "json:\"requiredApprovingReviewCount\""
	// Are commits required to be signed.
	RequiresCommitSignatures *bool "json:\"requiresCommitSignatures\""
	// Are merge commits prohibited from being pushed to this branch.
	RequiresLinearHistory *bool "json:\"requiresLinearHistory\""
	// Is branch creation a protected operation.
	BlocksCreations *bool "json:\"blocksCreations\""
	// Are force pushes allowed on this branch.
	AllowsForcePushes *bool "json:\"allowsForcePushes\""
	// Can this branch be deleted.
	AllowsDeletions *bool "json:\"allowsDeletions\""
	// Can admins overwrite branch protection.
	IsAdminEnforced *bool "json:\"isAdminEnforced\""
	// Are status checks required to update matching branches.
	RequiresStatusChecks *bool "json:\"requiresStatusChecks\""
	// Are branches required to be up to date before merging.
	RequiresStrictStatusChecks *bool "json:\"requiresStrictStatusChecks\""
	// Are reviews from code owners required to update matching branches.
	RequiresCodeOwnerReviews *bool "json:\"requiresCodeOwnerReviews\""
	// Will new commits pushed to matching branches dismiss pull request review approvals.
	DismissesStaleReviews *bool "json:\"dismissesStaleReviews\""
	// Is dismissal of pull request reviews restricted.
	RestrictsReviewDismissals *bool "json:\"restrictsReviewDismissals\""
	// A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.
	ReviewDismissalActorIDs *[]ID "json:\"reviewDismissalActorIds\""
	// A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.
	BypassPullRequestActorIDs *[]ID "json:\"bypassPullRequestActorIds\""
	// A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.
	BypassForcePushActorIDs *[]ID "json:\"bypassForcePushActorIds\""
	// Is pushing to matching branches restricted.
	RestrictsPushes *bool "json:\"restrictsPushes\""
	// A list of User, Team, or App IDs allowed to push to matching branches.
	PushActorIDs *[]ID "json:\"pushActorIds\""
	// List of required status check contexts that must pass for commits to be accepted to matching branches.
	RequiredStatusCheckContexts *[]string "json:\"requiredStatusCheckContexts\""
	// The list of required status checks.
	RequiredStatusChecks *[]RequiredStatusCheckInput "json:\"requiredStatusChecks\""
	// Are successful deployments required before merging.
	RequiresDeployments *bool "json:\"requiresDeployments\""
	// The list of required deployment environments.
	RequiredDeploymentEnvironments *[]string "json:\"requiredDeploymentEnvironments\""
	// Are conversations required to be resolved before merging.
	RequiresConversationResolution *bool "json:\"requiresConversationResolution\""
	// Whether the most recent push must be approved by someone other than the person who pushed it.
	RequireLastPushApproval *bool "json:\"requireLastPushApproval\""
	// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
	LockBranch *bool "json:\"lockBranch\""
	// Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
	LockAllowsFetchAndMerge *bool "json:\"lockAllowsFetchAndMerge\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateBranchProtectionRuleInput implements the Input interface.
var _ Input = (*CreateBranchProtectionRuleInput)(nil)

// isInput implements the Input interface.
func (CreateBranchProtectionRuleInput) isInput() {}

// CreateCheckRunInput is an autogenerated input type of CreateCheckRun.
type CreateCheckRunInput struct {
	// The node ID of the repository.
	RepositoryID ID "json:\"repositoryId\""
	// The name of the check.
	Name string "json:\"name\""
	// The SHA of the head commit.
	HeadSha GitObjectID "json:\"headSha\""
	// The URL of the integrator's site that has the full details of the check.
	DetailsURL *URI "json:\"detailsUrl\""
	// A reference for the run on the integrator's system.
	ExternalID *string "json:\"externalId\""
	// The current status.
	Status *RequestableCheckStatusState "json:\"status\""
	// The time that the check run began.
	StartedAt *DateTime "json:\"startedAt\""
	// The final conclusion of the check.
	Conclusion *CheckConclusionState "json:\"conclusion\""
	// The time that the check run finished.
	CompletedAt *DateTime "json:\"completedAt\""
	// Descriptive details about the run.
	Output *CheckRunOutput "json:\"output\""
	// Possible further actions the integrator can perform, which a user may trigger.
	Actions *[]CheckRunAction "json:\"actions\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateCheckRunInput implements the Input interface.
var _ Input = (*CreateCheckRunInput)(nil)

// isInput implements the Input interface.
func (CreateCheckRunInput) isInput() {}

// CreateCheckSuiteInput is an autogenerated input type of CreateCheckSuite.
type CreateCheckSuiteInput struct {
	// The Node ID of the repository.
	RepositoryID ID "json:\"repositoryId\""
	// The SHA of the head commit.
	HeadSha GitObjectID "json:\"headSha\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateCheckSuiteInput implements the Input interface.
var _ Input = (*CreateCheckSuiteInput)(nil)

// isInput implements the Input interface.
func (CreateCheckSuiteInput) isInput() {}

// CreateCommitOnBranchInput is an autogenerated input type of CreateCommitOnBranch.
type CreateCommitOnBranchInput struct {
	// The Ref to be updated.  Must be a branch.
	Branch CommittableBranch "json:\"branch\""
	// A description of changes to files in this commit.
	FileChanges *FileChanges "json:\"fileChanges\""
	// The commit message the be included with the commit.
	Message CommitMessage "json:\"message\""
	// The git commit oid expected at the head of the branch prior to the commit.
	ExpectedHeadOid GitObjectID "json:\"expectedHeadOid\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateCommitOnBranchInput implements the Input interface.
var _ Input = (*CreateCommitOnBranchInput)(nil)

// isInput implements the Input interface.
func (CreateCommitOnBranchInput) isInput() {}

// CreateDiscussionInput is an autogenerated input type of CreateDiscussion.
type CreateDiscussionInput struct {
	// The id of the repository on which to create the discussion.
	RepositoryID ID "json:\"repositoryId\""
	// The title of the discussion.
	Title string "json:\"title\""
	// The body of the discussion.
	Body string "json:\"body\""
	// The id of the discussion category to associate with this discussion.
	CategoryID ID "json:\"categoryId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateDiscussionInput implements the Input interface.
var _ Input = (*CreateDiscussionInput)(nil)

// isInput implements the Input interface.
func (CreateDiscussionInput) isInput() {}

// CreateEnterpriseOrganizationInput is an autogenerated input type of CreateEnterpriseOrganization.
type CreateEnterpriseOrganizationInput struct {
	// The ID of the enterprise owning the new organization.
	EnterpriseID ID "json:\"enterpriseId\""
	// The login of the new organization.
	Login string "json:\"login\""
	// The profile name of the new organization.
	ProfileName string "json:\"profileName\""
	// The email used for sending billing receipts.
	BillingEmail string "json:\"billingEmail\""
	// The logins for the administrators of the new organization.
	AdminLogins []string "json:\"adminLogins\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateEnterpriseOrganizationInput implements the Input interface.
var _ Input = (*CreateEnterpriseOrganizationInput)(nil)

// isInput implements the Input interface.
func (CreateEnterpriseOrganizationInput) isInput() {}

// CreateEnvironmentInput is an autogenerated input type of CreateEnvironment.
type CreateEnvironmentInput struct {
	// The node ID of the repository.
	RepositoryID ID "json:\"repositoryId\""
	// The name of the environment.
	Name string "json:\"name\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateEnvironmentInput implements the Input interface.
var _ Input = (*CreateEnvironmentInput)(nil)

// isInput implements the Input interface.
func (CreateEnvironmentInput) isInput() {}

// CreateIPAllowListEntryInput is an autogenerated input type of CreateIpAllowListEntry.
type CreateIPAllowListEntryInput struct {
	// The ID of the owner for which to create the new IP allow list entry.
	OwnerID ID "json:\"ownerId\""
	// An IP address or range of addresses in CIDR notation.
	AllowListValue string "json:\"allowListValue\""
	// An optional name for the IP allow list entry.
	Name *string "json:\"name\""
	// Whether the IP allow list entry is active when an IP allow list is enabled.
	IsActive bool "json:\"isActive\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateIPAllowListEntryInput implements the Input interface.
var _ Input = (*CreateIPAllowListEntryInput)(nil)

// isInput implements the Input interface.
func (CreateIPAllowListEntryInput) isInput() {}

// CreateIssueInput is an autogenerated input type of CreateIssue.
type CreateIssueInput struct {
	// The Node ID of the repository.
	RepositoryID ID "json:\"repositoryId\""
	// The title for the issue.
	Title string "json:\"title\""
	// The body for the issue description.
	Body *string "json:\"body\""
	// The Node ID for the user assignee for this issue.
	AssigneeIDs *[]ID "json:\"assigneeIds\""
	// The Node ID of the milestone for this issue.
	MilestoneID *ID "json:\"milestoneId\""
	// An array of Node IDs of labels for this issue.
	LabelIDs *[]ID "json:\"labelIds\""
	// An array of Node IDs for projects associated with this issue.
	ProjectIDs *[]ID "json:\"projectIds\""
	// The name of an issue template in the repository, assigns labels and assignees from the template to the issue.
	IssueTemplate *string "json:\"issueTemplate\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateIssueInput implements the Input interface.
var _ Input = (*CreateIssueInput)(nil)

// isInput implements the Input interface.
func (CreateIssueInput) isInput() {}

// CreateLinkedBranchInput is an autogenerated input type of CreateLinkedBranch.
type CreateLinkedBranchInput struct {
	// ID of the issue to link to.
	IssueID ID "json:\"issueId\""
	// The commit SHA to base the new branch on.
	Oid GitObjectID "json:\"oid\""
	// The name of the new branch. Defaults to issue number and title.
	Name *string "json:\"name\""
	// ID of the repository to create the branch in. Defaults to the issue repository.
	RepositoryID *ID "json:\"repositoryId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateLinkedBranchInput implements the Input interface.
var _ Input = (*CreateLinkedBranchInput)(nil)

// isInput implements the Input interface.
func (CreateLinkedBranchInput) isInput() {}

// CreateMigrationSourceInput is an autogenerated input type of CreateMigrationSource.
type CreateMigrationSourceInput struct {
	// The migration source name.
	Name string "json:\"name\""
	// The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
	URL *string "json:\"url\""
	// The migration source access token.
	AccessToken *string "json:\"accessToken\""
	// The migration source type.
	Type MigrationSourceType "json:\"type\""
	// The ID of the organization that will own the migration source.
	OwnerID ID "json:\"ownerId\""
	// The GitHub personal access token of the user importing to the target repository.
	GitHubPat *string "json:\"githubPat\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateMigrationSourceInput implements the Input interface.
var _ Input = (*CreateMigrationSourceInput)(nil)

// isInput implements the Input interface.
func (CreateMigrationSourceInput) isInput() {}

// CreateProjectInput is an autogenerated input type of CreateProject.
type CreateProjectInput struct {
	// The owner ID to create the project under.
	OwnerID ID "json:\"ownerId\""
	// The name of project.
	Name string "json:\"name\""
	// The description of project.
	Body *string "json:\"body\""
	// The name of the GitHub-provided template.
	Template *ProjectTemplate "json:\"template\""
	// A list of repository IDs to create as linked repositories for the project.
	RepositoryIDs *[]ID "json:\"repositoryIds\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateProjectInput implements the Input interface.
var _ Input = (*CreateProjectInput)(nil)

// isInput implements the Input interface.
func (CreateProjectInput) isInput() {}

// CreateProjectV2FieldInput is an autogenerated input type of CreateProjectV2Field.
type CreateProjectV2FieldInput struct {
	// The ID of the Project to create the field in.
	ProjectID ID "json:\"projectId\""
	// The data type of the field.
	DataType ProjectV2CustomFieldType "json:\"dataType\""
	// The name of the field.
	Name string "json:\"name\""
	// Options for a single select field. At least one value is required if data_type is SINGLE_SELECT.
	SingleSelectOptions *[]ProjectV2SingleSelectFieldOptionInput "json:\"singleSelectOptions\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateProjectV2FieldInput implements the Input interface.
var _ Input = (*CreateProjectV2FieldInput)(nil)

// isInput implements the Input interface.
func (CreateProjectV2FieldInput) isInput() {}

// CreateProjectV2Input is an autogenerated input type of CreateProjectV2.
type CreateProjectV2Input struct {
	// The owner ID to create the project under.
	OwnerID ID "json:\"ownerId\""
	// The title of the project.
	Title string "json:\"title\""
	// The repository to link the project to.
	RepositoryID *ID "json:\"repositoryId\""
	// The team to link the project to. The team will be granted read permissions.
	TeamID *ID "json:\"teamId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateProjectV2Input implements the Input interface.
var _ Input = (*CreateProjectV2Input)(nil)

// isInput implements the Input interface.
func (CreateProjectV2Input) isInput() {}

// CreatePullRequestInput is an autogenerated input type of CreatePullRequest.
type CreatePullRequestInput struct {
	// The Node ID of the repository.
	RepositoryID ID "json:\"repositoryId\""
	// The name of the branch you want your changes pulled into. This should be an existing branch
	// on the current repository. You cannot update the base branch on a pull request to point
	// to another repository.
	BaseRefName string "json:\"baseRefName\""
	// The name of the branch where your changes are implemented. For cross-repository pull requests
	// in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
	HeadRefName string "json:\"headRefName\""
	// The Node ID of the head repository.
	HeadRepositoryID *ID "json:\"headRepositoryId\""
	// The title of the pull request.
	Title string "json:\"title\""
	// The contents of the pull request.
	Body *string "json:\"body\""
	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool "json:\"maintainerCanModify\""
	// Indicates whether this pull request should be a draft.
	Draft *bool "json:\"draft\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreatePullRequestInput implements the Input interface.
var _ Input = (*CreatePullRequestInput)(nil)

// isInput implements the Input interface.
func (CreatePullRequestInput) isInput() {}

// CreateRefInput is an autogenerated input type of CreateRef.
type CreateRefInput struct {
	// The Node ID of the Repository to create the Ref in.
	RepositoryID ID "json:\"repositoryId\""
	// The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
	Name string "json:\"name\""
	// The GitObjectID that the new Ref shall target. Must point to a commit.
	Oid GitObjectID "json:\"oid\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateRefInput implements the Input interface.
var _ Input = (*CreateRefInput)(nil)

// isInput implements the Input interface.
func (CreateRefInput) isInput() {}

// CreateRepositoryInput is an autogenerated input type of CreateRepository.
type CreateRepositoryInput struct {
	// The name of the new repository.
	Name string "json:\"name\""
	// The ID of the owner for the new repository.
	OwnerID *ID "json:\"ownerId\""
	// A short description of the new repository.
	Description *string "json:\"description\""
	// Indicates the repository's visibility level.
	Visibility RepositoryVisibility "json:\"visibility\""
	// Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
	Template *bool "json:\"template\""
	// The URL for a web page about this repository.
	HomepageURL *URI "json:\"homepageUrl\""
	// Indicates if the repository should have the wiki feature enabled.
	HasWikiEnabled *bool "json:\"hasWikiEnabled\""
	// Indicates if the repository should have the issues feature enabled.
	HasIssuesEnabled *bool "json:\"hasIssuesEnabled\""
	// When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository.
	TeamID *ID "json:\"teamId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateRepositoryInput implements the Input interface.
var _ Input = (*CreateRepositoryInput)(nil)

// isInput implements the Input interface.
func (CreateRepositoryInput) isInput() {}

// CreateRepositoryRulesetInput is an autogenerated input type of CreateRepositoryRuleset.
type CreateRepositoryRulesetInput struct {
	// The global relay id of the source in which a new ruleset should be created in.
	SourceID ID "json:\"sourceId\""
	// The name of the ruleset.
	Name string "json:\"name\""
	// The target of the ruleset.
	Target *RepositoryRulesetTarget "json:\"target\""
	// The list of rules for this ruleset.
	Rules *[]RepositoryRuleInput "json:\"rules\""
	// The set of conditions for this ruleset.
	Conditions RepositoryRuleConditionsInput "json:\"conditions\""
	// The enforcement level for this ruleset.
	Enforcement RuleEnforcement "json:\"enforcement\""
	// The bypass mode for this ruleset.
	BypassMode *RuleBypassMode "json:\"bypassMode\""
	// A list of Team or App IDs allowed to bypass rules in this ruleset.
	BypassActorIDs *[]ID "json:\"bypassActorIds\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateRepositoryRulesetInput implements the Input interface.
var _ Input = (*CreateRepositoryRulesetInput)(nil)

// isInput implements the Input interface.
func (CreateRepositoryRulesetInput) isInput() {}

// CreateSponsorsListingInput is an autogenerated input type of CreateSponsorsListing.
type CreateSponsorsListingInput struct {
	// The username of the organization to create a GitHub Sponsors profile for, if desired. Defaults to creating a GitHub Sponsors profile for the authenticated user if omitted.
	SponsorableLogin *string "json:\"sponsorableLogin\""
	// The username of the supported fiscal host's GitHub organization, if you want to receive sponsorship payouts through a fiscal host rather than directly to a bank account. For example, 'Open-Source-Collective' for Open Source Collective or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts for more information.
	FiscalHostLogin *string "json:\"fiscalHostLogin\""
	// The URL for your profile page on the fiscal host's website, e.g., https://opencollective.com/babel or https://numfocus.org/project/bokeh. Required if fiscalHostLogin is specified.
	FiscallyHostedProjectProfileURL *string "json:\"fiscallyHostedProjectProfileUrl\""
	// The country or region where the sponsorable's bank account is located. Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified.
	BillingCountryOrRegionCode *SponsorsCountryOrRegionCode "json:\"billingCountryOrRegionCode\""
	// The country or region where the sponsorable resides. This is for tax purposes. Required if the sponsorable is yourself, ignored when sponsorableLogin specifies an organization.
	ResidenceCountryOrRegionCode *SponsorsCountryOrRegionCode "json:\"residenceCountryOrRegionCode\""
	// The email address we should use to contact you about the GitHub Sponsors profile being created. This will not be shared publicly. Must be a verified email address already on your GitHub account. Only relevant when the sponsorable is yourself. Defaults to your primary email address on file if omitted.
	ContactEmail *string "json:\"contactEmail\""
	// Provide an introduction to serve as the main focus that appears on your GitHub Sponsors profile. It's a great opportunity to help potential sponsors learn more about you, your work, and why their sponsorship is important to you. GitHub-flavored Markdown is supported.
	FullDescription *string "json:\"fullDescription\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateSponsorsListingInput implements the Input interface.
var _ Input = (*CreateSponsorsListingInput)(nil)

// isInput implements the Input interface.
func (CreateSponsorsListingInput) isInput() {}

// CreateSponsorsTierInput is an autogenerated input type of CreateSponsorsTier.
type CreateSponsorsTierInput struct {
	// The ID of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableLogin is not given.
	SponsorableID *ID "json:\"sponsorableId\""
	// The username of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableId is not given.
	SponsorableLogin *string "json:\"sponsorableLogin\""
	// The value of the new tier in US dollars. Valid values: 1-12000.
	Amount int "json:\"amount\""
	// Whether sponsorships using this tier should happen monthly/yearly or just once.
	IsRecurring *bool "json:\"isRecurring\""
	// Optional ID of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization.
	RepositoryID *ID "json:\"repositoryId\""
	// Optional login of the organization owner of the private repository that sponsors at this tier should gain read-only access to. Necessary if repositoryName is given. Will be ignored if repositoryId is given.
	RepositoryOwnerLogin *string "json:\"repositoryOwnerLogin\""
	// Optional name of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. Necessary if repositoryOwnerLogin is given. Will be ignored if repositoryId is given.
	RepositoryName *string "json:\"repositoryName\""
	// Optional message new sponsors at this tier will receive.
	WelcomeMessage *string "json:\"welcomeMessage\""
	// A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc.
	Description string "json:\"description\""
	// Whether to make the tier available immediately for sponsors to choose. Defaults to creating a draft tier that will not be publicly visible.
	Publish *bool "json:\"publish\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateSponsorsTierInput implements the Input interface.
var _ Input = (*CreateSponsorsTierInput)(nil)

// isInput implements the Input interface.
func (CreateSponsorsTierInput) isInput() {}

// CreateSponsorshipInput is an autogenerated input type of CreateSponsorship.
type CreateSponsorshipInput struct {
	// The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
	SponsorID *ID "json:\"sponsorId\""
	// The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
	SponsorLogin *string "json:\"sponsorLogin\""
	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
	SponsorableID *ID "json:\"sponsorableId\""
	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
	SponsorableLogin *string "json:\"sponsorableLogin\""
	// The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified.
	TierID *ID "json:\"tierId\""
	// The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000.
	Amount *int "json:\"amount\""
	// Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified.
	IsRecurring *bool "json:\"isRecurring\""
	// Whether the sponsor should receive email updates from the sponsorable.
	ReceiveEmails *bool "json:\"receiveEmails\""
	// Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used.
	PrivacyLevel *SponsorshipPrivacy "json:\"privacyLevel\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateSponsorshipInput implements the Input interface.
var _ Input = (*CreateSponsorshipInput)(nil)

// isInput implements the Input interface.
func (CreateSponsorshipInput) isInput() {}

// CreateSponsorshipsInput is an autogenerated input type of CreateSponsorships.
type CreateSponsorshipsInput struct {
	// The username of the user or organization who is acting as the sponsor, paying for the sponsorships.
	SponsorLogin string "json:\"sponsorLogin\""
	// The list of maintainers to sponsor and for how much apiece.
	Sponsorships []BulkSponsorship "json:\"sponsorships\""
	// Whether the sponsor should receive email updates from the sponsorables.
	ReceiveEmails *bool "json:\"receiveEmails\""
	// Specify whether others should be able to see that the sponsor is sponsoring the sponsorables. Public visibility still does not reveal the dollar value of the sponsorship.
	PrivacyLevel *SponsorshipPrivacy "json:\"privacyLevel\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateSponsorshipsInput implements the Input interface.
var _ Input = (*CreateSponsorshipsInput)(nil)

// isInput implements the Input interface.
func (CreateSponsorshipsInput) isInput() {}

// CreateTeamDiscussionCommentInput is an autogenerated input type of CreateTeamDiscussionComment.
type CreateTeamDiscussionCommentInput struct {
	// The ID of the discussion to which the comment belongs.
	DiscussionID ID "json:\"discussionId\""
	// The content of the comment.
	Body string "json:\"body\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateTeamDiscussionCommentInput implements the Input interface.
var _ Input = (*CreateTeamDiscussionCommentInput)(nil)

// isInput implements the Input interface.
func (CreateTeamDiscussionCommentInput) isInput() {}

// CreateTeamDiscussionInput is an autogenerated input type of CreateTeamDiscussion.
type CreateTeamDiscussionInput struct {
	// The ID of the team to which the discussion belongs.
	TeamID ID "json:\"teamId\""
	// The title of the discussion.
	Title string "json:\"title\""
	// The content of the discussion.
	Body string "json:\"body\""
	// If true, restricts the visibility of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion.
	Private *bool "json:\"private\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that CreateTeamDiscussionInput implements the Input interface.
var _ Input = (*CreateTeamDiscussionInput)(nil)

// isInput implements the Input interface.
func (CreateTeamDiscussionInput) isInput() {}

// DeclineTopicSuggestionInput is an autogenerated input type of DeclineTopicSuggestion.
type DeclineTopicSuggestionInput struct {
	// The Node ID of the repository.
	RepositoryID ID "json:\"repositoryId\""
	// The name of the suggested topic.
	Name string "json:\"name\""
	// The reason why the suggested topic is declined.
	Reason TopicSuggestionDeclineReason "json:\"reason\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeclineTopicSuggestionInput implements the Input interface.
var _ Input = (*DeclineTopicSuggestionInput)(nil)

// isInput implements the Input interface.
func (DeclineTopicSuggestionInput) isInput() {}

// DefaultRepositoryPermissionField represents the possible base permissions for repositories.
type DefaultRepositoryPermissionField string

const (
	// DefaultRepositoryPermissionFieldNone. No access.
	DefaultRepositoryPermissionFieldNone DefaultRepositoryPermissionField = "NONE"
	// DefaultRepositoryPermissionFieldRead. Can read repos by default.
	DefaultRepositoryPermissionFieldRead DefaultRepositoryPermissionField = "READ"
	// DefaultRepositoryPermissionFieldWrite. Can read and write repos by default.
	DefaultRepositoryPermissionFieldWrite DefaultRepositoryPermissionField = "WRITE"
	// DefaultRepositoryPermissionFieldAdmin. Can read, write, and administrate repos by default.
	DefaultRepositoryPermissionFieldAdmin DefaultRepositoryPermissionField = "ADMIN"
)

// DeleteBranchProtectionRuleInput is an autogenerated input type of DeleteBranchProtectionRule.
type DeleteBranchProtectionRuleInput struct {
	// The global relay id of the branch protection rule to be deleted.
	BranchProtectionRuleID ID "json:\"branchProtectionRuleId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteBranchProtectionRuleInput implements the Input interface.
var _ Input = (*DeleteBranchProtectionRuleInput)(nil)

// isInput implements the Input interface.
func (DeleteBranchProtectionRuleInput) isInput() {}

// DeleteDeploymentInput is an autogenerated input type of DeleteDeployment.
type DeleteDeploymentInput struct {
	// The Node ID of the deployment to be deleted.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteDeploymentInput implements the Input interface.
var _ Input = (*DeleteDeploymentInput)(nil)

// isInput implements the Input interface.
func (DeleteDeploymentInput) isInput() {}

// DeleteDiscussionCommentInput is an autogenerated input type of DeleteDiscussionComment.
type DeleteDiscussionCommentInput struct {
	// The Node id of the discussion comment to delete.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteDiscussionCommentInput implements the Input interface.
var _ Input = (*DeleteDiscussionCommentInput)(nil)

// isInput implements the Input interface.
func (DeleteDiscussionCommentInput) isInput() {}

// DeleteDiscussionInput is an autogenerated input type of DeleteDiscussion.
type DeleteDiscussionInput struct {
	// The id of the discussion to delete.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteDiscussionInput implements the Input interface.
var _ Input = (*DeleteDiscussionInput)(nil)

// isInput implements the Input interface.
func (DeleteDiscussionInput) isInput() {}

// DeleteEnvironmentInput is an autogenerated input type of DeleteEnvironment.
type DeleteEnvironmentInput struct {
	// The Node ID of the environment to be deleted.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteEnvironmentInput implements the Input interface.
var _ Input = (*DeleteEnvironmentInput)(nil)

// isInput implements the Input interface.
func (DeleteEnvironmentInput) isInput() {}

// DeleteIPAllowListEntryInput is an autogenerated input type of DeleteIpAllowListEntry.
type DeleteIPAllowListEntryInput struct {
	// The ID of the IP allow list entry to delete.
	IPAllowListEntryID ID "json:\"ipAllowListEntryId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteIPAllowListEntryInput implements the Input interface.
var _ Input = (*DeleteIPAllowListEntryInput)(nil)

// isInput implements the Input interface.
func (DeleteIPAllowListEntryInput) isInput() {}

// DeleteIssueCommentInput is an autogenerated input type of DeleteIssueComment.
type DeleteIssueCommentInput struct {
	// The ID of the comment to delete.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteIssueCommentInput implements the Input interface.
var _ Input = (*DeleteIssueCommentInput)(nil)

// isInput implements the Input interface.
func (DeleteIssueCommentInput) isInput() {}

// DeleteIssueInput is an autogenerated input type of DeleteIssue.
type DeleteIssueInput struct {
	// The ID of the issue to delete.
	IssueID ID "json:\"issueId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteIssueInput implements the Input interface.
var _ Input = (*DeleteIssueInput)(nil)

// isInput implements the Input interface.
func (DeleteIssueInput) isInput() {}

// DeleteLinkedBranchInput is an autogenerated input type of DeleteLinkedBranch.
type DeleteLinkedBranchInput struct {
	// The ID of the linked branch.
	LinkedBranchID ID "json:\"linkedBranchId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteLinkedBranchInput implements the Input interface.
var _ Input = (*DeleteLinkedBranchInput)(nil)

// isInput implements the Input interface.
func (DeleteLinkedBranchInput) isInput() {}

// DeleteProjectCardInput is an autogenerated input type of DeleteProjectCard.
type DeleteProjectCardInput struct {
	// The id of the card to delete.
	CardID ID "json:\"cardId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteProjectCardInput implements the Input interface.
var _ Input = (*DeleteProjectCardInput)(nil)

// isInput implements the Input interface.
func (DeleteProjectCardInput) isInput() {}

// DeleteProjectColumnInput is an autogenerated input type of DeleteProjectColumn.
type DeleteProjectColumnInput struct {
	// The id of the column to delete.
	ColumnID ID "json:\"columnId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteProjectColumnInput implements the Input interface.
var _ Input = (*DeleteProjectColumnInput)(nil)

// isInput implements the Input interface.
func (DeleteProjectColumnInput) isInput() {}

// DeleteProjectInput is an autogenerated input type of DeleteProject.
type DeleteProjectInput struct {
	// The Project ID to update.
	ProjectID ID "json:\"projectId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteProjectInput implements the Input interface.
var _ Input = (*DeleteProjectInput)(nil)

// isInput implements the Input interface.
func (DeleteProjectInput) isInput() {}

// DeleteProjectV2FieldInput is an autogenerated input type of DeleteProjectV2Field.
type DeleteProjectV2FieldInput struct {
	// The ID of the field to delete.
	FieldID ID "json:\"fieldId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteProjectV2FieldInput implements the Input interface.
var _ Input = (*DeleteProjectV2FieldInput)(nil)

// isInput implements the Input interface.
func (DeleteProjectV2FieldInput) isInput() {}

// DeleteProjectV2Input is an autogenerated input type of DeleteProjectV2.
type DeleteProjectV2Input struct {
	// The ID of the Project to delete.
	ProjectID ID "json:\"projectId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteProjectV2Input implements the Input interface.
var _ Input = (*DeleteProjectV2Input)(nil)

// isInput implements the Input interface.
func (DeleteProjectV2Input) isInput() {}

// DeleteProjectV2ItemInput is an autogenerated input type of DeleteProjectV2Item.
type DeleteProjectV2ItemInput struct {
	// The ID of the Project from which the item should be removed.
	ProjectID ID "json:\"projectId\""
	// The ID of the item to be removed.
	ItemID ID "json:\"itemId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteProjectV2ItemInput implements the Input interface.
var _ Input = (*DeleteProjectV2ItemInput)(nil)

// isInput implements the Input interface.
func (DeleteProjectV2ItemInput) isInput() {}

// DeleteProjectV2WorkflowInput is an autogenerated input type of DeleteProjectV2Workflow.
type DeleteProjectV2WorkflowInput struct {
	// The ID of the workflow to be removed.
	WorkflowID ID "json:\"workflowId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteProjectV2WorkflowInput implements the Input interface.
var _ Input = (*DeleteProjectV2WorkflowInput)(nil)

// isInput implements the Input interface.
func (DeleteProjectV2WorkflowInput) isInput() {}

// DeletePullRequestReviewCommentInput is an autogenerated input type of DeletePullRequestReviewComment.
type DeletePullRequestReviewCommentInput struct {
	// The ID of the comment to delete.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeletePullRequestReviewCommentInput implements the Input interface.
var _ Input = (*DeletePullRequestReviewCommentInput)(nil)

// isInput implements the Input interface.
func (DeletePullRequestReviewCommentInput) isInput() {}

// DeletePullRequestReviewInput is an autogenerated input type of DeletePullRequestReview.
type DeletePullRequestReviewInput struct {
	// The Node ID of the pull request review to delete.
	PullRequestReviewID ID "json:\"pullRequestReviewId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeletePullRequestReviewInput implements the Input interface.
var _ Input = (*DeletePullRequestReviewInput)(nil)

// isInput implements the Input interface.
func (DeletePullRequestReviewInput) isInput() {}

// DeleteRefInput is an autogenerated input type of DeleteRef.
type DeleteRefInput struct {
	// The Node ID of the Ref to be deleted.
	RefID ID "json:\"refId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteRefInput implements the Input interface.
var _ Input = (*DeleteRefInput)(nil)

// isInput implements the Input interface.
func (DeleteRefInput) isInput() {}

// DeleteRepositoryRulesetInput is an autogenerated input type of DeleteRepositoryRuleset.
type DeleteRepositoryRulesetInput struct {
	// The global relay id of the repository ruleset to be deleted.
	RepositoryRulesetID ID "json:\"repositoryRulesetId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteRepositoryRulesetInput implements the Input interface.
var _ Input = (*DeleteRepositoryRulesetInput)(nil)

// isInput implements the Input interface.
func (DeleteRepositoryRulesetInput) isInput() {}

// DeleteTeamDiscussionCommentInput is an autogenerated input type of DeleteTeamDiscussionComment.
type DeleteTeamDiscussionCommentInput struct {
	// The ID of the comment to delete.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteTeamDiscussionCommentInput implements the Input interface.
var _ Input = (*DeleteTeamDiscussionCommentInput)(nil)

// isInput implements the Input interface.
func (DeleteTeamDiscussionCommentInput) isInput() {}

// DeleteTeamDiscussionInput is an autogenerated input type of DeleteTeamDiscussion.
type DeleteTeamDiscussionInput struct {
	// The discussion ID to delete.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteTeamDiscussionInput implements the Input interface.
var _ Input = (*DeleteTeamDiscussionInput)(nil)

// isInput implements the Input interface.
func (DeleteTeamDiscussionInput) isInput() {}

// DeleteVerifiableDomainInput is an autogenerated input type of DeleteVerifiableDomain.
type DeleteVerifiableDomainInput struct {
	// The ID of the verifiable domain to delete.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DeleteVerifiableDomainInput implements the Input interface.
var _ Input = (*DeleteVerifiableDomainInput)(nil)

// isInput implements the Input interface.
func (DeleteVerifiableDomainInput) isInput() {}

// DependencyGraphEcosystem represents the possible ecosystems of a dependency graph package.
type DependencyGraphEcosystem string

const (
	// DependencyGraphEcosystemRubygems. Ruby gems hosted at RubyGems.org.
	DependencyGraphEcosystemRubygems DependencyGraphEcosystem = "RUBYGEMS"
	// DependencyGraphEcosystemNpm. JavaScript packages hosted at npmjs.com.
	DependencyGraphEcosystemNpm DependencyGraphEcosystem = "NPM"
	// DependencyGraphEcosystemPip. Python packages hosted at PyPI.org.
	DependencyGraphEcosystemPip DependencyGraphEcosystem = "PIP"
	// DependencyGraphEcosystemMaven. Java artifacts hosted at the Maven central repository.
	DependencyGraphEcosystemMaven DependencyGraphEcosystem = "MAVEN"
	// DependencyGraphEcosystemNuget. .NET packages hosted at the NuGet Gallery.
	DependencyGraphEcosystemNuget DependencyGraphEcosystem = "NUGET"
	// DependencyGraphEcosystemComposer. PHP packages hosted at packagist.org.
	DependencyGraphEcosystemComposer DependencyGraphEcosystem = "COMPOSER"
	// DependencyGraphEcosystemGo. Go modules.
	DependencyGraphEcosystemGo DependencyGraphEcosystem = "GO"
	// DependencyGraphEcosystemActions. GitHub Actions.
	DependencyGraphEcosystemActions DependencyGraphEcosystem = "ACTIONS"
	// DependencyGraphEcosystemRust. Rust crates.
	DependencyGraphEcosystemRust DependencyGraphEcosystem = "RUST"
	// DependencyGraphEcosystemPub. Dart packages hosted at pub.dev.
	DependencyGraphEcosystemPub DependencyGraphEcosystem = "PUB"
)

// DeploymentOrder represents ordering options for deployment connections.
type DeploymentOrder struct {
	// The field to order deployments by.
	Field DeploymentOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that DeploymentOrder implements the Input interface.
var _ Input = (*DeploymentOrder)(nil)

// isInput implements the Input interface.
func (DeploymentOrder) isInput() {}

// DeploymentOrderField represents properties by which deployment connections can be ordered.
type DeploymentOrderField string

const (
	// DeploymentOrderFieldCreatedAt. Order collection by creation time.
	DeploymentOrderFieldCreatedAt DeploymentOrderField = "CREATED_AT"
)

// DeploymentProtectionRuleType represents the possible protection rule types.
type DeploymentProtectionRuleType string

const (
	// DeploymentProtectionRuleTypeRequiredReviewers. Required reviewers.
	DeploymentProtectionRuleTypeRequiredReviewers DeploymentProtectionRuleType = "REQUIRED_REVIEWERS"
	// DeploymentProtectionRuleTypeWaitTimer. Wait timer.
	DeploymentProtectionRuleTypeWaitTimer DeploymentProtectionRuleType = "WAIT_TIMER"
)

// DeploymentReviewState represents the possible states for a deployment review.
type DeploymentReviewState string

const (
	// DeploymentReviewStateApproved. The deployment was approved.
	DeploymentReviewStateApproved DeploymentReviewState = "APPROVED"
	// DeploymentReviewStateRejected. The deployment was rejected.
	DeploymentReviewStateRejected DeploymentReviewState = "REJECTED"
)

// DeploymentState represents the possible states in which a deployment can be.
type DeploymentState string

const (
	// DeploymentStateAbandoned. The pending deployment was not updated after 30 minutes.
	DeploymentStateAbandoned DeploymentState = "ABANDONED"
	// DeploymentStateActive. The deployment is currently active.
	DeploymentStateActive DeploymentState = "ACTIVE"
	// DeploymentStateDestroyed. An inactive transient deployment.
	DeploymentStateDestroyed DeploymentState = "DESTROYED"
	// DeploymentStateError. The deployment experienced an error.
	DeploymentStateError DeploymentState = "ERROR"
	// DeploymentStateFailure. The deployment has failed.
	DeploymentStateFailure DeploymentState = "FAILURE"
	// DeploymentStateInactive. The deployment is inactive.
	DeploymentStateInactive DeploymentState = "INACTIVE"
	// DeploymentStatePending. The deployment is pending.
	DeploymentStatePending DeploymentState = "PENDING"
	// DeploymentStateSuccess. The deployment was successful.
	DeploymentStateSuccess DeploymentState = "SUCCESS"
	// DeploymentStateQueued. The deployment has queued.
	DeploymentStateQueued DeploymentState = "QUEUED"
	// DeploymentStateInProgress. The deployment is in progress.
	DeploymentStateInProgress DeploymentState = "IN_PROGRESS"
	// DeploymentStateWaiting. The deployment is waiting.
	DeploymentStateWaiting DeploymentState = "WAITING"
)

// DeploymentStatusState represents the possible states for a deployment status.
type DeploymentStatusState string

const (
	// DeploymentStatusStatePending. The deployment is pending.
	DeploymentStatusStatePending DeploymentStatusState = "PENDING"
	// DeploymentStatusStateSuccess. The deployment was successful.
	DeploymentStatusStateSuccess DeploymentStatusState = "SUCCESS"
	// DeploymentStatusStateFailure. The deployment has failed.
	DeploymentStatusStateFailure DeploymentStatusState = "FAILURE"
	// DeploymentStatusStateInactive. The deployment is inactive.
	DeploymentStatusStateInactive DeploymentStatusState = "INACTIVE"
	// DeploymentStatusStateError. The deployment experienced an error.
	DeploymentStatusStateError DeploymentStatusState = "ERROR"
	// DeploymentStatusStateQueued. The deployment is queued.
	DeploymentStatusStateQueued DeploymentStatusState = "QUEUED"
	// DeploymentStatusStateInProgress. The deployment is in progress.
	DeploymentStatusStateInProgress DeploymentStatusState = "IN_PROGRESS"
	// DeploymentStatusStateWaiting. The deployment is waiting.
	DeploymentStatusStateWaiting DeploymentStatusState = "WAITING"
)

// DequeuePullRequestInput is an autogenerated input type of DequeuePullRequest.
type DequeuePullRequestInput struct {
	// The ID of the pull request to be dequeued.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DequeuePullRequestInput implements the Input interface.
var _ Input = (*DequeuePullRequestInput)(nil)

// isInput implements the Input interface.
func (DequeuePullRequestInput) isInput() {}

// DiffSide represents the possible sides of a diff.
type DiffSide string

const (
	// DiffSideLeft. The left side of the diff.
	DiffSideLeft DiffSide = "LEFT"
	// DiffSideRight. The right side of the diff.
	DiffSideRight DiffSide = "RIGHT"
)

// DisablePullRequestAutoMergeInput is an autogenerated input type of DisablePullRequestAutoMerge.
type DisablePullRequestAutoMergeInput struct {
	// ID of the pull request to disable auto merge on.
	PullRequestID ID "json:\"pullRequestId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DisablePullRequestAutoMergeInput implements the Input interface.
var _ Input = (*DisablePullRequestAutoMergeInput)(nil)

// isInput implements the Input interface.
func (DisablePullRequestAutoMergeInput) isInput() {}

// DiscussionCloseReason represents the possible reasons for closing a discussion.
type DiscussionCloseReason string

const (
	// DiscussionCloseReasonResolved. The discussion has been resolved.
	DiscussionCloseReasonResolved DiscussionCloseReason = "RESOLVED"
	// DiscussionCloseReasonOutdated. The discussion is no longer relevant.
	DiscussionCloseReasonOutdated DiscussionCloseReason = "OUTDATED"
	// DiscussionCloseReasonDuplicate. The discussion is a duplicate of another.
	DiscussionCloseReasonDuplicate DiscussionCloseReason = "DUPLICATE"
)

// DiscussionOrder represents ways in which lists of discussions can be ordered upon return.
type DiscussionOrder struct {
	// The field by which to order discussions.
	Field DiscussionOrderField "json:\"field\""
	// The direction in which to order discussions by the specified field.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that DiscussionOrder implements the Input interface.
var _ Input = (*DiscussionOrder)(nil)

// isInput implements the Input interface.
func (DiscussionOrder) isInput() {}

// DiscussionOrderField represents properties by which discussion connections can be ordered.
type DiscussionOrderField string

const (
	// DiscussionOrderFieldCreatedAt. Order discussions by creation time.
	DiscussionOrderFieldCreatedAt DiscussionOrderField = "CREATED_AT"
	// DiscussionOrderFieldUpdatedAt. Order discussions by most recent modification time.
	DiscussionOrderFieldUpdatedAt DiscussionOrderField = "UPDATED_AT"
)

// DiscussionPollOptionOrder represents ordering options for discussion poll option connections.
type DiscussionPollOptionOrder struct {
	// The field to order poll options by.
	Field DiscussionPollOptionOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that DiscussionPollOptionOrder implements the Input interface.
var _ Input = (*DiscussionPollOptionOrder)(nil)

// isInput implements the Input interface.
func (DiscussionPollOptionOrder) isInput() {}

// DiscussionPollOptionOrderField represents properties by which discussion poll option connections can be ordered.
type DiscussionPollOptionOrderField string

const (
	// DiscussionPollOptionOrderFieldAuthoredOrder. Order poll options by the order that the poll author specified when creating the poll.
	DiscussionPollOptionOrderFieldAuthoredOrder DiscussionPollOptionOrderField = "AUTHORED_ORDER"
	// DiscussionPollOptionOrderFieldVoteCount. Order poll options by the number of votes it has.
	DiscussionPollOptionOrderFieldVoteCount DiscussionPollOptionOrderField = "VOTE_COUNT"
)

// DiscussionState represents the possible states of a discussion.
type DiscussionState string

const (
	// DiscussionStateOpen. A discussion that is open.
	DiscussionStateOpen DiscussionState = "OPEN"
	// DiscussionStateClosed. A discussion that has been closed.
	DiscussionStateClosed DiscussionState = "CLOSED"
)

// DiscussionStateReason represents the possible state reasons of a discussion.
type DiscussionStateReason string

const (
	// DiscussionStateReasonResolved. The discussion has been resolved.
	DiscussionStateReasonResolved DiscussionStateReason = "RESOLVED"
	// DiscussionStateReasonOutdated. The discussion is no longer relevant.
	DiscussionStateReasonOutdated DiscussionStateReason = "OUTDATED"
	// DiscussionStateReasonDuplicate. The discussion is a duplicate of another.
	DiscussionStateReasonDuplicate DiscussionStateReason = "DUPLICATE"
	// DiscussionStateReasonReopened. The discussion was reopened.
	DiscussionStateReasonReopened DiscussionStateReason = "REOPENED"
)

// DismissPullRequestReviewInput is an autogenerated input type of DismissPullRequestReview.
type DismissPullRequestReviewInput struct {
	// The Node ID of the pull request review to modify.
	PullRequestReviewID ID "json:\"pullRequestReviewId\""
	// The contents of the pull request review dismissal message.
	Message string "json:\"message\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DismissPullRequestReviewInput implements the Input interface.
var _ Input = (*DismissPullRequestReviewInput)(nil)

// isInput implements the Input interface.
func (DismissPullRequestReviewInput) isInput() {}

// DismissReason represents the possible reasons that a Dependabot alert was dismissed.
type DismissReason string

const (
	// DismissReasonFixStarted. A fix has already been started.
	DismissReasonFixStarted DismissReason = "FIX_STARTED"
	// DismissReasonNoBandwidth. No bandwidth to fix this.
	DismissReasonNoBandwidth DismissReason = "NO_BANDWIDTH"
	// DismissReasonTolerableRisk. Risk is tolerable to this project.
	DismissReasonTolerableRisk DismissReason = "TOLERABLE_RISK"
	// DismissReasonInaccurate. This alert is inaccurate or incorrect.
	DismissReasonInaccurate DismissReason = "INACCURATE"
	// DismissReasonNotUsed. Vulnerable code is not actually used.
	DismissReasonNotUsed DismissReason = "NOT_USED"
)

// DismissRepositoryVulnerabilityAlertInput is an autogenerated input type of DismissRepositoryVulnerabilityAlert.
type DismissRepositoryVulnerabilityAlertInput struct {
	// The Dependabot alert ID to dismiss.
	RepositoryVulnerabilityAlertID ID "json:\"repositoryVulnerabilityAlertId\""
	// The reason the Dependabot alert is being dismissed.
	DismissReason DismissReason "json:\"dismissReason\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that DismissRepositoryVulnerabilityAlertInput implements the Input interface.
var _ Input = (*DismissRepositoryVulnerabilityAlertInput)(nil)

// isInput implements the Input interface.
func (DismissRepositoryVulnerabilityAlertInput) isInput() {}

// DraftPullRequestReviewComment represents specifies a review comment to be left with a Pull Request Review.
type DraftPullRequestReviewComment struct {
	// Path to the file being commented on.
	Path string "json:\"path\""
	// Position in the file to leave a comment on.
	Position int "json:\"position\""
	// Body of the comment to leave.
	Body string "json:\"body\""
}

// Compile-time assertion that DraftPullRequestReviewComment implements the Input interface.
var _ Input = (*DraftPullRequestReviewComment)(nil)

// isInput implements the Input interface.
func (DraftPullRequestReviewComment) isInput() {}

// DraftPullRequestReviewThread represents specifies a review comment thread to be left with a Pull Request Review.
type DraftPullRequestReviewThread struct {
	// Path to the file being commented on.
	Path string "json:\"path\""
	// The line of the blob to which the thread refers. The end of the line range for multi-line comments.
	Line int "json:\"line\""
	// The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
	Side *DiffSide "json:\"side\""
	// The first line of the range to which the comment refers.
	StartLine *int "json:\"startLine\""
	// The side of the diff on which the start line resides.
	StartSide *DiffSide "json:\"startSide\""
	// Body of the comment to leave.
	Body string "json:\"body\""
}

// Compile-time assertion that DraftPullRequestReviewThread implements the Input interface.
var _ Input = (*DraftPullRequestReviewThread)(nil)

// isInput implements the Input interface.
func (DraftPullRequestReviewThread) isInput() {}

// EnablePullRequestAutoMergeInput is an autogenerated input type of EnablePullRequestAutoMerge.
type EnablePullRequestAutoMergeInput struct {
	// ID of the pull request to enable auto-merge on.
	PullRequestID ID "json:\"pullRequestId\""
	// Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit headline is ignored.
	CommitHeadline *string "json:\"commitHeadline\""
	// Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit message is ignored.
	CommitBody *string "json:\"commitBody\""
	// The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging with a merge queue any input value for merge method is ignored.
	MergeMethod *PullRequestMergeMethod "json:\"mergeMethod\""
	// The email address to associate with this merge.
	AuthorEmail *string "json:\"authorEmail\""
	// The expected head OID of the pull request.
	ExpectedHeadOid *GitObjectID "json:\"expectedHeadOid\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that EnablePullRequestAutoMergeInput implements the Input interface.
var _ Input = (*EnablePullRequestAutoMergeInput)(nil)

// isInput implements the Input interface.
func (EnablePullRequestAutoMergeInput) isInput() {}

// EnqueuePullRequestInput is an autogenerated input type of EnqueuePullRequest.
type EnqueuePullRequestInput struct {
	// The ID of the pull request to enqueue.
	PullRequestID ID "json:\"pullRequestId\""
	// Add the pull request to the front of the queue.
	Jump *bool "json:\"jump\""
	// The expected head OID of the pull request.
	ExpectedHeadOid *GitObjectID "json:\"expectedHeadOid\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that EnqueuePullRequestInput implements the Input interface.
var _ Input = (*EnqueuePullRequestInput)(nil)

// isInput implements the Input interface.
func (EnqueuePullRequestInput) isInput() {}

// EnterpriseAdministratorInvitationOrder represents ordering options for enterprise administrator invitation connections.
type EnterpriseAdministratorInvitationOrder struct {
	// The field to order enterprise administrator invitations by.
	Field EnterpriseAdministratorInvitationOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that EnterpriseAdministratorInvitationOrder implements the Input interface.
var _ Input = (*EnterpriseAdministratorInvitationOrder)(nil)

// isInput implements the Input interface.
func (EnterpriseAdministratorInvitationOrder) isInput() {}

// EnterpriseAdministratorInvitationOrderField represents properties by which enterprise administrator invitation connections can be ordered.
type EnterpriseAdministratorInvitationOrderField string

const (
	// EnterpriseAdministratorInvitationOrderFieldCreatedAt. Order enterprise administrator member invitations by creation time.
	EnterpriseAdministratorInvitationOrderFieldCreatedAt EnterpriseAdministratorInvitationOrderField = "CREATED_AT"
)

// EnterpriseAdministratorRole represents the possible administrator roles in an enterprise account.
type EnterpriseAdministratorRole string

const (
	// EnterpriseAdministratorRoleOwner. Represents an owner of the enterprise account.
	EnterpriseAdministratorRoleOwner EnterpriseAdministratorRole = "OWNER"
	// EnterpriseAdministratorRoleBillingManager. Represents a billing manager of the enterprise account.
	EnterpriseAdministratorRoleBillingManager EnterpriseAdministratorRole = "BILLING_MANAGER"
)

// EnterpriseAllowPrivateRepositoryForkingPolicyValue represents the possible values for the enterprise allow private repository forking policy value.
type EnterpriseAllowPrivateRepositoryForkingPolicyValue string

const (
	// EnterpriseAllowPrivateRepositoryForkingPolicyValueEnterpriseOrganizations. Members can fork a repository to an organization within this enterprise.
	EnterpriseAllowPrivateRepositoryForkingPolicyValueEnterpriseOrganizations EnterpriseAllowPrivateRepositoryForkingPolicyValue = "ENTERPRISE_ORGANIZATIONS"
	// EnterpriseAllowPrivateRepositoryForkingPolicyValueSameOrganization. Members can fork a repository only within the same organization (intra-org).
	EnterpriseAllowPrivateRepositoryForkingPolicyValueSameOrganization EnterpriseAllowPrivateRepositoryForkingPolicyValue = "SAME_ORGANIZATION"
	// EnterpriseAllowPrivateRepositoryForkingPolicyValueSameOrganizationUserAccounts. Members can fork a repository to their user account or within the same organization.
	EnterpriseAllowPrivateRepositoryForkingPolicyValueSameOrganizationUserAccounts EnterpriseAllowPrivateRepositoryForkingPolicyValue = "SAME_ORGANIZATION_USER_ACCOUNTS"
	// EnterpriseAllowPrivateRepositoryForkingPolicyValueEnterpriseOrganizationsUserAccounts. Members can fork a repository to their enterprise-managed user account or an organization inside this enterprise.
	EnterpriseAllowPrivateRepositoryForkingPolicyValueEnterpriseOrganizationsUserAccounts EnterpriseAllowPrivateRepositoryForkingPolicyValue = "ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS"
	// EnterpriseAllowPrivateRepositoryForkingPolicyValueUserAccounts. Members can fork a repository to their user account.
	EnterpriseAllowPrivateRepositoryForkingPolicyValueUserAccounts EnterpriseAllowPrivateRepositoryForkingPolicyValue = "USER_ACCOUNTS"
	// EnterpriseAllowPrivateRepositoryForkingPolicyValueEverywhere. Members can fork a repository to their user account or an organization, either inside or outside of this enterprise.
	EnterpriseAllowPrivateRepositoryForkingPolicyValueEverywhere EnterpriseAllowPrivateRepositoryForkingPolicyValue = "EVERYWHERE"
)

// EnterpriseDefaultRepositoryPermissionSettingValue represents the possible values for the enterprise base repository permission setting.
type EnterpriseDefaultRepositoryPermissionSettingValue string

const (
	// EnterpriseDefaultRepositoryPermissionSettingValueNoPolicy. Organizations in the enterprise choose base repository permissions for their members.
	EnterpriseDefaultRepositoryPermissionSettingValueNoPolicy EnterpriseDefaultRepositoryPermissionSettingValue = "NO_POLICY"
	// EnterpriseDefaultRepositoryPermissionSettingValueAdmin. Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
	EnterpriseDefaultRepositoryPermissionSettingValueAdmin EnterpriseDefaultRepositoryPermissionSettingValue = "ADMIN"
	// EnterpriseDefaultRepositoryPermissionSettingValueWrite. Organization members will be able to clone, pull, and push all organization repositories.
	EnterpriseDefaultRepositoryPermissionSettingValueWrite EnterpriseDefaultRepositoryPermissionSettingValue = "WRITE"
	// EnterpriseDefaultRepositoryPermissionSettingValueRead. Organization members will be able to clone and pull all organization repositories.
	EnterpriseDefaultRepositoryPermissionSettingValueRead EnterpriseDefaultRepositoryPermissionSettingValue = "READ"
	// EnterpriseDefaultRepositoryPermissionSettingValueNone. Organization members will only be able to clone and pull public repositories.
	EnterpriseDefaultRepositoryPermissionSettingValueNone EnterpriseDefaultRepositoryPermissionSettingValue = "NONE"
)

// EnterpriseEnabledDisabledSettingValue represents the possible values for an enabled/disabled enterprise setting.
type EnterpriseEnabledDisabledSettingValue string

const (
	// EnterpriseEnabledDisabledSettingValueEnabled. The setting is enabled for organizations in the enterprise.
	EnterpriseEnabledDisabledSettingValueEnabled EnterpriseEnabledDisabledSettingValue = "ENABLED"
	// EnterpriseEnabledDisabledSettingValueDisabled. The setting is disabled for organizations in the enterprise.
	EnterpriseEnabledDisabledSettingValueDisabled EnterpriseEnabledDisabledSettingValue = "DISABLED"
	// EnterpriseEnabledDisabledSettingValueNoPolicy. There is no policy set for organizations in the enterprise.
	EnterpriseEnabledDisabledSettingValueNoPolicy EnterpriseEnabledDisabledSettingValue = "NO_POLICY"
)

// EnterpriseEnabledSettingValue represents the possible values for an enabled/no policy enterprise setting.
type EnterpriseEnabledSettingValue string

const (
	// EnterpriseEnabledSettingValueEnabled. The setting is enabled for organizations in the enterprise.
	EnterpriseEnabledSettingValueEnabled EnterpriseEnabledSettingValue = "ENABLED"
	// EnterpriseEnabledSettingValueNoPolicy. There is no policy set for organizations in the enterprise.
	EnterpriseEnabledSettingValueNoPolicy EnterpriseEnabledSettingValue = "NO_POLICY"
)

// EnterpriseMemberOrder represents ordering options for enterprise member connections.
type EnterpriseMemberOrder struct {
	// The field to order enterprise members by.
	Field EnterpriseMemberOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that EnterpriseMemberOrder implements the Input interface.
var _ Input = (*EnterpriseMemberOrder)(nil)

// isInput implements the Input interface.
func (EnterpriseMemberOrder) isInput() {}

// EnterpriseMemberOrderField represents properties by which enterprise member connections can be ordered.
type EnterpriseMemberOrderField string

const (
	// EnterpriseMemberOrderFieldLogin. Order enterprise members by login.
	EnterpriseMemberOrderFieldLogin EnterpriseMemberOrderField = "LOGIN"
	// EnterpriseMemberOrderFieldCreatedAt. Order enterprise members by creation time.
	EnterpriseMemberOrderFieldCreatedAt EnterpriseMemberOrderField = "CREATED_AT"
)

// EnterpriseMembersCanCreateRepositoriesSettingValue represents the possible values for the enterprise members can create repositories setting.
type EnterpriseMembersCanCreateRepositoriesSettingValue string

const (
	// EnterpriseMembersCanCreateRepositoriesSettingValueNoPolicy. Organization administrators choose whether to allow members to create repositories.
	EnterpriseMembersCanCreateRepositoriesSettingValueNoPolicy EnterpriseMembersCanCreateRepositoriesSettingValue = "NO_POLICY"
	// EnterpriseMembersCanCreateRepositoriesSettingValueAll. Members will be able to create public and private repositories.
	EnterpriseMembersCanCreateRepositoriesSettingValueAll EnterpriseMembersCanCreateRepositoriesSettingValue = "ALL"
	// EnterpriseMembersCanCreateRepositoriesSettingValuePublic. Members will be able to create only public repositories.
	EnterpriseMembersCanCreateRepositoriesSettingValuePublic EnterpriseMembersCanCreateRepositoriesSettingValue = "PUBLIC"
	// EnterpriseMembersCanCreateRepositoriesSettingValuePrivate. Members will be able to create only private repositories.
	EnterpriseMembersCanCreateRepositoriesSettingValuePrivate EnterpriseMembersCanCreateRepositoriesSettingValue = "PRIVATE"
	// EnterpriseMembersCanCreateRepositoriesSettingValueDisabled. Members will not be able to create public or private repositories.
	EnterpriseMembersCanCreateRepositoriesSettingValueDisabled EnterpriseMembersCanCreateRepositoriesSettingValue = "DISABLED"
)

// EnterpriseMembersCanMakePurchasesSettingValue represents the possible values for the members can make purchases setting.
type EnterpriseMembersCanMakePurchasesSettingValue string

const (
	// EnterpriseMembersCanMakePurchasesSettingValueEnabled. The setting is enabled for organizations in the enterprise.
	EnterpriseMembersCanMakePurchasesSettingValueEnabled EnterpriseMembersCanMakePurchasesSettingValue = "ENABLED"
	// EnterpriseMembersCanMakePurchasesSettingValueDisabled. The setting is disabled for organizations in the enterprise.
	EnterpriseMembersCanMakePurchasesSettingValueDisabled EnterpriseMembersCanMakePurchasesSettingValue = "DISABLED"
)

// EnterpriseServerInstallationOrder represents ordering options for Enterprise Server installation connections.
type EnterpriseServerInstallationOrder struct {
	// The field to order Enterprise Server installations by.
	Field EnterpriseServerInstallationOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that EnterpriseServerInstallationOrder implements the Input interface.
var _ Input = (*EnterpriseServerInstallationOrder)(nil)

// isInput implements the Input interface.
func (EnterpriseServerInstallationOrder) isInput() {}

// EnterpriseServerInstallationOrderField represents properties by which Enterprise Server installation connections can be ordered.
type EnterpriseServerInstallationOrderField string

const (
	// EnterpriseServerInstallationOrderFieldHostName. Order Enterprise Server installations by host name.
	EnterpriseServerInstallationOrderFieldHostName EnterpriseServerInstallationOrderField = "HOST_NAME"
	// EnterpriseServerInstallationOrderFieldCustomerName. Order Enterprise Server installations by customer name.
	EnterpriseServerInstallationOrderFieldCustomerName EnterpriseServerInstallationOrderField = "CUSTOMER_NAME"
	// EnterpriseServerInstallationOrderFieldCreatedAt. Order Enterprise Server installations by creation time.
	EnterpriseServerInstallationOrderFieldCreatedAt EnterpriseServerInstallationOrderField = "CREATED_AT"
)

// EnterpriseServerUserAccountEmailOrder represents ordering options for Enterprise Server user account email connections.
type EnterpriseServerUserAccountEmailOrder struct {
	// The field to order emails by.
	Field EnterpriseServerUserAccountEmailOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that EnterpriseServerUserAccountEmailOrder implements the Input interface.
var _ Input = (*EnterpriseServerUserAccountEmailOrder)(nil)

// isInput implements the Input interface.
func (EnterpriseServerUserAccountEmailOrder) isInput() {}

// EnterpriseServerUserAccountEmailOrderField represents properties by which Enterprise Server user account email connections can be ordered.
type EnterpriseServerUserAccountEmailOrderField string

const (
	// EnterpriseServerUserAccountEmailOrderFieldEmail. Order emails by email.
	EnterpriseServerUserAccountEmailOrderFieldEmail EnterpriseServerUserAccountEmailOrderField = "EMAIL"
)

// EnterpriseServerUserAccountOrder represents ordering options for Enterprise Server user account connections.
type EnterpriseServerUserAccountOrder struct {
	// The field to order user accounts by.
	Field EnterpriseServerUserAccountOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that EnterpriseServerUserAccountOrder implements the Input interface.
var _ Input = (*EnterpriseServerUserAccountOrder)(nil)

// isInput implements the Input interface.
func (EnterpriseServerUserAccountOrder) isInput() {}

// EnterpriseServerUserAccountOrderField represents properties by which Enterprise Server user account connections can be ordered.
type EnterpriseServerUserAccountOrderField string

const (
	// EnterpriseServerUserAccountOrderFieldLogin. Order user accounts by login.
	EnterpriseServerUserAccountOrderFieldLogin EnterpriseServerUserAccountOrderField = "LOGIN"
	// EnterpriseServerUserAccountOrderFieldRemoteCreatedAt. Order user accounts by creation time on the Enterprise Server installation.
	EnterpriseServerUserAccountOrderFieldRemoteCreatedAt EnterpriseServerUserAccountOrderField = "REMOTE_CREATED_AT"
)

// EnterpriseServerUserAccountsUploadOrder represents ordering options for Enterprise Server user accounts upload connections.
type EnterpriseServerUserAccountsUploadOrder struct {
	// The field to order user accounts uploads by.
	Field EnterpriseServerUserAccountsUploadOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that EnterpriseServerUserAccountsUploadOrder implements the Input interface.
var _ Input = (*EnterpriseServerUserAccountsUploadOrder)(nil)

// isInput implements the Input interface.
func (EnterpriseServerUserAccountsUploadOrder) isInput() {}

// EnterpriseServerUserAccountsUploadOrderField represents properties by which Enterprise Server user accounts upload connections can be ordered.
type EnterpriseServerUserAccountsUploadOrderField string

const (
	// EnterpriseServerUserAccountsUploadOrderFieldCreatedAt. Order user accounts uploads by creation time.
	EnterpriseServerUserAccountsUploadOrderFieldCreatedAt EnterpriseServerUserAccountsUploadOrderField = "CREATED_AT"
)

// EnterpriseServerUserAccountsUploadSyncState represents synchronization state of the Enterprise Server user accounts upload.
type EnterpriseServerUserAccountsUploadSyncState string

const (
	// EnterpriseServerUserAccountsUploadSyncStatePending. The synchronization of the upload is pending.
	EnterpriseServerUserAccountsUploadSyncStatePending EnterpriseServerUserAccountsUploadSyncState = "PENDING"
	// EnterpriseServerUserAccountsUploadSyncStateSuccess. The synchronization of the upload succeeded.
	EnterpriseServerUserAccountsUploadSyncStateSuccess EnterpriseServerUserAccountsUploadSyncState = "SUCCESS"
	// EnterpriseServerUserAccountsUploadSyncStateFailure. The synchronization of the upload failed.
	EnterpriseServerUserAccountsUploadSyncStateFailure EnterpriseServerUserAccountsUploadSyncState = "FAILURE"
)

// EnterpriseUserAccountMembershipRole represents the possible roles for enterprise membership.
type EnterpriseUserAccountMembershipRole string

const (
	// EnterpriseUserAccountMembershipRoleMember. The user is a member of an organization in the enterprise.
	EnterpriseUserAccountMembershipRoleMember EnterpriseUserAccountMembershipRole = "MEMBER"
	// EnterpriseUserAccountMembershipRoleOwner. The user is an owner of an organization in the enterprise.
	EnterpriseUserAccountMembershipRoleOwner EnterpriseUserAccountMembershipRole = "OWNER"
	// EnterpriseUserAccountMembershipRoleUnaffiliated. The user is not an owner of the enterprise, and not a member or owner of any organizations in the enterprise; only for EMU-enabled enterprises.
	EnterpriseUserAccountMembershipRoleUnaffiliated EnterpriseUserAccountMembershipRole = "UNAFFILIATED"
)

// EnterpriseUserDeployment represents the possible GitHub Enterprise deployments where this user can exist.
type EnterpriseUserDeployment string

const (
	// EnterpriseUserDeploymentCloud. The user is part of a GitHub Enterprise Cloud deployment.
	EnterpriseUserDeploymentCloud EnterpriseUserDeployment = "CLOUD"
	// EnterpriseUserDeploymentServer. The user is part of a GitHub Enterprise Server deployment.
	EnterpriseUserDeploymentServer EnterpriseUserDeployment = "SERVER"
)

// FileAddition represents a command to add a file at the given path with the given contents as part of a commit.  Any existing file at that that path will be replaced.
type FileAddition struct {
	// The path in the repository where the file will be located.
	Path string "json:\"path\""
	// The base64 encoded contents of the file.
	Contents Base64String "json:\"contents\""
}

// Compile-time assertion that FileAddition implements the Input interface.
var _ Input = (*FileAddition)(nil)

// isInput implements the Input interface.
func (FileAddition) isInput() {}

// FileChanges represents a description of a set of changes to a file tree to be made as part of
// a git commit, modeled as zero or more file `additions` and zero or more
// file `deletions`.
//
// Both fields are optional; omitting both will produce a commit with no
// file changes.
//
// `deletions` and `additions` describe changes to files identified
// by their path in the git tree using unix-style path separators, i.e.
// `/`.  The root of a git tree is an empty string, so paths are not
// slash-prefixed.
//
// `path` values must be unique across all `additions` and `deletions`
// provided.  Any duplication will result in a validation error.
//
// ### Encoding
//
// File contents must be provided in full for each `FileAddition`.
//
// The `contents` of a `FileAddition` must be encoded using RFC 4648
// compliant base64, i.e. correct padding is required and no characters
// outside the standard alphabet may be used.  Invalid base64
// encoding will be rejected with a validation error.
//
// The encoded contents may be binary.
//
// For text files, no assumptions are made about the character encoding of
// the file contents (after base64 decoding).  No charset transcoding or
// line-ending normalization will be performed; it is the client's
// responsibility to manage the character encoding of files they provide.
// However, for maximum compatibility we recommend using UTF-8 encoding
// and ensuring that all files in a repository use a consistent
// line-ending convention (`\n` or `\r\n`), and that all files end
// with a newline.
//
// ### Modeling file changes
//
// Each of the the five types of conceptual changes that can be made in a
// git commit can be described using the `FileChanges` type as follows:
//
// 1. New file addition: create file `hello world\n` at path `docs/README.txt`:
//
//	{
//	  "additions" [
//	    {
//	      "path": "docs/README.txt",
//	      "contents": base64encode("hello world\n")
//	    }
//	  ]
//	}
//
//  2. Existing file modification: change existing `docs/README.txt` to have new
//     content `new content here\n`:
//
//     {
//     "additions" [
//     {
//     "path": "docs/README.txt",
//     "contents": base64encode("new content here\n")
//     }
//     ]
//     }
//
//  3. Existing file deletion: remove existing file `docs/README.txt`.
//     Note that the path is required to exist -- specifying a
//     path that does not exist on the given branch will abort the
//     commit and return an error.
//
//     {
//     "deletions" [
//     {
//     "path": "docs/README.txt"
//     }
//     ]
//     }
//
//  4. File rename with no changes: rename `docs/README.txt` with
//     previous content `hello world\n` to the same content at
//     `newdocs/README.txt`:
//
//     {
//     "deletions" [
//     {
//     "path": "docs/README.txt",
//     }
//     ],
//     "additions" [
//     {
//     "path": "newdocs/README.txt",
//     "contents": base64encode("hello world\n")
//     }
//     ]
//     }
//
//  5. File rename with changes: rename `docs/README.txt` with
//     previous content `hello world\n` to a file at path
//     `newdocs/README.txt` with content `new contents\n`:
//
//     {
//     "deletions" [
//     {
//     "path": "docs/README.txt",
//     }
//     ],
//     "additions" [
//     {
//     "path": "newdocs/README.txt",
//     "contents": base64encode("new contents\n")
//     }
//     ]
//     }.
type FileChanges struct {
	// Files to delete.
	Deletions *[]FileDeletion "json:\"deletions\""
	// File to add or change.
	Additions *[]FileAddition "json:\"additions\""
}

// Compile-time assertion that FileChanges implements the Input interface.
var _ Input = (*FileChanges)(nil)

// isInput implements the Input interface.
func (FileChanges) isInput() {}

// FileDeletion represents a command to delete the file at the given path as part of a commit.
type FileDeletion struct {
	// The path to delete.
	Path string "json:\"path\""
}

// Compile-time assertion that FileDeletion implements the Input interface.
var _ Input = (*FileDeletion)(nil)

// isInput implements the Input interface.
func (FileDeletion) isInput() {}

// FileViewedState represents the possible viewed states of a file .
type FileViewedState string

const (
	// FileViewedStateDismissed. The file has new changes since last viewed.
	FileViewedStateDismissed FileViewedState = "DISMISSED"
	// FileViewedStateViewed. The file has been marked as viewed.
	FileViewedStateViewed FileViewedState = "VIEWED"
	// FileViewedStateUnviewed. The file has not been marked as viewed.
	FileViewedStateUnviewed FileViewedState = "UNVIEWED"
)

// FollowOrganizationInput is an autogenerated input type of FollowOrganization.
type FollowOrganizationInput struct {
	// ID of the organization to follow.
	OrganizationID ID "json:\"organizationId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that FollowOrganizationInput implements the Input interface.
var _ Input = (*FollowOrganizationInput)(nil)

// isInput implements the Input interface.
func (FollowOrganizationInput) isInput() {}

// FollowUserInput is an autogenerated input type of FollowUser.
type FollowUserInput struct {
	// ID of the user to follow.
	UserID ID "json:\"userId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that FollowUserInput implements the Input interface.
var _ Input = (*FollowUserInput)(nil)

// isInput implements the Input interface.
func (FollowUserInput) isInput() {}

// FundingPlatform represents the possible funding platforms for repository funding links.
type FundingPlatform string

const (
	// FundingPlatformGitHub. GitHub funding platform.
	FundingPlatformGitHub FundingPlatform = "GITHUB"
	// FundingPlatformPatreon. Patreon funding platform.
	FundingPlatformPatreon FundingPlatform = "PATREON"
	// FundingPlatformOpenCollective. Open Collective funding platform.
	FundingPlatformOpenCollective FundingPlatform = "OPEN_COLLECTIVE"
	// FundingPlatformKoFi. Ko-fi funding platform.
	FundingPlatformKoFi FundingPlatform = "KO_FI"
	// FundingPlatformTidelift. Tidelift funding platform.
	FundingPlatformTidelift FundingPlatform = "TIDELIFT"
	// FundingPlatformCommunityBridge. Community Bridge funding platform.
	FundingPlatformCommunityBridge FundingPlatform = "COMMUNITY_BRIDGE"
	// FundingPlatformLiberapay. Liberapay funding platform.
	FundingPlatformLiberapay FundingPlatform = "LIBERAPAY"
	// FundingPlatformIssueHunt. IssueHunt funding platform.
	FundingPlatformIssueHunt FundingPlatform = "ISSUEHUNT"
	// FundingPlatformOtechie. Otechie funding platform.
	FundingPlatformOtechie FundingPlatform = "OTECHIE"
	// FundingPlatformLFXCrowdfunding. LFX Crowdfunding funding platform.
	FundingPlatformLFXCrowdfunding FundingPlatform = "LFX_CROWDFUNDING"
	// FundingPlatformCustom. Custom funding platform.
	FundingPlatformCustom FundingPlatform = "CUSTOM"
)

// GistOrder represents ordering options for gist connections.
type GistOrder struct {
	// The field to order repositories by.
	Field GistOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that GistOrder implements the Input interface.
var _ Input = (*GistOrder)(nil)

// isInput implements the Input interface.
func (GistOrder) isInput() {}

// GistOrderField represents properties by which gist connections can be ordered.
type GistOrderField string

const (
	// GistOrderFieldCreatedAt. Order gists by creation time.
	GistOrderFieldCreatedAt GistOrderField = "CREATED_AT"
	// GistOrderFieldUpdatedAt. Order gists by update time.
	GistOrderFieldUpdatedAt GistOrderField = "UPDATED_AT"
	// GistOrderFieldPushedAt. Order gists by push time.
	GistOrderFieldPushedAt GistOrderField = "PUSHED_AT"
)

// GistPrivacy represents the privacy of a Gist.
type GistPrivacy string

const (
	// GistPrivacyPublic. Public.
	GistPrivacyPublic GistPrivacy = "PUBLIC"
	// GistPrivacySecret. Secret.
	GistPrivacySecret GistPrivacy = "SECRET"
	// GistPrivacyAll. Gists that are public and secret.
	GistPrivacyAll GistPrivacy = "ALL"
)

// GitSignatureState represents the state of a Git signature.
type GitSignatureState string

const (
	// GitSignatureStateValid. Valid signature and verified by GitHub.
	GitSignatureStateValid GitSignatureState = "VALID"
	// GitSignatureStateInvalid. Invalid signature.
	GitSignatureStateInvalid GitSignatureState = "INVALID"
	// GitSignatureStateMalformedSig. Malformed signature.
	GitSignatureStateMalformedSig GitSignatureState = "MALFORMED_SIG"
	// GitSignatureStateUnknownKey. Key used for signing not known to GitHub.
	GitSignatureStateUnknownKey GitSignatureState = "UNKNOWN_KEY"
	// GitSignatureStateBadEmail. Invalid email used for signing.
	GitSignatureStateBadEmail GitSignatureState = "BAD_EMAIL"
	// GitSignatureStateUnverifiedEmail. Email used for signing unverified on GitHub.
	GitSignatureStateUnverifiedEmail GitSignatureState = "UNVERIFIED_EMAIL"
	// GitSignatureStateNoUser. Email used for signing not known to GitHub.
	GitSignatureStateNoUser GitSignatureState = "NO_USER"
	// GitSignatureStateUnknownSigType. Unknown signature type.
	GitSignatureStateUnknownSigType GitSignatureState = "UNKNOWN_SIG_TYPE"
	// GitSignatureStateUnsigned. Unsigned.
	GitSignatureStateUnsigned GitSignatureState = "UNSIGNED"
	// GitSignatureStateGpgverifyUnavailable. Internal error - the GPG verification service is unavailable at the moment.
	GitSignatureStateGpgverifyUnavailable GitSignatureState = "GPGVERIFY_UNAVAILABLE"
	// GitSignatureStateGpgverifyError. Internal error - the GPG verification service misbehaved.
	GitSignatureStateGpgverifyError GitSignatureState = "GPGVERIFY_ERROR"
	// GitSignatureStateNotSigningKey. The usage flags for the key that signed this don't allow signing.
	GitSignatureStateNotSigningKey GitSignatureState = "NOT_SIGNING_KEY"
	// GitSignatureStateExpiredKey. Signing key expired.
	GitSignatureStateExpiredKey GitSignatureState = "EXPIRED_KEY"
	// GitSignatureStateOcspPending. Valid signature, pending certificate revocation checking.
	GitSignatureStateOcspPending GitSignatureState = "OCSP_PENDING"
	// GitSignatureStateOcspError. Valid signature, though certificate revocation check failed.
	GitSignatureStateOcspError GitSignatureState = "OCSP_ERROR"
	// GitSignatureStateBadCert. The signing certificate or its chain could not be verified.
	GitSignatureStateBadCert GitSignatureState = "BAD_CERT"
	// GitSignatureStateOcspRevoked. One or more certificates in chain has been revoked.
	GitSignatureStateOcspRevoked GitSignatureState = "OCSP_REVOKED"
)

// GrantEnterpriseOrganizationsMigratorRoleInput is an autogenerated input type of GrantEnterpriseOrganizationsMigratorRole.
type GrantEnterpriseOrganizationsMigratorRoleInput struct {
	// The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
	EnterpriseID ID "json:\"enterpriseId\""
	// The login of the user to grant the migrator role.
	Login string "json:\"login\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that GrantEnterpriseOrganizationsMigratorRoleInput implements the Input interface.
var _ Input = (*GrantEnterpriseOrganizationsMigratorRoleInput)(nil)

// isInput implements the Input interface.
func (GrantEnterpriseOrganizationsMigratorRoleInput) isInput() {}

// GrantMigratorRoleInput is an autogenerated input type of GrantMigratorRole.
type GrantMigratorRoleInput struct {
	// The ID of the organization that the user/team belongs to.
	OrganizationID ID "json:\"organizationId\""
	// The user login or Team slug to grant the migrator role.
	Actor string "json:\"actor\""
	// Specifies the type of the actor, can be either USER or TEAM.
	ActorType ActorType "json:\"actorType\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that GrantMigratorRoleInput implements the Input interface.
var _ Input = (*GrantMigratorRoleInput)(nil)

// isInput implements the Input interface.
func (GrantMigratorRoleInput) isInput() {}

// IdentityProviderConfigurationState represents the possible states in which authentication can be configured with an identity provider.
type IdentityProviderConfigurationState string

const (
	// IdentityProviderConfigurationStateEnforced. Authentication with an identity provider is configured and enforced.
	IdentityProviderConfigurationStateEnforced IdentityProviderConfigurationState = "ENFORCED"
	// IdentityProviderConfigurationStateConfigured. Authentication with an identity provider is configured but not enforced.
	IdentityProviderConfigurationStateConfigured IdentityProviderConfigurationState = "CONFIGURED"
	// IdentityProviderConfigurationStateUnconfigured. Authentication with an identity provider is not configured.
	IdentityProviderConfigurationStateUnconfigured IdentityProviderConfigurationState = "UNCONFIGURED"
)

// InviteEnterpriseAdminInput is an autogenerated input type of InviteEnterpriseAdmin.
type InviteEnterpriseAdminInput struct {
	// The ID of the enterprise to which you want to invite an administrator.
	EnterpriseID ID "json:\"enterpriseId\""
	// The login of a user to invite as an administrator.
	Invitee *string "json:\"invitee\""
	// The email of the person to invite as an administrator.
	Email *string "json:\"email\""
	// The role of the administrator.
	Role *EnterpriseAdministratorRole "json:\"role\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that InviteEnterpriseAdminInput implements the Input interface.
var _ Input = (*InviteEnterpriseAdminInput)(nil)

// isInput implements the Input interface.
func (InviteEnterpriseAdminInput) isInput() {}

// IPAllowListEnabledSettingValue represents the possible values for the IP allow list enabled setting.
type IPAllowListEnabledSettingValue string

const (
	// IPAllowListEnabledSettingValueEnabled. The setting is enabled for the owner.
	IPAllowListEnabledSettingValueEnabled IPAllowListEnabledSettingValue = "ENABLED"
	// IPAllowListEnabledSettingValueDisabled. The setting is disabled for the owner.
	IPAllowListEnabledSettingValueDisabled IPAllowListEnabledSettingValue = "DISABLED"
)

// IPAllowListEntryOrder represents ordering options for IP allow list entry connections.
type IPAllowListEntryOrder struct {
	// The field to order IP allow list entries by.
	Field IPAllowListEntryOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that IPAllowListEntryOrder implements the Input interface.
var _ Input = (*IPAllowListEntryOrder)(nil)

// isInput implements the Input interface.
func (IPAllowListEntryOrder) isInput() {}

// IPAllowListEntryOrderField represents properties by which IP allow list entry connections can be ordered.
type IPAllowListEntryOrderField string

const (
	// IPAllowListEntryOrderFieldCreatedAt. Order IP allow list entries by creation time.
	IPAllowListEntryOrderFieldCreatedAt IPAllowListEntryOrderField = "CREATED_AT"
	// IPAllowListEntryOrderFieldAllowListValue. Order IP allow list entries by the allow list value.
	IPAllowListEntryOrderFieldAllowListValue IPAllowListEntryOrderField = "ALLOW_LIST_VALUE"
)

// IPAllowListForInstalledAppsEnabledSettingValue represents the possible values for the IP allow list configuration for installed GitHub Apps setting.
type IPAllowListForInstalledAppsEnabledSettingValue string

const (
	// IPAllowListForInstalledAppsEnabledSettingValueEnabled. The setting is enabled for the owner.
	IPAllowListForInstalledAppsEnabledSettingValueEnabled IPAllowListForInstalledAppsEnabledSettingValue = "ENABLED"
	// IPAllowListForInstalledAppsEnabledSettingValueDisabled. The setting is disabled for the owner.
	IPAllowListForInstalledAppsEnabledSettingValueDisabled IPAllowListForInstalledAppsEnabledSettingValue = "DISABLED"
)

// IssueClosedStateReason represents the possible state reasons of a closed issue.
type IssueClosedStateReason string

const (
	// IssueClosedStateReasonCompleted. An issue that has been closed as completed.
	IssueClosedStateReasonCompleted IssueClosedStateReason = "COMPLETED"
	// IssueClosedStateReasonNotPlanned. An issue that has been closed as not planned.
	IssueClosedStateReasonNotPlanned IssueClosedStateReason = "NOT_PLANNED"
)

// IssueCommentOrder represents ways in which lists of issue comments can be ordered upon return.
type IssueCommentOrder struct {
	// The field in which to order issue comments by.
	Field IssueCommentOrderField "json:\"field\""
	// The direction in which to order issue comments by the specified field.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that IssueCommentOrder implements the Input interface.
var _ Input = (*IssueCommentOrder)(nil)

// isInput implements the Input interface.
func (IssueCommentOrder) isInput() {}

// IssueCommentOrderField represents properties by which issue comment connections can be ordered.
type IssueCommentOrderField string

const (
	// IssueCommentOrderFieldUpdatedAt. Order issue comments by update time.
	IssueCommentOrderFieldUpdatedAt IssueCommentOrderField = "UPDATED_AT"
)

// IssueFilters represents ways in which to filter lists of issues.
type IssueFilters struct {
	// List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user.
	Assignee *string "json:\"assignee\""
	// List issues created by given name.
	CreatedBy *string "json:\"createdBy\""
	// List issues where the list of label names exist on the issue.
	Labels *[]string "json:\"labels\""
	// List issues where the given name is mentioned in the issue.
	Mentioned *string "json:\"mentioned\""
	// List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its database ID. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
	Milestone *string "json:\"milestone\""
	// List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
	MilestoneNumber *string "json:\"milestoneNumber\""
	// List issues that have been updated at or after the given date.
	Since *DateTime "json:\"since\""
	// List issues filtered by the list of states given.
	States *[]IssueState "json:\"states\""
	// List issues subscribed to by viewer.
	ViewerSubscribed *bool "json:\"viewerSubscribed\""
}

// Compile-time assertion that IssueFilters implements the Input interface.
var _ Input = (*IssueFilters)(nil)

// isInput implements the Input interface.
func (IssueFilters) isInput() {}

// IssueOrder represents ways in which lists of issues can be ordered upon return.
type IssueOrder struct {
	// The field in which to order issues by.
	Field IssueOrderField "json:\"field\""
	// The direction in which to order issues by the specified field.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that IssueOrder implements the Input interface.
var _ Input = (*IssueOrder)(nil)

// isInput implements the Input interface.
func (IssueOrder) isInput() {}

// IssueOrderField represents properties by which issue connections can be ordered.
type IssueOrderField string

const (
	// IssueOrderFieldCreatedAt. Order issues by creation time.
	IssueOrderFieldCreatedAt IssueOrderField = "CREATED_AT"
	// IssueOrderFieldUpdatedAt. Order issues by update time.
	IssueOrderFieldUpdatedAt IssueOrderField = "UPDATED_AT"
	// IssueOrderFieldComments. Order issues by comment count.
	IssueOrderFieldComments IssueOrderField = "COMMENTS"
)

// IssueState represents the possible states of an issue.
type IssueState string

const (
	// IssueStateOpen. An issue that is still open.
	IssueStateOpen IssueState = "OPEN"
	// IssueStateClosed. An issue that has been closed.
	IssueStateClosed IssueState = "CLOSED"
)

// IssueStateReason represents the possible state reasons of an issue.
type IssueStateReason string

const (
	// IssueStateReasonReopened. An issue that has been reopened.
	IssueStateReasonReopened IssueStateReason = "REOPENED"
	// IssueStateReasonNotPlanned. An issue that has been closed as not planned.
	IssueStateReasonNotPlanned IssueStateReason = "NOT_PLANNED"
	// IssueStateReasonCompleted. An issue that has been closed as completed.
	IssueStateReasonCompleted IssueStateReason = "COMPLETED"
)

// IssueTimelineItemsItemType represents the possible item types found in a timeline.
type IssueTimelineItemsItemType string

const (
	// IssueTimelineItemsItemTypeIssueComment. Represents a comment on an Issue.
	IssueTimelineItemsItemTypeIssueComment IssueTimelineItemsItemType = "ISSUE_COMMENT"
	// IssueTimelineItemsItemTypeCrossReferencedEvent. Represents a mention made by one issue or pull request to another.
	IssueTimelineItemsItemTypeCrossReferencedEvent IssueTimelineItemsItemType = "CROSS_REFERENCED_EVENT"
	// IssueTimelineItemsItemTypeAddedToProjectEvent. Represents a 'added_to_project' event on a given issue or pull request.
	IssueTimelineItemsItemTypeAddedToProjectEvent IssueTimelineItemsItemType = "ADDED_TO_PROJECT_EVENT"
	// IssueTimelineItemsItemTypeAssignedEvent. Represents an 'assigned' event on any assignable object.
	IssueTimelineItemsItemTypeAssignedEvent IssueTimelineItemsItemType = "ASSIGNED_EVENT"
	// IssueTimelineItemsItemTypeClosedEvent. Represents a 'closed' event on any `Closable`.
	IssueTimelineItemsItemTypeClosedEvent IssueTimelineItemsItemType = "CLOSED_EVENT"
	// IssueTimelineItemsItemTypeCommentDeletedEvent. Represents a 'comment_deleted' event on a given issue or pull request.
	IssueTimelineItemsItemTypeCommentDeletedEvent IssueTimelineItemsItemType = "COMMENT_DELETED_EVENT"
	// IssueTimelineItemsItemTypeConnectedEvent. Represents a 'connected' event on a given issue or pull request.
	IssueTimelineItemsItemTypeConnectedEvent IssueTimelineItemsItemType = "CONNECTED_EVENT"
	// IssueTimelineItemsItemTypeConvertedNoteToIssueEvent. Represents a 'converted_note_to_issue' event on a given issue or pull request.
	IssueTimelineItemsItemTypeConvertedNoteToIssueEvent IssueTimelineItemsItemType = "CONVERTED_NOTE_TO_ISSUE_EVENT"
	// IssueTimelineItemsItemTypeConvertedToDiscussionEvent. Represents a 'converted_to_discussion' event on a given issue.
	IssueTimelineItemsItemTypeConvertedToDiscussionEvent IssueTimelineItemsItemType = "CONVERTED_TO_DISCUSSION_EVENT"
	// IssueTimelineItemsItemTypeDemilestonedEvent. Represents a 'demilestoned' event on a given issue or pull request.
	IssueTimelineItemsItemTypeDemilestonedEvent IssueTimelineItemsItemType = "DEMILESTONED_EVENT"
	// IssueTimelineItemsItemTypeDisconnectedEvent. Represents a 'disconnected' event on a given issue or pull request.
	IssueTimelineItemsItemTypeDisconnectedEvent IssueTimelineItemsItemType = "DISCONNECTED_EVENT"
	// IssueTimelineItemsItemTypeLabeledEvent. Represents a 'labeled' event on a given issue or pull request.
	IssueTimelineItemsItemTypeLabeledEvent IssueTimelineItemsItemType = "LABELED_EVENT"
	// IssueTimelineItemsItemTypeLockedEvent. Represents a 'locked' event on a given issue or pull request.
	IssueTimelineItemsItemTypeLockedEvent IssueTimelineItemsItemType = "LOCKED_EVENT"
	// IssueTimelineItemsItemTypeMarkedAsDuplicateEvent. Represents a 'marked_as_duplicate' event on a given issue or pull request.
	IssueTimelineItemsItemTypeMarkedAsDuplicateEvent IssueTimelineItemsItemType = "MARKED_AS_DUPLICATE_EVENT"
	// IssueTimelineItemsItemTypeMentionedEvent. Represents a 'mentioned' event on a given issue or pull request.
	IssueTimelineItemsItemTypeMentionedEvent IssueTimelineItemsItemType = "MENTIONED_EVENT"
	// IssueTimelineItemsItemTypeMilestonedEvent. Represents a 'milestoned' event on a given issue or pull request.
	IssueTimelineItemsItemTypeMilestonedEvent IssueTimelineItemsItemType = "MILESTONED_EVENT"
	// IssueTimelineItemsItemTypeMovedColumnsInProjectEvent. Represents a 'moved_columns_in_project' event on a given issue or pull request.
	IssueTimelineItemsItemTypeMovedColumnsInProjectEvent IssueTimelineItemsItemType = "MOVED_COLUMNS_IN_PROJECT_EVENT"
	// IssueTimelineItemsItemTypePinnedEvent. Represents a 'pinned' event on a given issue or pull request.
	IssueTimelineItemsItemTypePinnedEvent IssueTimelineItemsItemType = "PINNED_EVENT"
	// IssueTimelineItemsItemTypeReferencedEvent. Represents a 'referenced' event on a given `ReferencedSubject`.
	IssueTimelineItemsItemTypeReferencedEvent IssueTimelineItemsItemType = "REFERENCED_EVENT"
	// IssueTimelineItemsItemTypeRemovedFromProjectEvent. Represents a 'removed_from_project' event on a given issue or pull request.
	IssueTimelineItemsItemTypeRemovedFromProjectEvent IssueTimelineItemsItemType = "REMOVED_FROM_PROJECT_EVENT"
	// IssueTimelineItemsItemTypeRenamedTitleEvent. Represents a 'renamed' event on a given issue or pull request.
	IssueTimelineItemsItemTypeRenamedTitleEvent IssueTimelineItemsItemType = "RENAMED_TITLE_EVENT"
	// IssueTimelineItemsItemTypeReopenedEvent. Represents a 'reopened' event on any `Closable`.
	IssueTimelineItemsItemTypeReopenedEvent IssueTimelineItemsItemType = "REOPENED_EVENT"
	// IssueTimelineItemsItemTypeSubscribedEvent. Represents a 'subscribed' event on a given `Subscribable`.
	IssueTimelineItemsItemTypeSubscribedEvent IssueTimelineItemsItemType = "SUBSCRIBED_EVENT"
	// IssueTimelineItemsItemTypeTransferredEvent. Represents a 'transferred' event on a given issue or pull request.
	IssueTimelineItemsItemTypeTransferredEvent IssueTimelineItemsItemType = "TRANSFERRED_EVENT"
	// IssueTimelineItemsItemTypeUnassignedEvent. Represents an 'unassigned' event on any assignable object.
	IssueTimelineItemsItemTypeUnassignedEvent IssueTimelineItemsItemType = "UNASSIGNED_EVENT"
	// IssueTimelineItemsItemTypeUnlabeledEvent. Represents an 'unlabeled' event on a given issue or pull request.
	IssueTimelineItemsItemTypeUnlabeledEvent IssueTimelineItemsItemType = "UNLABELED_EVENT"
	// IssueTimelineItemsItemTypeUnlockedEvent. Represents an 'unlocked' event on a given issue or pull request.
	IssueTimelineItemsItemTypeUnlockedEvent IssueTimelineItemsItemType = "UNLOCKED_EVENT"
	// IssueTimelineItemsItemTypeUserBlockedEvent. Represents a 'user_blocked' event on a given user.
	IssueTimelineItemsItemTypeUserBlockedEvent IssueTimelineItemsItemType = "USER_BLOCKED_EVENT"
	// IssueTimelineItemsItemTypeUnmarkedAsDuplicateEvent. Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
	IssueTimelineItemsItemTypeUnmarkedAsDuplicateEvent IssueTimelineItemsItemType = "UNMARKED_AS_DUPLICATE_EVENT"
	// IssueTimelineItemsItemTypeUnpinnedEvent. Represents an 'unpinned' event on a given issue or pull request.
	IssueTimelineItemsItemTypeUnpinnedEvent IssueTimelineItemsItemType = "UNPINNED_EVENT"
	// IssueTimelineItemsItemTypeUnsubscribedEvent. Represents an 'unsubscribed' event on a given `Subscribable`.
	IssueTimelineItemsItemTypeUnsubscribedEvent IssueTimelineItemsItemType = "UNSUBSCRIBED_EVENT"
)

// LabelOrder represents ways in which lists of labels can be ordered upon return.
type LabelOrder struct {
	// The field in which to order labels by.
	Field LabelOrderField "json:\"field\""
	// The direction in which to order labels by the specified field.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that LabelOrder implements the Input interface.
var _ Input = (*LabelOrder)(nil)

// isInput implements the Input interface.
func (LabelOrder) isInput() {}

// LabelOrderField represents properties by which label connections can be ordered.
type LabelOrderField string

const (
	// LabelOrderFieldName. Order labels by name.
	LabelOrderFieldName LabelOrderField = "NAME"
	// LabelOrderFieldCreatedAt. Order labels by creation time.
	LabelOrderFieldCreatedAt LabelOrderField = "CREATED_AT"
)

// LanguageOrder represents ordering options for language connections.
type LanguageOrder struct {
	// The field to order languages by.
	Field LanguageOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that LanguageOrder implements the Input interface.
var _ Input = (*LanguageOrder)(nil)

// isInput implements the Input interface.
func (LanguageOrder) isInput() {}

// LanguageOrderField represents properties by which language connections can be ordered.
type LanguageOrderField string

const (
	// LanguageOrderFieldSize. Order languages by the size of all files containing the language.
	LanguageOrderFieldSize LanguageOrderField = "SIZE"
)

// LinkProjectV2ToRepositoryInput is an autogenerated input type of LinkProjectV2ToRepository.
type LinkProjectV2ToRepositoryInput struct {
	// The ID of the project to link to the repository.
	ProjectID ID "json:\"projectId\""
	// The ID of the repository to link to the project.
	RepositoryID ID "json:\"repositoryId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that LinkProjectV2ToRepositoryInput implements the Input interface.
var _ Input = (*LinkProjectV2ToRepositoryInput)(nil)

// isInput implements the Input interface.
func (LinkProjectV2ToRepositoryInput) isInput() {}

// LinkProjectV2ToTeamInput is an autogenerated input type of LinkProjectV2ToTeam.
type LinkProjectV2ToTeamInput struct {
	// The ID of the project to link to the team.
	ProjectID ID "json:\"projectId\""
	// The ID of the team to link to the project.
	TeamID ID "json:\"teamId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that LinkProjectV2ToTeamInput implements the Input interface.
var _ Input = (*LinkProjectV2ToTeamInput)(nil)

// isInput implements the Input interface.
func (LinkProjectV2ToTeamInput) isInput() {}

// LinkRepositoryToProjectInput is an autogenerated input type of LinkRepositoryToProject.
type LinkRepositoryToProjectInput struct {
	// The ID of the Project to link to a Repository.
	ProjectID ID "json:\"projectId\""
	// The ID of the Repository to link to a Project.
	RepositoryID ID "json:\"repositoryId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that LinkRepositoryToProjectInput implements the Input interface.
var _ Input = (*LinkRepositoryToProjectInput)(nil)

// isInput implements the Input interface.
func (LinkRepositoryToProjectInput) isInput() {}

// LockLockableInput is an autogenerated input type of LockLockable.
type LockLockableInput struct {
	// ID of the item to be locked.
	LockableID ID "json:\"lockableId\""
	// A reason for why the item will be locked.
	LockReason *LockReason "json:\"lockReason\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that LockLockableInput implements the Input interface.
var _ Input = (*LockLockableInput)(nil)

// isInput implements the Input interface.
func (LockLockableInput) isInput() {}

// LockReason represents the possible reasons that an issue or pull request was locked.
type LockReason string

const (
	// LockReasonOffTopic. The issue or pull request was locked because the conversation was off-topic.
	LockReasonOffTopic LockReason = "OFF_TOPIC"
	// LockReasonTooHeated. The issue or pull request was locked because the conversation was too heated.
	LockReasonTooHeated LockReason = "TOO_HEATED"
	// LockReasonResolved. The issue or pull request was locked because the conversation was resolved.
	LockReasonResolved LockReason = "RESOLVED"
	// LockReasonSpam. The issue or pull request was locked because the conversation was spam.
	LockReasonSpam LockReason = "SPAM"
)

// MannequinOrder represents ordering options for mannequins.
type MannequinOrder struct {
	// The field to order mannequins by.
	Field MannequinOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that MannequinOrder implements the Input interface.
var _ Input = (*MannequinOrder)(nil)

// isInput implements the Input interface.
func (MannequinOrder) isInput() {}

// MannequinOrderField represents properties by which mannequins can be ordered.
type MannequinOrderField string

const (
	// MannequinOrderFieldLogin. Order mannequins alphabetically by their source login.
	MannequinOrderFieldLogin MannequinOrderField = "LOGIN"
	// MannequinOrderFieldCreatedAt. Order mannequins why when they were created.
	MannequinOrderFieldCreatedAt MannequinOrderField = "CREATED_AT"
)

// MarkDiscussionCommentAsAnswerInput is an autogenerated input type of MarkDiscussionCommentAsAnswer.
type MarkDiscussionCommentAsAnswerInput struct {
	// The Node ID of the discussion comment to mark as an answer.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that MarkDiscussionCommentAsAnswerInput implements the Input interface.
var _ Input = (*MarkDiscussionCommentAsAnswerInput)(nil)

// isInput implements the Input interface.
func (MarkDiscussionCommentAsAnswerInput) isInput() {}

// MarkFileAsViewedInput is an autogenerated input type of MarkFileAsViewed.
type MarkFileAsViewedInput struct {
	// The Node ID of the pull request.
	PullRequestID ID "json:\"pullRequestId\""
	// The path of the file to mark as viewed.
	Path string "json:\"path\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that MarkFileAsViewedInput implements the Input interface.
var _ Input = (*MarkFileAsViewedInput)(nil)

// isInput implements the Input interface.
func (MarkFileAsViewedInput) isInput() {}

// MarkPullRequestReadyForReviewInput is an autogenerated input type of MarkPullRequestReadyForReview.
type MarkPullRequestReadyForReviewInput struct {
	// ID of the pull request to be marked as ready for review.
	PullRequestID ID "json:\"pullRequestId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that MarkPullRequestReadyForReviewInput implements the Input interface.
var _ Input = (*MarkPullRequestReadyForReviewInput)(nil)

// isInput implements the Input interface.
func (MarkPullRequestReadyForReviewInput) isInput() {}

// MergeBranchInput is an autogenerated input type of MergeBranch.
type MergeBranchInput struct {
	// The Node ID of the Repository containing the base branch that will be modified.
	RepositoryID ID "json:\"repositoryId\""
	// The name of the base branch that the provided head will be merged into.
	Base string "json:\"base\""
	// The head to merge into the base branch. This can be a branch name or a commit GitObjectID.
	Head string "json:\"head\""
	// Message to use for the merge commit. If omitted, a default will be used.
	CommitMessage *string "json:\"commitMessage\""
	// The email address to associate with this commit.
	AuthorEmail *string "json:\"authorEmail\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that MergeBranchInput implements the Input interface.
var _ Input = (*MergeBranchInput)(nil)

// isInput implements the Input interface.
func (MergeBranchInput) isInput() {}

// MergeCommitMessage represents the possible default commit messages for merges.
type MergeCommitMessage string

const (
	// MergeCommitMessagePrTitle. Default to the pull request's title.
	MergeCommitMessagePrTitle MergeCommitMessage = "PR_TITLE"
	// MergeCommitMessagePrBody. Default to the pull request's body.
	MergeCommitMessagePrBody MergeCommitMessage = "PR_BODY"
	// MergeCommitMessageBlank. Default to a blank commit message.
	MergeCommitMessageBlank MergeCommitMessage = "BLANK"
)

// MergeCommitTitle represents the possible default commit titles for merges.
type MergeCommitTitle string

const (
	// MergeCommitTitlePrTitle. Default to the pull request's title.
	MergeCommitTitlePrTitle MergeCommitTitle = "PR_TITLE"
	// MergeCommitTitleMergeMessage. Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitleMergeMessage MergeCommitTitle = "MERGE_MESSAGE"
)

// MergePullRequestInput is an autogenerated input type of MergePullRequest.
type MergePullRequestInput struct {
	// ID of the pull request to be merged.
	PullRequestID ID "json:\"pullRequestId\""
	// Commit headline to use for the merge commit; if omitted, a default message will be used.
	CommitHeadline *string "json:\"commitHeadline\""
	// Commit body to use for the merge commit; if omitted, a default message will be used.
	CommitBody *string "json:\"commitBody\""
	// OID that the pull request head ref must match to allow merge; if omitted, no check is performed.
	ExpectedHeadOid *GitObjectID "json:\"expectedHeadOid\""
	// The merge method to use. If omitted, defaults to 'MERGE'.
	MergeMethod *PullRequestMergeMethod "json:\"mergeMethod\""
	// The email address to associate with this merge.
	AuthorEmail *string "json:\"authorEmail\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that MergePullRequestInput implements the Input interface.
var _ Input = (*MergePullRequestInput)(nil)

// isInput implements the Input interface.
func (MergePullRequestInput) isInput() {}

// MergeQueueEntryState represents the possible states for a merge queue entry.
type MergeQueueEntryState string

const (
	// MergeQueueEntryStateQueued. The entry is currently queued.
	MergeQueueEntryStateQueued MergeQueueEntryState = "QUEUED"
	// MergeQueueEntryStateAwaitingChecks. The entry is currently waiting for checks to pass.
	MergeQueueEntryStateAwaitingChecks MergeQueueEntryState = "AWAITING_CHECKS"
	// MergeQueueEntryStateMergeable. The entry is currently mergeable.
	MergeQueueEntryStateMergeable MergeQueueEntryState = "MERGEABLE"
	// MergeQueueEntryStateUnmergeable. The entry is currently unmergeable.
	MergeQueueEntryStateUnmergeable MergeQueueEntryState = "UNMERGEABLE"
	// MergeQueueEntryStateLocked. The entry is currently locked.
	MergeQueueEntryStateLocked MergeQueueEntryState = "LOCKED"
)

// MergeQueueMergingStrategy represents the possible merging strategies for a merge queue.
type MergeQueueMergingStrategy string

const (
	// MergeQueueMergingStrategyAllgreen. Entries only allowed to merge if they are passing.
	MergeQueueMergingStrategyAllgreen MergeQueueMergingStrategy = "ALLGREEN"
	// MergeQueueMergingStrategyHeadgreen. Failing Entires are allowed to merge if they are with a passing entry.
	MergeQueueMergingStrategyHeadgreen MergeQueueMergingStrategy = "HEADGREEN"
)

// MergeableState represents whether or not a PullRequest can be merged.
type MergeableState string

const (
	// MergeableStateMergeable. The pull request can be merged.
	MergeableStateMergeable MergeableState = "MERGEABLE"
	// MergeableStateConflicting. The pull request cannot be merged due to merge conflicts.
	MergeableStateConflicting MergeableState = "CONFLICTING"
	// MergeableStateUnknown. The mergeability of the pull request is still being calculated.
	MergeableStateUnknown MergeableState = "UNKNOWN"
)

// MigrationSourceType represents represents the different GitHub Enterprise Importer (GEI) migration sources.
type MigrationSourceType string

const (
	// MigrationSourceTypeAzureDevOps. An Azure DevOps migration source.
	MigrationSourceTypeAzureDevOps MigrationSourceType = "AZURE_DEVOPS"
	// MigrationSourceTypeBitbucketServer. A Bitbucket Server migration source.
	MigrationSourceTypeBitbucketServer MigrationSourceType = "BITBUCKET_SERVER"
	// MigrationSourceTypeGitHubArchive. A GitHub Migration API source.
	MigrationSourceTypeGitHubArchive MigrationSourceType = "GITHUB_ARCHIVE"
)

// MigrationState represents the GitHub Enterprise Importer (GEI) migration state.
type MigrationState string

const (
	// MigrationStateNotStarted. The migration has not started.
	MigrationStateNotStarted MigrationState = "NOT_STARTED"
	// MigrationStateQueued. The migration has been queued.
	MigrationStateQueued MigrationState = "QUEUED"
	// MigrationStateInProgress. The migration is in progress.
	MigrationStateInProgress MigrationState = "IN_PROGRESS"
	// MigrationStateSucceeded. The migration has succeeded.
	MigrationStateSucceeded MigrationState = "SUCCEEDED"
	// MigrationStateFailed. The migration has failed.
	MigrationStateFailed MigrationState = "FAILED"
	// MigrationStatePendingValidation. The migration needs to have its credentials validated.
	MigrationStatePendingValidation MigrationState = "PENDING_VALIDATION"
	// MigrationStateFailedValidation. The migration has invalid credentials.
	MigrationStateFailedValidation MigrationState = "FAILED_VALIDATION"
)

// MilestoneOrder represents ordering options for milestone connections.
type MilestoneOrder struct {
	// The field to order milestones by.
	Field MilestoneOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that MilestoneOrder implements the Input interface.
var _ Input = (*MilestoneOrder)(nil)

// isInput implements the Input interface.
func (MilestoneOrder) isInput() {}

// MilestoneOrderField represents properties by which milestone connections can be ordered.
type MilestoneOrderField string

const (
	// MilestoneOrderFieldDueDate. Order milestones by when they are due.
	MilestoneOrderFieldDueDate MilestoneOrderField = "DUE_DATE"
	// MilestoneOrderFieldCreatedAt. Order milestones by when they were created.
	MilestoneOrderFieldCreatedAt MilestoneOrderField = "CREATED_AT"
	// MilestoneOrderFieldUpdatedAt. Order milestones by when they were last updated.
	MilestoneOrderFieldUpdatedAt MilestoneOrderField = "UPDATED_AT"
	// MilestoneOrderFieldNumber. Order milestones by their number.
	MilestoneOrderFieldNumber MilestoneOrderField = "NUMBER"
)

// MilestoneState represents the possible states of a milestone.
type MilestoneState string

const (
	// MilestoneStateOpen. A milestone that is still open.
	MilestoneStateOpen MilestoneState = "OPEN"
	// MilestoneStateClosed. A milestone that has been closed.
	MilestoneStateClosed MilestoneState = "CLOSED"
)

// MinimizeCommentInput is an autogenerated input type of MinimizeComment.
type MinimizeCommentInput struct {
	// The Node ID of the subject to modify.
	SubjectID ID "json:\"subjectId\""
	// The classification of comment.
	Classifier ReportedContentClassifiers "json:\"classifier\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that MinimizeCommentInput implements the Input interface.
var _ Input = (*MinimizeCommentInput)(nil)

// isInput implements the Input interface.
func (MinimizeCommentInput) isInput() {}

// MoveProjectCardInput is an autogenerated input type of MoveProjectCard.
type MoveProjectCardInput struct {
	// The id of the card to move.
	CardID ID "json:\"cardId\""
	// The id of the column to move it into.
	ColumnID ID "json:\"columnId\""
	// Place the new card after the card with this id. Pass null to place it at the top.
	AfterCardID *ID "json:\"afterCardId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that MoveProjectCardInput implements the Input interface.
var _ Input = (*MoveProjectCardInput)(nil)

// isInput implements the Input interface.
func (MoveProjectCardInput) isInput() {}

// MoveProjectColumnInput is an autogenerated input type of MoveProjectColumn.
type MoveProjectColumnInput struct {
	// The id of the column to move.
	ColumnID ID "json:\"columnId\""
	// Place the new column after the column with this id. Pass null to place it at the front.
	AfterColumnID *ID "json:\"afterColumnId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that MoveProjectColumnInput implements the Input interface.
var _ Input = (*MoveProjectColumnInput)(nil)

// isInput implements the Input interface.
func (MoveProjectColumnInput) isInput() {}

// NotificationRestrictionSettingValue represents the possible values for the notification restriction setting.
type NotificationRestrictionSettingValue string

const (
	// NotificationRestrictionSettingValueEnabled. The setting is enabled for the owner.
	NotificationRestrictionSettingValueEnabled NotificationRestrictionSettingValue = "ENABLED"
	// NotificationRestrictionSettingValueDisabled. The setting is disabled for the owner.
	NotificationRestrictionSettingValueDisabled NotificationRestrictionSettingValue = "DISABLED"
)

// OIDCProviderType represents the OIDC identity provider type.
type OIDCProviderType string

const (
	// OIDCProviderTypeAad. Azure Active Directory.
	OIDCProviderTypeAad OIDCProviderType = "AAD"
)

// OauthApplicationCreateAuditEntryState represents the state of an OAuth Application when it was created.
type OauthApplicationCreateAuditEntryState string

const (
	// OauthApplicationCreateAuditEntryStateActive. The OAuth Application was active and allowed to have OAuth Accesses.
	OauthApplicationCreateAuditEntryStateActive OauthApplicationCreateAuditEntryState = "ACTIVE"
	// OauthApplicationCreateAuditEntryStateSuspended. The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns.
	OauthApplicationCreateAuditEntryStateSuspended OauthApplicationCreateAuditEntryState = "SUSPENDED"
	// OauthApplicationCreateAuditEntryStatePendingDeletion. The OAuth Application was in the process of being deleted.
	OauthApplicationCreateAuditEntryStatePendingDeletion OauthApplicationCreateAuditEntryState = "PENDING_DELETION"
)

// OperationType represents the corresponding operation type for the action.
type OperationType string

const (
	// OperationTypeAccess. An existing resource was accessed.
	OperationTypeAccess OperationType = "ACCESS"
	// OperationTypeAuthentication. A resource performed an authentication event.
	OperationTypeAuthentication OperationType = "AUTHENTICATION"
	// OperationTypeCreate. A new resource was created.
	OperationTypeCreate OperationType = "CREATE"
	// OperationTypeModify. An existing resource was modified.
	OperationTypeModify OperationType = "MODIFY"
	// OperationTypeRemove. An existing resource was removed.
	OperationTypeRemove OperationType = "REMOVE"
	// OperationTypeRestore. An existing resource was restored.
	OperationTypeRestore OperationType = "RESTORE"
	// OperationTypeTransfer. An existing resource was transferred between multiple resources.
	OperationTypeTransfer OperationType = "TRANSFER"
)

// OrderDirection represents possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// OrderDirectionAsc. Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc. Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

// OrgAddMemberAuditEntryPermission represents the permissions available to members on an Organization.
type OrgAddMemberAuditEntryPermission string

const (
	// OrgAddMemberAuditEntryPermissionRead. Can read and clone repositories.
	OrgAddMemberAuditEntryPermissionRead OrgAddMemberAuditEntryPermission = "READ"
	// OrgAddMemberAuditEntryPermissionAdmin. Can read, clone, push, and add collaborators to repositories.
	OrgAddMemberAuditEntryPermissionAdmin OrgAddMemberAuditEntryPermission = "ADMIN"
)

// OrgCreateAuditEntryBillingPlan represents the billing plans available for organizations.
type OrgCreateAuditEntryBillingPlan string

const (
	// OrgCreateAuditEntryBillingPlanFree. Free Plan.
	OrgCreateAuditEntryBillingPlanFree OrgCreateAuditEntryBillingPlan = "FREE"
	// OrgCreateAuditEntryBillingPlanBusiness. Team Plan.
	OrgCreateAuditEntryBillingPlanBusiness OrgCreateAuditEntryBillingPlan = "BUSINESS"
	// OrgCreateAuditEntryBillingPlanBusinessPlus. Enterprise Cloud Plan.
	OrgCreateAuditEntryBillingPlanBusinessPlus OrgCreateAuditEntryBillingPlan = "BUSINESS_PLUS"
	// OrgCreateAuditEntryBillingPlanUnlimited. Legacy Unlimited Plan.
	OrgCreateAuditEntryBillingPlanUnlimited OrgCreateAuditEntryBillingPlan = "UNLIMITED"
	// OrgCreateAuditEntryBillingPlanTieredPerSeat. Tiered Per Seat Plan.
	OrgCreateAuditEntryBillingPlanTieredPerSeat OrgCreateAuditEntryBillingPlan = "TIERED_PER_SEAT"
)

// OrgEnterpriseOwnerOrder represents ordering options for an organization's enterprise owner connections.
type OrgEnterpriseOwnerOrder struct {
	// The field to order enterprise owners by.
	Field OrgEnterpriseOwnerOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that OrgEnterpriseOwnerOrder implements the Input interface.
var _ Input = (*OrgEnterpriseOwnerOrder)(nil)

// isInput implements the Input interface.
func (OrgEnterpriseOwnerOrder) isInput() {}

// OrgEnterpriseOwnerOrderField represents properties by which enterprise owners can be ordered.
type OrgEnterpriseOwnerOrderField string

const (
	// OrgEnterpriseOwnerOrderFieldLogin. Order enterprise owners by login.
	OrgEnterpriseOwnerOrderFieldLogin OrgEnterpriseOwnerOrderField = "LOGIN"
)

// OrgRemoveBillingManagerAuditEntryReason represents the reason a billing manager was removed from an Organization.
type OrgRemoveBillingManagerAuditEntryReason string

const (
	// OrgRemoveBillingManagerAuditEntryReasonTwoFactorRequirementNonCompliance. The organization required 2FA of its billing managers and this user did not have 2FA enabled.
	OrgRemoveBillingManagerAuditEntryReasonTwoFactorRequirementNonCompliance OrgRemoveBillingManagerAuditEntryReason = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"
	// OrgRemoveBillingManagerAuditEntryReasonSamlExternalIdentityMissing. SAML external identity missing.
	OrgRemoveBillingManagerAuditEntryReasonSamlExternalIdentityMissing OrgRemoveBillingManagerAuditEntryReason = "SAML_EXTERNAL_IDENTITY_MISSING"
	// OrgRemoveBillingManagerAuditEntryReasonSamlSsoEnforcementRequiresExternalIdentity. SAML SSO enforcement requires an external identity.
	OrgRemoveBillingManagerAuditEntryReasonSamlSsoEnforcementRequiresExternalIdentity OrgRemoveBillingManagerAuditEntryReason = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY"
)

// OrgRemoveMemberAuditEntryMembershipType represents the type of membership a user has with an Organization.
type OrgRemoveMemberAuditEntryMembershipType string

const (
	// OrgRemoveMemberAuditEntryMembershipTypeSuspended. A suspended member.
	OrgRemoveMemberAuditEntryMembershipTypeSuspended OrgRemoveMemberAuditEntryMembershipType = "SUSPENDED"
	// OrgRemoveMemberAuditEntryMembershipTypeDirectMember. A direct member is a user that is a member of the Organization.
	OrgRemoveMemberAuditEntryMembershipTypeDirectMember OrgRemoveMemberAuditEntryMembershipType = "DIRECT_MEMBER"
	// OrgRemoveMemberAuditEntryMembershipTypeAdmin. Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories.
	OrgRemoveMemberAuditEntryMembershipTypeAdmin OrgRemoveMemberAuditEntryMembershipType = "ADMIN"
	// OrgRemoveMemberAuditEntryMembershipTypeBillingManager. A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
	OrgRemoveMemberAuditEntryMembershipTypeBillingManager OrgRemoveMemberAuditEntryMembershipType = "BILLING_MANAGER"
	// OrgRemoveMemberAuditEntryMembershipTypeUnaffiliated. An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization.
	OrgRemoveMemberAuditEntryMembershipTypeUnaffiliated OrgRemoveMemberAuditEntryMembershipType = "UNAFFILIATED"
	// OrgRemoveMemberAuditEntryMembershipTypeOutsideCollaborator. An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
	OrgRemoveMemberAuditEntryMembershipTypeOutsideCollaborator OrgRemoveMemberAuditEntryMembershipType = "OUTSIDE_COLLABORATOR"
)

// OrgRemoveMemberAuditEntryReason represents the reason a member was removed from an Organization.
type OrgRemoveMemberAuditEntryReason string

const (
	// OrgRemoveMemberAuditEntryReasonTwoFactorRequirementNonCompliance. The organization required 2FA of its billing managers and this user did not have 2FA enabled.
	OrgRemoveMemberAuditEntryReasonTwoFactorRequirementNonCompliance OrgRemoveMemberAuditEntryReason = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"
	// OrgRemoveMemberAuditEntryReasonSamlExternalIdentityMissing. SAML external identity missing.
	OrgRemoveMemberAuditEntryReasonSamlExternalIdentityMissing OrgRemoveMemberAuditEntryReason = "SAML_EXTERNAL_IDENTITY_MISSING"
	// OrgRemoveMemberAuditEntryReasonSamlSsoEnforcementRequiresExternalIdentity. SAML SSO enforcement requires an external identity.
	OrgRemoveMemberAuditEntryReasonSamlSsoEnforcementRequiresExternalIdentity OrgRemoveMemberAuditEntryReason = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY"
	// OrgRemoveMemberAuditEntryReasonUserAccountDeleted. User account has been deleted.
	OrgRemoveMemberAuditEntryReasonUserAccountDeleted OrgRemoveMemberAuditEntryReason = "USER_ACCOUNT_DELETED"
	// OrgRemoveMemberAuditEntryReasonTwoFactorAccountRecovery. User was removed from organization during account recovery.
	OrgRemoveMemberAuditEntryReasonTwoFactorAccountRecovery OrgRemoveMemberAuditEntryReason = "TWO_FACTOR_ACCOUNT_RECOVERY"
)

// OrgRemoveOutsideCollaboratorAuditEntryMembershipType represents the type of membership a user has with an Organization.
type OrgRemoveOutsideCollaboratorAuditEntryMembershipType string

const (
	// OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeOutsideCollaborator. An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
	OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeOutsideCollaborator OrgRemoveOutsideCollaboratorAuditEntryMembershipType = "OUTSIDE_COLLABORATOR"
	// OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeUnaffiliated. An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization.
	OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeUnaffiliated OrgRemoveOutsideCollaboratorAuditEntryMembershipType = "UNAFFILIATED"
	// OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeBillingManager. A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
	OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeBillingManager OrgRemoveOutsideCollaboratorAuditEntryMembershipType = "BILLING_MANAGER"
)

// OrgRemoveOutsideCollaboratorAuditEntryReason represents the reason an outside collaborator was removed from an Organization.
type OrgRemoveOutsideCollaboratorAuditEntryReason string

const (
	// OrgRemoveOutsideCollaboratorAuditEntryReasonTwoFactorRequirementNonCompliance. The organization required 2FA of its billing managers and this user did not have 2FA enabled.
	OrgRemoveOutsideCollaboratorAuditEntryReasonTwoFactorRequirementNonCompliance OrgRemoveOutsideCollaboratorAuditEntryReason = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"
	// OrgRemoveOutsideCollaboratorAuditEntryReasonSamlExternalIdentityMissing. SAML external identity missing.
	OrgRemoveOutsideCollaboratorAuditEntryReasonSamlExternalIdentityMissing OrgRemoveOutsideCollaboratorAuditEntryReason = "SAML_EXTERNAL_IDENTITY_MISSING"
)

// OrgUpdateDefaultRepositoryPermissionAuditEntryPermission represents the default permission a repository can have in an Organization.
type OrgUpdateDefaultRepositoryPermissionAuditEntryPermission string

const (
	// OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionRead. Can read and clone repositories.
	OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionRead OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = "READ"
	// OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionWrite. Can read, clone and push to repositories.
	OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionWrite OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = "WRITE"
	// OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionAdmin. Can read, clone, push, and add collaborators to repositories.
	OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionAdmin OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = "ADMIN"
	// OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionNone. No default permission value.
	OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionNone OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = "NONE"
)

// OrgUpdateMemberAuditEntryPermission represents the permissions available to members on an Organization.
type OrgUpdateMemberAuditEntryPermission string

const (
	// OrgUpdateMemberAuditEntryPermissionRead. Can read and clone repositories.
	OrgUpdateMemberAuditEntryPermissionRead OrgUpdateMemberAuditEntryPermission = "READ"
	// OrgUpdateMemberAuditEntryPermissionAdmin. Can read, clone, push, and add collaborators to repositories.
	OrgUpdateMemberAuditEntryPermissionAdmin OrgUpdateMemberAuditEntryPermission = "ADMIN"
)

// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility represents the permissions available for repository creation on an Organization.
type OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility string

const (
	// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityAll. All organization members are restricted from creating any repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityAll OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "ALL"
	// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublic. All organization members are restricted from creating public repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublic OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PUBLIC"
	// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityNone. All organization members are allowed to create any repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityNone OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "NONE"
	// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPrivate. All organization members are restricted from creating private repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPrivate OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PRIVATE"
	// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityInternal. All organization members are restricted from creating internal repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityInternal OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "INTERNAL"
	// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublicInternal. All organization members are restricted from creating public or internal repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublicInternal OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PUBLIC_INTERNAL"
	// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPrivateInternal. All organization members are restricted from creating private or internal repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPrivateInternal OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PRIVATE_INTERNAL"
	// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublicPrivate. All organization members are restricted from creating public or private repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublicPrivate OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PUBLIC_PRIVATE"
)

// OrganizationInvitationRole represents the possible organization invitation roles.
type OrganizationInvitationRole string

const (
	// OrganizationInvitationRoleDirectMember. The user is invited to be a direct member of the organization.
	OrganizationInvitationRoleDirectMember OrganizationInvitationRole = "DIRECT_MEMBER"
	// OrganizationInvitationRoleAdmin. The user is invited to be an admin of the organization.
	OrganizationInvitationRoleAdmin OrganizationInvitationRole = "ADMIN"
	// OrganizationInvitationRoleBillingManager. The user is invited to be a billing manager of the organization.
	OrganizationInvitationRoleBillingManager OrganizationInvitationRole = "BILLING_MANAGER"
	// OrganizationInvitationRoleReinstate. The user's previous role will be reinstated.
	OrganizationInvitationRoleReinstate OrganizationInvitationRole = "REINSTATE"
)

// OrganizationInvitationSource represents the possible organization invitation sources.
type OrganizationInvitationSource string

const (
	// OrganizationInvitationSourceUnknown. The invitation was sent before this feature was added.
	OrganizationInvitationSourceUnknown OrganizationInvitationSource = "UNKNOWN"
	// OrganizationInvitationSourceMember. The invitation was created from the web interface or from API.
	OrganizationInvitationSourceMember OrganizationInvitationSource = "MEMBER"
	// OrganizationInvitationSourceScim. The invitation was created from SCIM.
	OrganizationInvitationSourceScim OrganizationInvitationSource = "SCIM"
)

// OrganizationInvitationType represents the possible organization invitation types.
type OrganizationInvitationType string

const (
	// OrganizationInvitationTypeUser. The invitation was to an existing user.
	OrganizationInvitationTypeUser OrganizationInvitationType = "USER"
	// OrganizationInvitationTypeEmail. The invitation was to an email address.
	OrganizationInvitationTypeEmail OrganizationInvitationType = "EMAIL"
)

// OrganizationMemberRole represents the possible roles within an organization for its members.
type OrganizationMemberRole string

const (
	// OrganizationMemberRoleMember. The user is a member of the organization.
	OrganizationMemberRoleMember OrganizationMemberRole = "MEMBER"
	// OrganizationMemberRoleAdmin. The user is an administrator of the organization.
	OrganizationMemberRoleAdmin OrganizationMemberRole = "ADMIN"
)

// OrganizationMembersCanCreateRepositoriesSettingValue represents the possible values for the members can create repositories setting on an organization.
type OrganizationMembersCanCreateRepositoriesSettingValue string

const (
	// OrganizationMembersCanCreateRepositoriesSettingValueAll. Members will be able to create public and private repositories.
	OrganizationMembersCanCreateRepositoriesSettingValueAll OrganizationMembersCanCreateRepositoriesSettingValue = "ALL"
	// OrganizationMembersCanCreateRepositoriesSettingValuePrivate. Members will be able to create only private repositories.
	OrganizationMembersCanCreateRepositoriesSettingValuePrivate OrganizationMembersCanCreateRepositoriesSettingValue = "PRIVATE"
	// OrganizationMembersCanCreateRepositoriesSettingValueInternal. Members will be able to create only internal repositories.
	OrganizationMembersCanCreateRepositoriesSettingValueInternal OrganizationMembersCanCreateRepositoriesSettingValue = "INTERNAL"
	// OrganizationMembersCanCreateRepositoriesSettingValueDisabled. Members will not be able to create public or private repositories.
	OrganizationMembersCanCreateRepositoriesSettingValueDisabled OrganizationMembersCanCreateRepositoriesSettingValue = "DISABLED"
)

// OrganizationMigrationState represents the Octoshift Organization migration state.
type OrganizationMigrationState string

const (
	// OrganizationMigrationStateNotStarted. The Octoshift migration has not started.
	OrganizationMigrationStateNotStarted OrganizationMigrationState = "NOT_STARTED"
	// OrganizationMigrationStateQueued. The Octoshift migration has been queued.
	OrganizationMigrationStateQueued OrganizationMigrationState = "QUEUED"
	// OrganizationMigrationStateInProgress. The Octoshift migration is in progress.
	OrganizationMigrationStateInProgress OrganizationMigrationState = "IN_PROGRESS"
	// OrganizationMigrationStatePreRepoMigration. The Octoshift migration is performing pre repository migrations.
	OrganizationMigrationStatePreRepoMigration OrganizationMigrationState = "PRE_REPO_MIGRATION"
	// OrganizationMigrationStateRepoMigration. The Octoshift org migration is performing repository migrations.
	OrganizationMigrationStateRepoMigration OrganizationMigrationState = "REPO_MIGRATION"
	// OrganizationMigrationStatePostRepoMigration. The Octoshift migration is performing post repository migrations.
	OrganizationMigrationStatePostRepoMigration OrganizationMigrationState = "POST_REPO_MIGRATION"
	// OrganizationMigrationStateSucceeded. The Octoshift migration has succeeded.
	OrganizationMigrationStateSucceeded OrganizationMigrationState = "SUCCEEDED"
	// OrganizationMigrationStateFailed. The Octoshift migration has failed.
	OrganizationMigrationStateFailed OrganizationMigrationState = "FAILED"
	// OrganizationMigrationStatePendingValidation. The Octoshift migration needs to have its credentials validated.
	OrganizationMigrationStatePendingValidation OrganizationMigrationState = "PENDING_VALIDATION"
	// OrganizationMigrationStateFailedValidation. The Octoshift migration has invalid credentials.
	OrganizationMigrationStateFailedValidation OrganizationMigrationState = "FAILED_VALIDATION"
)

// OrganizationOrder represents ordering options for organization connections.
type OrganizationOrder struct {
	// The field to order organizations by.
	Field OrganizationOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that OrganizationOrder implements the Input interface.
var _ Input = (*OrganizationOrder)(nil)

// isInput implements the Input interface.
func (OrganizationOrder) isInput() {}

// OrganizationOrderField represents properties by which organization connections can be ordered.
type OrganizationOrderField string

const (
	// OrganizationOrderFieldCreatedAt. Order organizations by creation time.
	OrganizationOrderFieldCreatedAt OrganizationOrderField = "CREATED_AT"
	// OrganizationOrderFieldLogin. Order organizations by login.
	OrganizationOrderFieldLogin OrganizationOrderField = "LOGIN"
)

// PackageFileOrder represents ways in which lists of package files can be ordered upon return.
type PackageFileOrder struct {
	// The field in which to order package files by.
	Field *PackageFileOrderField "json:\"field\""
	// The direction in which to order package files by the specified field.
	Direction *OrderDirection "json:\"direction\""
}

// Compile-time assertion that PackageFileOrder implements the Input interface.
var _ Input = (*PackageFileOrder)(nil)

// isInput implements the Input interface.
func (PackageFileOrder) isInput() {}

// PackageFileOrderField represents properties by which package file connections can be ordered.
type PackageFileOrderField string

const (
	// PackageFileOrderFieldCreatedAt. Order package files by creation time.
	PackageFileOrderFieldCreatedAt PackageFileOrderField = "CREATED_AT"
)

// PackageOrder represents ways in which lists of packages can be ordered upon return.
type PackageOrder struct {
	// The field in which to order packages by.
	Field *PackageOrderField "json:\"field\""
	// The direction in which to order packages by the specified field.
	Direction *OrderDirection "json:\"direction\""
}

// Compile-time assertion that PackageOrder implements the Input interface.
var _ Input = (*PackageOrder)(nil)

// isInput implements the Input interface.
func (PackageOrder) isInput() {}

// PackageOrderField represents properties by which package connections can be ordered.
type PackageOrderField string

const (
	// PackageOrderFieldCreatedAt. Order packages by creation time.
	PackageOrderFieldCreatedAt PackageOrderField = "CREATED_AT"
)

// PackageType represents the possible types of a package.
type PackageType string

const (
	// PackageTypeNpm. An npm package.
	PackageTypeNpm PackageType = "NPM"
	// PackageTypeRubygems. A rubygems package.
	PackageTypeRubygems PackageType = "RUBYGEMS"
	// PackageTypeMaven. A maven package.
	PackageTypeMaven PackageType = "MAVEN"
	// PackageTypeDocker. A docker image.
	PackageTypeDocker PackageType = "DOCKER"
	// PackageTypeDebian. A debian package.
	PackageTypeDebian PackageType = "DEBIAN"
	// PackageTypeNuget. A nuget package.
	PackageTypeNuget PackageType = "NUGET"
	// PackageTypePypi. A python package.
	PackageTypePypi PackageType = "PYPI"
)

// PackageVersionOrder represents ways in which lists of package versions can be ordered upon return.
type PackageVersionOrder struct {
	// The field in which to order package versions by.
	Field *PackageVersionOrderField "json:\"field\""
	// The direction in which to order package versions by the specified field.
	Direction *OrderDirection "json:\"direction\""
}

// Compile-time assertion that PackageVersionOrder implements the Input interface.
var _ Input = (*PackageVersionOrder)(nil)

// isInput implements the Input interface.
func (PackageVersionOrder) isInput() {}

// PackageVersionOrderField represents properties by which package version connections can be ordered.
type PackageVersionOrderField string

const (
	// PackageVersionOrderFieldCreatedAt. Order package versions by creation time.
	PackageVersionOrderFieldCreatedAt PackageVersionOrderField = "CREATED_AT"
)

// PatchStatus represents the possible types of patch statuses.
type PatchStatus string

const (
	// PatchStatusAdded. The file was added. Git status 'A'.
	PatchStatusAdded PatchStatus = "ADDED"
	// PatchStatusDeleted. The file was deleted. Git status 'D'.
	PatchStatusDeleted PatchStatus = "DELETED"
	// PatchStatusRenamed. The file was renamed. Git status 'R'.
	PatchStatusRenamed PatchStatus = "RENAMED"
	// PatchStatusCopied. The file was copied. Git status 'C'.
	PatchStatusCopied PatchStatus = "COPIED"
	// PatchStatusModified. The file's contents were changed. Git status 'M'.
	PatchStatusModified PatchStatus = "MODIFIED"
	// PatchStatusChanged. The file's type was changed. Git status 'T'.
	PatchStatusChanged PatchStatus = "CHANGED"
)

// PinIssueInput is an autogenerated input type of PinIssue.
type PinIssueInput struct {
	// The ID of the issue to be pinned.
	IssueID ID "json:\"issueId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that PinIssueInput implements the Input interface.
var _ Input = (*PinIssueInput)(nil)

// isInput implements the Input interface.
func (PinIssueInput) isInput() {}

// PinnableItemType represents represents items that can be pinned to a profile page or dashboard.
type PinnableItemType string

const (
	// PinnableItemTypeRepository. A repository.
	PinnableItemTypeRepository PinnableItemType = "REPOSITORY"
	// PinnableItemTypeGist. A gist.
	PinnableItemTypeGist PinnableItemType = "GIST"
	// PinnableItemTypeIssue. An issue.
	PinnableItemTypeIssue PinnableItemType = "ISSUE"
	// PinnableItemTypeProject. A project.
	PinnableItemTypeProject PinnableItemType = "PROJECT"
	// PinnableItemTypePullRequest. A pull request.
	PinnableItemTypePullRequest PinnableItemType = "PULL_REQUEST"
	// PinnableItemTypeUser. A user.
	PinnableItemTypeUser PinnableItemType = "USER"
	// PinnableItemTypeOrganization. An organization.
	PinnableItemTypeOrganization PinnableItemType = "ORGANIZATION"
	// PinnableItemTypeTeam. A team.
	PinnableItemTypeTeam PinnableItemType = "TEAM"
)

// PinnedDiscussionGradient represents preconfigured gradients that may be used to style discussions pinned within a repository.
type PinnedDiscussionGradient string

const (
	// PinnedDiscussionGradientRedOrange. A gradient of red to orange.
	PinnedDiscussionGradientRedOrange PinnedDiscussionGradient = "RED_ORANGE"
	// PinnedDiscussionGradientBlueMint. A gradient of blue to mint.
	PinnedDiscussionGradientBlueMint PinnedDiscussionGradient = "BLUE_MINT"
	// PinnedDiscussionGradientBluePurple. A gradient of blue to purple.
	PinnedDiscussionGradientBluePurple PinnedDiscussionGradient = "BLUE_PURPLE"
	// PinnedDiscussionGradientPinkBlue. A gradient of pink to blue.
	PinnedDiscussionGradientPinkBlue PinnedDiscussionGradient = "PINK_BLUE"
	// PinnedDiscussionGradientPurpleCoral. A gradient of purple to coral.
	PinnedDiscussionGradientPurpleCoral PinnedDiscussionGradient = "PURPLE_CORAL"
)

// PinnedDiscussionPattern represents preconfigured background patterns that may be used to style discussions pinned within a repository.
type PinnedDiscussionPattern string

const (
	// PinnedDiscussionPatternDotFill. A solid dot pattern.
	PinnedDiscussionPatternDotFill PinnedDiscussionPattern = "DOT_FILL"
	// PinnedDiscussionPatternPlus. A plus sign pattern.
	PinnedDiscussionPatternPlus PinnedDiscussionPattern = "PLUS"
	// PinnedDiscussionPatternZap. A lightning bolt pattern.
	PinnedDiscussionPatternZap PinnedDiscussionPattern = "ZAP"
	// PinnedDiscussionPatternChevronUp. An upward-facing chevron pattern.
	PinnedDiscussionPatternChevronUp PinnedDiscussionPattern = "CHEVRON_UP"
	// PinnedDiscussionPatternDot. A hollow dot pattern.
	PinnedDiscussionPatternDot PinnedDiscussionPattern = "DOT"
	// PinnedDiscussionPatternHeartFill. A heart pattern.
	PinnedDiscussionPatternHeartFill PinnedDiscussionPattern = "HEART_FILL"
)

// ProjectCardArchivedState represents the possible archived states of a project card.
type ProjectCardArchivedState string

const (
	// ProjectCardArchivedStateArchived. A project card that is archived.
	ProjectCardArchivedStateArchived ProjectCardArchivedState = "ARCHIVED"
	// ProjectCardArchivedStateNotArchived. A project card that is not archived.
	ProjectCardArchivedStateNotArchived ProjectCardArchivedState = "NOT_ARCHIVED"
)

// ProjectCardState represents various content states of a ProjectCard.
type ProjectCardState string

const (
	// ProjectCardStateContentOnly. The card has content only.
	ProjectCardStateContentOnly ProjectCardState = "CONTENT_ONLY"
	// ProjectCardStateNoteOnly. The card has a note only.
	ProjectCardStateNoteOnly ProjectCardState = "NOTE_ONLY"
	// ProjectCardStateRedacted. The card is redacted.
	ProjectCardStateRedacted ProjectCardState = "REDACTED"
)

// ProjectColumnPurpose represents the semantic purpose of the column - todo, in progress, or done.
type ProjectColumnPurpose string

const (
	// ProjectColumnPurposeTodo. The column contains cards still to be worked on.
	ProjectColumnPurposeTodo ProjectColumnPurpose = "TODO"
	// ProjectColumnPurposeInProgress. The column contains cards which are currently being worked on.
	ProjectColumnPurposeInProgress ProjectColumnPurpose = "IN_PROGRESS"
	// ProjectColumnPurposeDone. The column contains cards which are complete.
	ProjectColumnPurposeDone ProjectColumnPurpose = "DONE"
)

// ProjectOrder represents ways in which lists of projects can be ordered upon return.
type ProjectOrder struct {
	// The field in which to order projects by.
	Field ProjectOrderField "json:\"field\""
	// The direction in which to order projects by the specified field.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that ProjectOrder implements the Input interface.
var _ Input = (*ProjectOrder)(nil)

// isInput implements the Input interface.
func (ProjectOrder) isInput() {}

// ProjectOrderField represents properties by which project connections can be ordered.
type ProjectOrderField string

const (
	// ProjectOrderFieldCreatedAt. Order projects by creation time.
	ProjectOrderFieldCreatedAt ProjectOrderField = "CREATED_AT"
	// ProjectOrderFieldUpdatedAt. Order projects by update time.
	ProjectOrderFieldUpdatedAt ProjectOrderField = "UPDATED_AT"
	// ProjectOrderFieldName. Order projects by name.
	ProjectOrderFieldName ProjectOrderField = "NAME"
)

// ProjectState represents state of the project; either 'open' or 'closed'.
type ProjectState string

const (
	// ProjectStateOpen. The project is open.
	ProjectStateOpen ProjectState = "OPEN"
	// ProjectStateClosed. The project is closed.
	ProjectStateClosed ProjectState = "CLOSED"
)

// ProjectTemplate represents gitHub-provided templates for Projects.
type ProjectTemplate string

const (
	// ProjectTemplateBasicKanban. Create a board with columns for To do, In progress and Done.
	ProjectTemplateBasicKanban ProjectTemplate = "BASIC_KANBAN"
	// ProjectTemplateAutomatedKanbanV2. Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
	ProjectTemplateAutomatedKanbanV2 ProjectTemplate = "AUTOMATED_KANBAN_V2"
	// ProjectTemplateAutomatedReviewsKanban. Create a board with triggers to automatically move cards across columns with review automation.
	ProjectTemplateAutomatedReviewsKanban ProjectTemplate = "AUTOMATED_REVIEWS_KANBAN"
	// ProjectTemplateBugTriage. Create a board to triage and prioritize bugs with To do, priority, and Done columns.
	ProjectTemplateBugTriage ProjectTemplate = "BUG_TRIAGE"
)

// ProjectV2CustomFieldType represents the type of a project field.
type ProjectV2CustomFieldType string

const (
	// ProjectV2CustomFieldTypeText. Text.
	ProjectV2CustomFieldTypeText ProjectV2CustomFieldType = "TEXT"
	// ProjectV2CustomFieldTypeSingleSelect. Single Select.
	ProjectV2CustomFieldTypeSingleSelect ProjectV2CustomFieldType = "SINGLE_SELECT"
	// ProjectV2CustomFieldTypeNumber. Number.
	ProjectV2CustomFieldTypeNumber ProjectV2CustomFieldType = "NUMBER"
	// ProjectV2CustomFieldTypeDate. Date.
	ProjectV2CustomFieldTypeDate ProjectV2CustomFieldType = "DATE"
)

// ProjectV2FieldOrder represents ordering options for project v2 field connections.
type ProjectV2FieldOrder struct {
	// The field to order the project v2 fields by.
	Field ProjectV2FieldOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that ProjectV2FieldOrder implements the Input interface.
var _ Input = (*ProjectV2FieldOrder)(nil)

// isInput implements the Input interface.
func (ProjectV2FieldOrder) isInput() {}

// ProjectV2FieldOrderField represents properties by which project v2 field connections can be ordered.
type ProjectV2FieldOrderField string

const (
	// ProjectV2FieldOrderFieldPosition. Order project v2 fields by position.
	ProjectV2FieldOrderFieldPosition ProjectV2FieldOrderField = "POSITION"
	// ProjectV2FieldOrderFieldCreatedAt. Order project v2 fields by creation time.
	ProjectV2FieldOrderFieldCreatedAt ProjectV2FieldOrderField = "CREATED_AT"
	// ProjectV2FieldOrderFieldName. Order project v2 fields by name.
	ProjectV2FieldOrderFieldName ProjectV2FieldOrderField = "NAME"
)

// ProjectV2FieldType represents the type of a project field.
type ProjectV2FieldType string

const (
	// ProjectV2FieldTypeAssignees. Assignees.
	ProjectV2FieldTypeAssignees ProjectV2FieldType = "ASSIGNEES"
	// ProjectV2FieldTypeLinkedPullRequests. Linked Pull Requests.
	ProjectV2FieldTypeLinkedPullRequests ProjectV2FieldType = "LINKED_PULL_REQUESTS"
	// ProjectV2FieldTypeReviewers. Reviewers.
	ProjectV2FieldTypeReviewers ProjectV2FieldType = "REVIEWERS"
	// ProjectV2FieldTypeLabels. Labels.
	ProjectV2FieldTypeLabels ProjectV2FieldType = "LABELS"
	// ProjectV2FieldTypeMilestone. Milestone.
	ProjectV2FieldTypeMilestone ProjectV2FieldType = "MILESTONE"
	// ProjectV2FieldTypeRepository. Repository.
	ProjectV2FieldTypeRepository ProjectV2FieldType = "REPOSITORY"
	// ProjectV2FieldTypeTitle. Title.
	ProjectV2FieldTypeTitle ProjectV2FieldType = "TITLE"
	// ProjectV2FieldTypeText. Text.
	ProjectV2FieldTypeText ProjectV2FieldType = "TEXT"
	// ProjectV2FieldTypeSingleSelect. Single Select.
	ProjectV2FieldTypeSingleSelect ProjectV2FieldType = "SINGLE_SELECT"
	// ProjectV2FieldTypeNumber. Number.
	ProjectV2FieldTypeNumber ProjectV2FieldType = "NUMBER"
	// ProjectV2FieldTypeDate. Date.
	ProjectV2FieldTypeDate ProjectV2FieldType = "DATE"
	// ProjectV2FieldTypeIteration. Iteration.
	ProjectV2FieldTypeIteration ProjectV2FieldType = "ITERATION"
	// ProjectV2FieldTypeTracks. Tracks.
	ProjectV2FieldTypeTracks ProjectV2FieldType = "TRACKS"
	// ProjectV2FieldTypeTrackedBy. Tracked by.
	ProjectV2FieldTypeTrackedBy ProjectV2FieldType = "TRACKED_BY"
)

// ProjectV2FieldValue represents the values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
type ProjectV2FieldValue struct {
	// The text to set on the field.
	Text *string "json:\"text\""
	// The number to set on the field.
	Number *float64 "json:\"number\""
	// The ISO 8601 date to set on the field.
	Date *Date "json:\"date\""
	// The id of the single select option to set on the field.
	SingleSelectOptionID *string "json:\"singleSelectOptionId\""
	// The id of the iteration to set on the field.
	IterationID *string "json:\"iterationId\""
}

// Compile-time assertion that ProjectV2FieldValue implements the Input interface.
var _ Input = (*ProjectV2FieldValue)(nil)

// isInput implements the Input interface.
func (ProjectV2FieldValue) isInput() {}

// ProjectV2Filters represents ways in which to filter lists of projects.
type ProjectV2Filters struct {
	// List project v2 filtered by the state given.
	State *ProjectV2State "json:\"state\""
}

// Compile-time assertion that ProjectV2Filters implements the Input interface.
var _ Input = (*ProjectV2Filters)(nil)

// isInput implements the Input interface.
func (ProjectV2Filters) isInput() {}

// ProjectV2ItemFieldValueOrder represents ordering options for project v2 item field value connections.
type ProjectV2ItemFieldValueOrder struct {
	// The field to order the project v2 item field values by.
	Field ProjectV2ItemFieldValueOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that ProjectV2ItemFieldValueOrder implements the Input interface.
var _ Input = (*ProjectV2ItemFieldValueOrder)(nil)

// isInput implements the Input interface.
func (ProjectV2ItemFieldValueOrder) isInput() {}

// ProjectV2ItemFieldValueOrderField represents properties by which project v2 item field value connections can be ordered.
type ProjectV2ItemFieldValueOrderField string

const (
	// ProjectV2ItemFieldValueOrderFieldPosition. Order project v2 item field values by the their position in the project.
	ProjectV2ItemFieldValueOrderFieldPosition ProjectV2ItemFieldValueOrderField = "POSITION"
)

// ProjectV2ItemOrder represents ordering options for project v2 item connections.
type ProjectV2ItemOrder struct {
	// The field to order the project v2 items by.
	Field ProjectV2ItemOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that ProjectV2ItemOrder implements the Input interface.
var _ Input = (*ProjectV2ItemOrder)(nil)

// isInput implements the Input interface.
func (ProjectV2ItemOrder) isInput() {}

// ProjectV2ItemOrderField represents properties by which project v2 item connections can be ordered.
type ProjectV2ItemOrderField string

const (
	// ProjectV2ItemOrderFieldPosition. Order project v2 items by the their position in the project.
	ProjectV2ItemOrderFieldPosition ProjectV2ItemOrderField = "POSITION"
)

// ProjectV2ItemType represents the type of a project item.
type ProjectV2ItemType string

const (
	// ProjectV2ItemTypeIssue. Issue.
	ProjectV2ItemTypeIssue ProjectV2ItemType = "ISSUE"
	// ProjectV2ItemTypePullRequest. Pull Request.
	ProjectV2ItemTypePullRequest ProjectV2ItemType = "PULL_REQUEST"
	// ProjectV2ItemTypeDraftIssue. Draft Issue.
	ProjectV2ItemTypeDraftIssue ProjectV2ItemType = "DRAFT_ISSUE"
	// ProjectV2ItemTypeRedacted. Redacted Item.
	ProjectV2ItemTypeRedacted ProjectV2ItemType = "REDACTED"
)

// ProjectV2Order represents ways in which lists of projects can be ordered upon return.
type ProjectV2Order struct {
	// The field in which to order projects by.
	Field ProjectV2OrderField "json:\"field\""
	// The direction in which to order projects by the specified field.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that ProjectV2Order implements the Input interface.
var _ Input = (*ProjectV2Order)(nil)

// isInput implements the Input interface.
func (ProjectV2Order) isInput() {}

// ProjectV2OrderField represents properties by which projects can be ordered.
type ProjectV2OrderField string

const (
	// ProjectV2OrderFieldTitle. The project's title.
	ProjectV2OrderFieldTitle ProjectV2OrderField = "TITLE"
	// ProjectV2OrderFieldNumber. The project's number.
	ProjectV2OrderFieldNumber ProjectV2OrderField = "NUMBER"
	// ProjectV2OrderFieldUpdatedAt. The project's date and time of update.
	ProjectV2OrderFieldUpdatedAt ProjectV2OrderField = "UPDATED_AT"
	// ProjectV2OrderFieldCreatedAt. The project's date and time of creation.
	ProjectV2OrderFieldCreatedAt ProjectV2OrderField = "CREATED_AT"
)

// ProjectV2SingleSelectFieldOptionColor represents the display color of a single-select field option.
type ProjectV2SingleSelectFieldOptionColor string

const (
	// ProjectV2SingleSelectFieldOptionColorGray. GRAY.
	ProjectV2SingleSelectFieldOptionColorGray ProjectV2SingleSelectFieldOptionColor = "GRAY"
	// ProjectV2SingleSelectFieldOptionColorBlue. BLUE.
	ProjectV2SingleSelectFieldOptionColorBlue ProjectV2SingleSelectFieldOptionColor = "BLUE"
	// ProjectV2SingleSelectFieldOptionColorGreen. GREEN.
	ProjectV2SingleSelectFieldOptionColorGreen ProjectV2SingleSelectFieldOptionColor = "GREEN"
	// ProjectV2SingleSelectFieldOptionColorYellow. YELLOW.
	ProjectV2SingleSelectFieldOptionColorYellow ProjectV2SingleSelectFieldOptionColor = "YELLOW"
	// ProjectV2SingleSelectFieldOptionColorOrange. ORANGE.
	ProjectV2SingleSelectFieldOptionColorOrange ProjectV2SingleSelectFieldOptionColor = "ORANGE"
	// ProjectV2SingleSelectFieldOptionColorRed. RED.
	ProjectV2SingleSelectFieldOptionColorRed ProjectV2SingleSelectFieldOptionColor = "RED"
	// ProjectV2SingleSelectFieldOptionColorPink. PINK.
	ProjectV2SingleSelectFieldOptionColorPink ProjectV2SingleSelectFieldOptionColor = "PINK"
	// ProjectV2SingleSelectFieldOptionColorPurple. PURPLE.
	ProjectV2SingleSelectFieldOptionColorPurple ProjectV2SingleSelectFieldOptionColor = "PURPLE"
)

// ProjectV2SingleSelectFieldOptionInput represents represents a single select field option.
type ProjectV2SingleSelectFieldOptionInput struct {
	// The name of the option.
	Name string "json:\"name\""
	// The display color of the option.
	Color ProjectV2SingleSelectFieldOptionColor "json:\"color\""
	// The description text of the option.
	Description string "json:\"description\""
}

// Compile-time assertion that ProjectV2SingleSelectFieldOptionInput implements the Input interface.
var _ Input = (*ProjectV2SingleSelectFieldOptionInput)(nil)

// isInput implements the Input interface.
func (ProjectV2SingleSelectFieldOptionInput) isInput() {}

// ProjectV2State represents the possible states of a project v2.
type ProjectV2State string

const (
	// ProjectV2StateOpen. A project v2 that is still open.
	ProjectV2StateOpen ProjectV2State = "OPEN"
	// ProjectV2StateClosed. A project v2 that has been closed.
	ProjectV2StateClosed ProjectV2State = "CLOSED"
)

// ProjectV2ViewLayout represents the layout of a project v2 view.
type ProjectV2ViewLayout string

const (
	// ProjectV2ViewLayoutBoardLayout. Board layout.
	ProjectV2ViewLayoutBoardLayout ProjectV2ViewLayout = "BOARD_LAYOUT"
	// ProjectV2ViewLayoutTableLayout. Table layout.
	ProjectV2ViewLayoutTableLayout ProjectV2ViewLayout = "TABLE_LAYOUT"
	// ProjectV2ViewLayoutRoadmapLayout. Roadmap layout.
	ProjectV2ViewLayoutRoadmapLayout ProjectV2ViewLayout = "ROADMAP_LAYOUT"
)

// ProjectV2ViewOrder represents ordering options for project v2 view connections.
type ProjectV2ViewOrder struct {
	// The field to order the project v2 views by.
	Field ProjectV2ViewOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that ProjectV2ViewOrder implements the Input interface.
var _ Input = (*ProjectV2ViewOrder)(nil)

// isInput implements the Input interface.
func (ProjectV2ViewOrder) isInput() {}

// ProjectV2ViewOrderField represents properties by which project v2 view connections can be ordered.
type ProjectV2ViewOrderField string

const (
	// ProjectV2ViewOrderFieldPosition. Order project v2 views by position.
	ProjectV2ViewOrderFieldPosition ProjectV2ViewOrderField = "POSITION"
	// ProjectV2ViewOrderFieldCreatedAt. Order project v2 views by creation time.
	ProjectV2ViewOrderFieldCreatedAt ProjectV2ViewOrderField = "CREATED_AT"
	// ProjectV2ViewOrderFieldName. Order project v2 views by name.
	ProjectV2ViewOrderFieldName ProjectV2ViewOrderField = "NAME"
)

// ProjectV2WorkflowOrder represents ordering options for project v2 workflows connections.
type ProjectV2WorkflowOrder struct {
	// The field to order the project v2 workflows by.
	Field ProjectV2WorkflowsOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that ProjectV2WorkflowOrder implements the Input interface.
var _ Input = (*ProjectV2WorkflowOrder)(nil)

// isInput implements the Input interface.
func (ProjectV2WorkflowOrder) isInput() {}

// ProjectV2WorkflowsOrderField represents properties by which project workflows can be ordered.
type ProjectV2WorkflowsOrderField string

const (
	// ProjectV2WorkflowsOrderFieldName. The workflows' name.
	ProjectV2WorkflowsOrderFieldName ProjectV2WorkflowsOrderField = "NAME"
	// ProjectV2WorkflowsOrderFieldNumber. The workflows' number.
	ProjectV2WorkflowsOrderFieldNumber ProjectV2WorkflowsOrderField = "NUMBER"
	// ProjectV2WorkflowsOrderFieldUpdatedAt. The workflows' date and time of update.
	ProjectV2WorkflowsOrderFieldUpdatedAt ProjectV2WorkflowsOrderField = "UPDATED_AT"
	// ProjectV2WorkflowsOrderFieldCreatedAt. The workflows' date and time of creation.
	ProjectV2WorkflowsOrderFieldCreatedAt ProjectV2WorkflowsOrderField = "CREATED_AT"
)

// PublishSponsorsTierInput is an autogenerated input type of PublishSponsorsTier.
type PublishSponsorsTierInput struct {
	// The ID of the draft tier to publish.
	TierID ID "json:\"tierId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that PublishSponsorsTierInput implements the Input interface.
var _ Input = (*PublishSponsorsTierInput)(nil)

// isInput implements the Input interface.
func (PublishSponsorsTierInput) isInput() {}

// PullRequestMergeMethod represents represents available types of methods to use when merging a pull request.
type PullRequestMergeMethod string

const (
	// PullRequestMergeMethodMerge. Add all commits from the head branch to the base branch with a merge commit.
	PullRequestMergeMethodMerge PullRequestMergeMethod = "MERGE"
	// PullRequestMergeMethodSquash. Combine all commits from the head branch into a single commit in the base branch.
	PullRequestMergeMethodSquash PullRequestMergeMethod = "SQUASH"
	// PullRequestMergeMethodRebase. Add all commits from the head branch onto the base branch individually.
	PullRequestMergeMethodRebase PullRequestMergeMethod = "REBASE"
)

// PullRequestOrder represents ways in which lists of issues can be ordered upon return.
type PullRequestOrder struct {
	// The field in which to order pull requests by.
	Field PullRequestOrderField "json:\"field\""
	// The direction in which to order pull requests by the specified field.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that PullRequestOrder implements the Input interface.
var _ Input = (*PullRequestOrder)(nil)

// isInput implements the Input interface.
func (PullRequestOrder) isInput() {}

// PullRequestOrderField represents properties by which pull_requests connections can be ordered.
type PullRequestOrderField string

const (
	// PullRequestOrderFieldCreatedAt. Order pull_requests by creation time.
	PullRequestOrderFieldCreatedAt PullRequestOrderField = "CREATED_AT"
	// PullRequestOrderFieldUpdatedAt. Order pull_requests by update time.
	PullRequestOrderFieldUpdatedAt PullRequestOrderField = "UPDATED_AT"
)

// PullRequestParametersInput represents require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
type PullRequestParametersInput struct {
	// New, reviewable commits pushed will dismiss previous pull request review approvals.
	DismissStaleReviewsOnPush bool "json:\"dismissStaleReviewsOnPush\""
	// Require an approving review in pull requests that modify files that have a designated code owner.
	RequireCodeOwnerReview bool "json:\"requireCodeOwnerReview\""
	// Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
	RequireLastPushApproval bool "json:\"requireLastPushApproval\""
	// The number of approving reviews that are required before a pull request can be merged.
	RequiredApprovingReviewCount int "json:\"requiredApprovingReviewCount\""
	// All conversations on code must be resolved before a pull request can be merged.
	RequiredReviewThreadResolution bool "json:\"requiredReviewThreadResolution\""
}

// Compile-time assertion that PullRequestParametersInput implements the Input interface.
var _ Input = (*PullRequestParametersInput)(nil)

// isInput implements the Input interface.
func (PullRequestParametersInput) isInput() {}

// PullRequestReviewCommentState represents the possible states of a pull request review comment.
type PullRequestReviewCommentState string

const (
	// PullRequestReviewCommentStatePending. A comment that is part of a pending review.
	PullRequestReviewCommentStatePending PullRequestReviewCommentState = "PENDING"
	// PullRequestReviewCommentStateSubmitted. A comment that is part of a submitted review.
	PullRequestReviewCommentStateSubmitted PullRequestReviewCommentState = "SUBMITTED"
)

// PullRequestReviewDecision represents the review status of a pull request.
type PullRequestReviewDecision string

const (
	// PullRequestReviewDecisionChangesRequested. Changes have been requested on the pull request.
	PullRequestReviewDecisionChangesRequested PullRequestReviewDecision = "CHANGES_REQUESTED"
	// PullRequestReviewDecisionApproved. The pull request has received an approving review.
	PullRequestReviewDecisionApproved PullRequestReviewDecision = "APPROVED"
	// PullRequestReviewDecisionReviewRequired. A review is required before the pull request can be merged.
	PullRequestReviewDecisionReviewRequired PullRequestReviewDecision = "REVIEW_REQUIRED"
)

// PullRequestReviewEvent represents the possible events to perform on a pull request review.
type PullRequestReviewEvent string

const (
	// PullRequestReviewEventComment. Submit general feedback without explicit approval.
	PullRequestReviewEventComment PullRequestReviewEvent = "COMMENT"
	// PullRequestReviewEventApprove. Submit feedback and approve merging these changes.
	PullRequestReviewEventApprove PullRequestReviewEvent = "APPROVE"
	// PullRequestReviewEventRequestChanges. Submit feedback that must be addressed before merging.
	PullRequestReviewEventRequestChanges PullRequestReviewEvent = "REQUEST_CHANGES"
	// PullRequestReviewEventDismiss. Dismiss review so it now longer effects merging.
	PullRequestReviewEventDismiss PullRequestReviewEvent = "DISMISS"
)

// PullRequestReviewState represents the possible states of a pull request review.
type PullRequestReviewState string

const (
	// PullRequestReviewStatePending. A review that has not yet been submitted.
	PullRequestReviewStatePending PullRequestReviewState = "PENDING"
	// PullRequestReviewStateCommented. An informational review.
	PullRequestReviewStateCommented PullRequestReviewState = "COMMENTED"
	// PullRequestReviewStateApproved. A review allowing the pull request to merge.
	PullRequestReviewStateApproved PullRequestReviewState = "APPROVED"
	// PullRequestReviewStateChangesRequested. A review blocking the pull request from merging.
	PullRequestReviewStateChangesRequested PullRequestReviewState = "CHANGES_REQUESTED"
	// PullRequestReviewStateDismissed. A review that has been dismissed.
	PullRequestReviewStateDismissed PullRequestReviewState = "DISMISSED"
)

// PullRequestReviewThreadSubjectType represents the possible subject types of a pull request review comment.
type PullRequestReviewThreadSubjectType string

const (
	// PullRequestReviewThreadSubjectTypeLine. A comment that has been made against the line of a pull request.
	PullRequestReviewThreadSubjectTypeLine PullRequestReviewThreadSubjectType = "LINE"
	// PullRequestReviewThreadSubjectTypeFile. A comment that has been made against the file of a pull request.
	PullRequestReviewThreadSubjectTypeFile PullRequestReviewThreadSubjectType = "FILE"
)

// PullRequestState represents the possible states of a pull request.
type PullRequestState string

const (
	// PullRequestStateOpen. A pull request that is still open.
	PullRequestStateOpen PullRequestState = "OPEN"
	// PullRequestStateClosed. A pull request that has been closed without being merged.
	PullRequestStateClosed PullRequestState = "CLOSED"
	// PullRequestStateMerged. A pull request that has been closed by being merged.
	PullRequestStateMerged PullRequestState = "MERGED"
)

// PullRequestTimelineItemsItemType represents the possible item types found in a timeline.
type PullRequestTimelineItemsItemType string

const (
	// PullRequestTimelineItemsItemTypePullRequestCommit. Represents a Git commit part of a pull request.
	PullRequestTimelineItemsItemTypePullRequestCommit PullRequestTimelineItemsItemType = "PULL_REQUEST_COMMIT"
	// PullRequestTimelineItemsItemTypePullRequestCommitCommentThread. Represents a commit comment thread part of a pull request.
	PullRequestTimelineItemsItemTypePullRequestCommitCommentThread PullRequestTimelineItemsItemType = "PULL_REQUEST_COMMIT_COMMENT_THREAD"
	// PullRequestTimelineItemsItemTypePullRequestReview. A review object for a given pull request.
	PullRequestTimelineItemsItemTypePullRequestReview PullRequestTimelineItemsItemType = "PULL_REQUEST_REVIEW"
	// PullRequestTimelineItemsItemTypePullRequestReviewThread. A threaded list of comments for a given pull request.
	PullRequestTimelineItemsItemTypePullRequestReviewThread PullRequestTimelineItemsItemType = "PULL_REQUEST_REVIEW_THREAD"
	// PullRequestTimelineItemsItemTypePullRequestRevisionMarker. Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
	PullRequestTimelineItemsItemTypePullRequestRevisionMarker PullRequestTimelineItemsItemType = "PULL_REQUEST_REVISION_MARKER"
	// PullRequestTimelineItemsItemTypeAutomaticBaseChangeFailedEvent. Represents a 'automatic_base_change_failed' event on a given pull request.
	PullRequestTimelineItemsItemTypeAutomaticBaseChangeFailedEvent PullRequestTimelineItemsItemType = "AUTOMATIC_BASE_CHANGE_FAILED_EVENT"
	// PullRequestTimelineItemsItemTypeAutomaticBaseChangeSucceededEvent. Represents a 'automatic_base_change_succeeded' event on a given pull request.
	PullRequestTimelineItemsItemTypeAutomaticBaseChangeSucceededEvent PullRequestTimelineItemsItemType = "AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT"
	// PullRequestTimelineItemsItemTypeAutoMergeDisabledEvent. Represents a 'auto_merge_disabled' event on a given pull request.
	PullRequestTimelineItemsItemTypeAutoMergeDisabledEvent PullRequestTimelineItemsItemType = "AUTO_MERGE_DISABLED_EVENT"
	// PullRequestTimelineItemsItemTypeAutoMergeEnabledEvent. Represents a 'auto_merge_enabled' event on a given pull request.
	PullRequestTimelineItemsItemTypeAutoMergeEnabledEvent PullRequestTimelineItemsItemType = "AUTO_MERGE_ENABLED_EVENT"
	// PullRequestTimelineItemsItemTypeAutoRebaseEnabledEvent. Represents a 'auto_rebase_enabled' event on a given pull request.
	PullRequestTimelineItemsItemTypeAutoRebaseEnabledEvent PullRequestTimelineItemsItemType = "AUTO_REBASE_ENABLED_EVENT"
	// PullRequestTimelineItemsItemTypeAutoSquashEnabledEvent. Represents a 'auto_squash_enabled' event on a given pull request.
	PullRequestTimelineItemsItemTypeAutoSquashEnabledEvent PullRequestTimelineItemsItemType = "AUTO_SQUASH_ENABLED_EVENT"
	// PullRequestTimelineItemsItemTypeBaseRefChangedEvent. Represents a 'base_ref_changed' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeBaseRefChangedEvent PullRequestTimelineItemsItemType = "BASE_REF_CHANGED_EVENT"
	// PullRequestTimelineItemsItemTypeBaseRefForcePushedEvent. Represents a 'base_ref_force_pushed' event on a given pull request.
	PullRequestTimelineItemsItemTypeBaseRefForcePushedEvent PullRequestTimelineItemsItemType = "BASE_REF_FORCE_PUSHED_EVENT"
	// PullRequestTimelineItemsItemTypeBaseRefDeletedEvent. Represents a 'base_ref_deleted' event on a given pull request.
	PullRequestTimelineItemsItemTypeBaseRefDeletedEvent PullRequestTimelineItemsItemType = "BASE_REF_DELETED_EVENT"
	// PullRequestTimelineItemsItemTypeDeployedEvent. Represents a 'deployed' event on a given pull request.
	PullRequestTimelineItemsItemTypeDeployedEvent PullRequestTimelineItemsItemType = "DEPLOYED_EVENT"
	// PullRequestTimelineItemsItemTypeDeploymentEnvironmentChangedEvent. Represents a 'deployment_environment_changed' event on a given pull request.
	PullRequestTimelineItemsItemTypeDeploymentEnvironmentChangedEvent PullRequestTimelineItemsItemType = "DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT"
	// PullRequestTimelineItemsItemTypeHeadRefDeletedEvent. Represents a 'head_ref_deleted' event on a given pull request.
	PullRequestTimelineItemsItemTypeHeadRefDeletedEvent PullRequestTimelineItemsItemType = "HEAD_REF_DELETED_EVENT"
	// PullRequestTimelineItemsItemTypeHeadRefForcePushedEvent. Represents a 'head_ref_force_pushed' event on a given pull request.
	PullRequestTimelineItemsItemTypeHeadRefForcePushedEvent PullRequestTimelineItemsItemType = "HEAD_REF_FORCE_PUSHED_EVENT"
	// PullRequestTimelineItemsItemTypeHeadRefRestoredEvent. Represents a 'head_ref_restored' event on a given pull request.
	PullRequestTimelineItemsItemTypeHeadRefRestoredEvent PullRequestTimelineItemsItemType = "HEAD_REF_RESTORED_EVENT"
	// PullRequestTimelineItemsItemTypeMergedEvent. Represents a 'merged' event on a given pull request.
	PullRequestTimelineItemsItemTypeMergedEvent PullRequestTimelineItemsItemType = "MERGED_EVENT"
	// PullRequestTimelineItemsItemTypeReviewDismissedEvent. Represents a 'review_dismissed' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeReviewDismissedEvent PullRequestTimelineItemsItemType = "REVIEW_DISMISSED_EVENT"
	// PullRequestTimelineItemsItemTypeReviewRequestedEvent. Represents an 'review_requested' event on a given pull request.
	PullRequestTimelineItemsItemTypeReviewRequestedEvent PullRequestTimelineItemsItemType = "REVIEW_REQUESTED_EVENT"
	// PullRequestTimelineItemsItemTypeReviewRequestRemovedEvent. Represents an 'review_request_removed' event on a given pull request.
	PullRequestTimelineItemsItemTypeReviewRequestRemovedEvent PullRequestTimelineItemsItemType = "REVIEW_REQUEST_REMOVED_EVENT"
	// PullRequestTimelineItemsItemTypeReadyForReviewEvent. Represents a 'ready_for_review' event on a given pull request.
	PullRequestTimelineItemsItemTypeReadyForReviewEvent PullRequestTimelineItemsItemType = "READY_FOR_REVIEW_EVENT"
	// PullRequestTimelineItemsItemTypeConvertToDraftEvent. Represents a 'convert_to_draft' event on a given pull request.
	PullRequestTimelineItemsItemTypeConvertToDraftEvent PullRequestTimelineItemsItemType = "CONVERT_TO_DRAFT_EVENT"
	// PullRequestTimelineItemsItemTypeAddedToMergeQueueEvent. Represents an 'added_to_merge_queue' event on a given pull request.
	PullRequestTimelineItemsItemTypeAddedToMergeQueueEvent PullRequestTimelineItemsItemType = "ADDED_TO_MERGE_QUEUE_EVENT"
	// PullRequestTimelineItemsItemTypeRemovedFromMergeQueueEvent. Represents a 'removed_from_merge_queue' event on a given pull request.
	PullRequestTimelineItemsItemTypeRemovedFromMergeQueueEvent PullRequestTimelineItemsItemType = "REMOVED_FROM_MERGE_QUEUE_EVENT"
	// PullRequestTimelineItemsItemTypeIssueComment. Represents a comment on an Issue.
	PullRequestTimelineItemsItemTypeIssueComment PullRequestTimelineItemsItemType = "ISSUE_COMMENT"
	// PullRequestTimelineItemsItemTypeCrossReferencedEvent. Represents a mention made by one issue or pull request to another.
	PullRequestTimelineItemsItemTypeCrossReferencedEvent PullRequestTimelineItemsItemType = "CROSS_REFERENCED_EVENT"
	// PullRequestTimelineItemsItemTypeAddedToProjectEvent. Represents a 'added_to_project' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeAddedToProjectEvent PullRequestTimelineItemsItemType = "ADDED_TO_PROJECT_EVENT"
	// PullRequestTimelineItemsItemTypeAssignedEvent. Represents an 'assigned' event on any assignable object.
	PullRequestTimelineItemsItemTypeAssignedEvent PullRequestTimelineItemsItemType = "ASSIGNED_EVENT"
	// PullRequestTimelineItemsItemTypeClosedEvent. Represents a 'closed' event on any `Closable`.
	PullRequestTimelineItemsItemTypeClosedEvent PullRequestTimelineItemsItemType = "CLOSED_EVENT"
	// PullRequestTimelineItemsItemTypeCommentDeletedEvent. Represents a 'comment_deleted' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeCommentDeletedEvent PullRequestTimelineItemsItemType = "COMMENT_DELETED_EVENT"
	// PullRequestTimelineItemsItemTypeConnectedEvent. Represents a 'connected' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeConnectedEvent PullRequestTimelineItemsItemType = "CONNECTED_EVENT"
	// PullRequestTimelineItemsItemTypeConvertedNoteToIssueEvent. Represents a 'converted_note_to_issue' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeConvertedNoteToIssueEvent PullRequestTimelineItemsItemType = "CONVERTED_NOTE_TO_ISSUE_EVENT"
	// PullRequestTimelineItemsItemTypeConvertedToDiscussionEvent. Represents a 'converted_to_discussion' event on a given issue.
	PullRequestTimelineItemsItemTypeConvertedToDiscussionEvent PullRequestTimelineItemsItemType = "CONVERTED_TO_DISCUSSION_EVENT"
	// PullRequestTimelineItemsItemTypeDemilestonedEvent. Represents a 'demilestoned' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeDemilestonedEvent PullRequestTimelineItemsItemType = "DEMILESTONED_EVENT"
	// PullRequestTimelineItemsItemTypeDisconnectedEvent. Represents a 'disconnected' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeDisconnectedEvent PullRequestTimelineItemsItemType = "DISCONNECTED_EVENT"
	// PullRequestTimelineItemsItemTypeLabeledEvent. Represents a 'labeled' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeLabeledEvent PullRequestTimelineItemsItemType = "LABELED_EVENT"
	// PullRequestTimelineItemsItemTypeLockedEvent. Represents a 'locked' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeLockedEvent PullRequestTimelineItemsItemType = "LOCKED_EVENT"
	// PullRequestTimelineItemsItemTypeMarkedAsDuplicateEvent. Represents a 'marked_as_duplicate' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeMarkedAsDuplicateEvent PullRequestTimelineItemsItemType = "MARKED_AS_DUPLICATE_EVENT"
	// PullRequestTimelineItemsItemTypeMentionedEvent. Represents a 'mentioned' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeMentionedEvent PullRequestTimelineItemsItemType = "MENTIONED_EVENT"
	// PullRequestTimelineItemsItemTypeMilestonedEvent. Represents a 'milestoned' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeMilestonedEvent PullRequestTimelineItemsItemType = "MILESTONED_EVENT"
	// PullRequestTimelineItemsItemTypeMovedColumnsInProjectEvent. Represents a 'moved_columns_in_project' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeMovedColumnsInProjectEvent PullRequestTimelineItemsItemType = "MOVED_COLUMNS_IN_PROJECT_EVENT"
	// PullRequestTimelineItemsItemTypePinnedEvent. Represents a 'pinned' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypePinnedEvent PullRequestTimelineItemsItemType = "PINNED_EVENT"
	// PullRequestTimelineItemsItemTypeReferencedEvent. Represents a 'referenced' event on a given `ReferencedSubject`.
	PullRequestTimelineItemsItemTypeReferencedEvent PullRequestTimelineItemsItemType = "REFERENCED_EVENT"
	// PullRequestTimelineItemsItemTypeRemovedFromProjectEvent. Represents a 'removed_from_project' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeRemovedFromProjectEvent PullRequestTimelineItemsItemType = "REMOVED_FROM_PROJECT_EVENT"
	// PullRequestTimelineItemsItemTypeRenamedTitleEvent. Represents a 'renamed' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeRenamedTitleEvent PullRequestTimelineItemsItemType = "RENAMED_TITLE_EVENT"
	// PullRequestTimelineItemsItemTypeReopenedEvent. Represents a 'reopened' event on any `Closable`.
	PullRequestTimelineItemsItemTypeReopenedEvent PullRequestTimelineItemsItemType = "REOPENED_EVENT"
	// PullRequestTimelineItemsItemTypeSubscribedEvent. Represents a 'subscribed' event on a given `Subscribable`.
	PullRequestTimelineItemsItemTypeSubscribedEvent PullRequestTimelineItemsItemType = "SUBSCRIBED_EVENT"
	// PullRequestTimelineItemsItemTypeTransferredEvent. Represents a 'transferred' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeTransferredEvent PullRequestTimelineItemsItemType = "TRANSFERRED_EVENT"
	// PullRequestTimelineItemsItemTypeUnassignedEvent. Represents an 'unassigned' event on any assignable object.
	PullRequestTimelineItemsItemTypeUnassignedEvent PullRequestTimelineItemsItemType = "UNASSIGNED_EVENT"
	// PullRequestTimelineItemsItemTypeUnlabeledEvent. Represents an 'unlabeled' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeUnlabeledEvent PullRequestTimelineItemsItemType = "UNLABELED_EVENT"
	// PullRequestTimelineItemsItemTypeUnlockedEvent. Represents an 'unlocked' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeUnlockedEvent PullRequestTimelineItemsItemType = "UNLOCKED_EVENT"
	// PullRequestTimelineItemsItemTypeUserBlockedEvent. Represents a 'user_blocked' event on a given user.
	PullRequestTimelineItemsItemTypeUserBlockedEvent PullRequestTimelineItemsItemType = "USER_BLOCKED_EVENT"
	// PullRequestTimelineItemsItemTypeUnmarkedAsDuplicateEvent. Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeUnmarkedAsDuplicateEvent PullRequestTimelineItemsItemType = "UNMARKED_AS_DUPLICATE_EVENT"
	// PullRequestTimelineItemsItemTypeUnpinnedEvent. Represents an 'unpinned' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeUnpinnedEvent PullRequestTimelineItemsItemType = "UNPINNED_EVENT"
	// PullRequestTimelineItemsItemTypeUnsubscribedEvent. Represents an 'unsubscribed' event on a given `Subscribable`.
	PullRequestTimelineItemsItemTypeUnsubscribedEvent PullRequestTimelineItemsItemType = "UNSUBSCRIBED_EVENT"
)

// PullRequestUpdateState represents the possible target states when updating a pull request.
type PullRequestUpdateState string

const (
	// PullRequestUpdateStateOpen. A pull request that is still open.
	PullRequestUpdateStateOpen PullRequestUpdateState = "OPEN"
	// PullRequestUpdateStateClosed. A pull request that has been closed without being merged.
	PullRequestUpdateStateClosed PullRequestUpdateState = "CLOSED"
)

// ReactionContent represents emojis that can be attached to Issues, Pull Requests and Comments.
type ReactionContent string

const (
	// ReactionContentThumbsUp. Represents the `:+1:` emoji.
	ReactionContentThumbsUp ReactionContent = "THUMBS_UP"
	// ReactionContentThumbsDown. Represents the `:-1:` emoji.
	ReactionContentThumbsDown ReactionContent = "THUMBS_DOWN"
	// ReactionContentLaugh. Represents the `:laugh:` emoji.
	ReactionContentLaugh ReactionContent = "LAUGH"
	// ReactionContentHooray. Represents the `:hooray:` emoji.
	ReactionContentHooray ReactionContent = "HOORAY"
	// ReactionContentConfused. Represents the `:confused:` emoji.
	ReactionContentConfused ReactionContent = "CONFUSED"
	// ReactionContentHeart. Represents the `:heart:` emoji.
	ReactionContentHeart ReactionContent = "HEART"
	// ReactionContentRocket. Represents the `:rocket:` emoji.
	ReactionContentRocket ReactionContent = "ROCKET"
	// ReactionContentEyes. Represents the `:eyes:` emoji.
	ReactionContentEyes ReactionContent = "EYES"
)

// ReactionOrder represents ways in which lists of reactions can be ordered upon return.
type ReactionOrder struct {
	// The field in which to order reactions by.
	Field ReactionOrderField "json:\"field\""
	// The direction in which to order reactions by the specified field.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that ReactionOrder implements the Input interface.
var _ Input = (*ReactionOrder)(nil)

// isInput implements the Input interface.
func (ReactionOrder) isInput() {}

// ReactionOrderField represents a list of fields that reactions can be ordered by.
type ReactionOrderField string

const (
	// ReactionOrderFieldCreatedAt. Allows ordering a list of reactions by when they were created.
	ReactionOrderFieldCreatedAt ReactionOrderField = "CREATED_AT"
)

// RefNameConditionTargetInput represents parameters to be used for the ref_name condition.
type RefNameConditionTargetInput struct {
	// Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
	Exclude []string "json:\"exclude\""
	// Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
	Include []string "json:\"include\""
}

// Compile-time assertion that RefNameConditionTargetInput implements the Input interface.
var _ Input = (*RefNameConditionTargetInput)(nil)

// isInput implements the Input interface.
func (RefNameConditionTargetInput) isInput() {}

// RefOrder represents ways in which lists of git refs can be ordered upon return.
type RefOrder struct {
	// The field in which to order refs by.
	Field RefOrderField "json:\"field\""
	// The direction in which to order refs by the specified field.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that RefOrder implements the Input interface.
var _ Input = (*RefOrder)(nil)

// isInput implements the Input interface.
func (RefOrder) isInput() {}

// RefOrderField represents properties by which ref connections can be ordered.
type RefOrderField string

const (
	// RefOrderFieldTagCommitDate. Order refs by underlying commit date if the ref prefix is refs/tags/.
	RefOrderFieldTagCommitDate RefOrderField = "TAG_COMMIT_DATE"
	// RefOrderFieldAlphabetical. Order refs by their alphanumeric name.
	RefOrderFieldAlphabetical RefOrderField = "ALPHABETICAL"
)

// RegenerateEnterpriseIdentityProviderRecoveryCodesInput is an autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes.
type RegenerateEnterpriseIdentityProviderRecoveryCodesInput struct {
	// The ID of the enterprise on which to set an identity provider.
	EnterpriseID ID "json:\"enterpriseId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RegenerateEnterpriseIdentityProviderRecoveryCodesInput implements the Input interface.
var _ Input = (*RegenerateEnterpriseIdentityProviderRecoveryCodesInput)(nil)

// isInput implements the Input interface.
func (RegenerateEnterpriseIdentityProviderRecoveryCodesInput) isInput() {}

// RegenerateVerifiableDomainTokenInput is an autogenerated input type of RegenerateVerifiableDomainToken.
type RegenerateVerifiableDomainTokenInput struct {
	// The ID of the verifiable domain to regenerate the verification token of.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RegenerateVerifiableDomainTokenInput implements the Input interface.
var _ Input = (*RegenerateVerifiableDomainTokenInput)(nil)

// isInput implements the Input interface.
func (RegenerateVerifiableDomainTokenInput) isInput() {}

// RejectDeploymentsInput is an autogenerated input type of RejectDeployments.
type RejectDeploymentsInput struct {
	// The node ID of the workflow run containing the pending deployments.
	WorkflowRunID ID "json:\"workflowRunId\""
	// The ids of environments to reject deployments.
	EnvironmentIDs []ID "json:\"environmentIds\""
	// Optional comment for rejecting deployments.
	Comment *string "json:\"comment\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RejectDeploymentsInput implements the Input interface.
var _ Input = (*RejectDeploymentsInput)(nil)

// isInput implements the Input interface.
func (RejectDeploymentsInput) isInput() {}

// ReleaseOrder represents ways in which lists of releases can be ordered upon return.
type ReleaseOrder struct {
	// The field in which to order releases by.
	Field ReleaseOrderField "json:\"field\""
	// The direction in which to order releases by the specified field.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that ReleaseOrder implements the Input interface.
var _ Input = (*ReleaseOrder)(nil)

// isInput implements the Input interface.
func (ReleaseOrder) isInput() {}

// ReleaseOrderField represents properties by which release connections can be ordered.
type ReleaseOrderField string

const (
	// ReleaseOrderFieldCreatedAt. Order releases by creation time.
	ReleaseOrderFieldCreatedAt ReleaseOrderField = "CREATED_AT"
	// ReleaseOrderFieldName. Order releases alphabetically by name.
	ReleaseOrderFieldName ReleaseOrderField = "NAME"
)

// RemoveAssigneesFromAssignableInput is an autogenerated input type of RemoveAssigneesFromAssignable.
type RemoveAssigneesFromAssignableInput struct {
	// The id of the assignable object to remove assignees from.
	AssignableID ID "json:\"assignableId\""
	// The id of users to remove as assignees.
	AssigneeIDs []ID "json:\"assigneeIds\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RemoveAssigneesFromAssignableInput implements the Input interface.
var _ Input = (*RemoveAssigneesFromAssignableInput)(nil)

// isInput implements the Input interface.
func (RemoveAssigneesFromAssignableInput) isInput() {}

// RemoveEnterpriseAdminInput is an autogenerated input type of RemoveEnterpriseAdmin.
type RemoveEnterpriseAdminInput struct {
	// The Enterprise ID from which to remove the administrator.
	EnterpriseID ID "json:\"enterpriseId\""
	// The login of the user to remove as an administrator.
	Login string "json:\"login\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RemoveEnterpriseAdminInput implements the Input interface.
var _ Input = (*RemoveEnterpriseAdminInput)(nil)

// isInput implements the Input interface.
func (RemoveEnterpriseAdminInput) isInput() {}

// RemoveEnterpriseIdentityProviderInput is an autogenerated input type of RemoveEnterpriseIdentityProvider.
type RemoveEnterpriseIdentityProviderInput struct {
	// The ID of the enterprise from which to remove the identity provider.
	EnterpriseID ID "json:\"enterpriseId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RemoveEnterpriseIdentityProviderInput implements the Input interface.
var _ Input = (*RemoveEnterpriseIdentityProviderInput)(nil)

// isInput implements the Input interface.
func (RemoveEnterpriseIdentityProviderInput) isInput() {}

// RemoveEnterpriseMemberInput is an autogenerated input type of RemoveEnterpriseMember.
type RemoveEnterpriseMemberInput struct {
	// The ID of the enterprise from which the user should be removed.
	EnterpriseID ID "json:\"enterpriseId\""
	// The ID of the user to remove from the enterprise.
	UserID ID "json:\"userId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RemoveEnterpriseMemberInput implements the Input interface.
var _ Input = (*RemoveEnterpriseMemberInput)(nil)

// isInput implements the Input interface.
func (RemoveEnterpriseMemberInput) isInput() {}

// RemoveEnterpriseOrganizationInput is an autogenerated input type of RemoveEnterpriseOrganization.
type RemoveEnterpriseOrganizationInput struct {
	// The ID of the enterprise from which the organization should be removed.
	EnterpriseID ID "json:\"enterpriseId\""
	// The ID of the organization to remove from the enterprise.
	OrganizationID ID "json:\"organizationId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RemoveEnterpriseOrganizationInput implements the Input interface.
var _ Input = (*RemoveEnterpriseOrganizationInput)(nil)

// isInput implements the Input interface.
func (RemoveEnterpriseOrganizationInput) isInput() {}

// RemoveEnterpriseSupportEntitlementInput is an autogenerated input type of RemoveEnterpriseSupportEntitlement.
type RemoveEnterpriseSupportEntitlementInput struct {
	// The ID of the Enterprise which the admin belongs to.
	EnterpriseID ID "json:\"enterpriseId\""
	// The login of a member who will lose the support entitlement.
	Login string "json:\"login\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RemoveEnterpriseSupportEntitlementInput implements the Input interface.
var _ Input = (*RemoveEnterpriseSupportEntitlementInput)(nil)

// isInput implements the Input interface.
func (RemoveEnterpriseSupportEntitlementInput) isInput() {}

// RemoveLabelsFromLabelableInput is an autogenerated input type of RemoveLabelsFromLabelable.
type RemoveLabelsFromLabelableInput struct {
	// The id of the Labelable to remove labels from.
	LabelableID ID "json:\"labelableId\""
	// The ids of labels to remove.
	LabelIDs []ID "json:\"labelIds\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RemoveLabelsFromLabelableInput implements the Input interface.
var _ Input = (*RemoveLabelsFromLabelableInput)(nil)

// isInput implements the Input interface.
func (RemoveLabelsFromLabelableInput) isInput() {}

// RemoveOutsideCollaboratorInput is an autogenerated input type of RemoveOutsideCollaborator.
type RemoveOutsideCollaboratorInput struct {
	// The ID of the outside collaborator to remove.
	UserID ID "json:\"userId\""
	// The ID of the organization to remove the outside collaborator from.
	OrganizationID ID "json:\"organizationId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RemoveOutsideCollaboratorInput implements the Input interface.
var _ Input = (*RemoveOutsideCollaboratorInput)(nil)

// isInput implements the Input interface.
func (RemoveOutsideCollaboratorInput) isInput() {}

// RemoveReactionInput is an autogenerated input type of RemoveReaction.
type RemoveReactionInput struct {
	// The Node ID of the subject to modify.
	SubjectID ID "json:\"subjectId\""
	// The name of the emoji reaction to remove.
	Content ReactionContent "json:\"content\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RemoveReactionInput implements the Input interface.
var _ Input = (*RemoveReactionInput)(nil)

// isInput implements the Input interface.
func (RemoveReactionInput) isInput() {}

// RemoveStarInput is an autogenerated input type of RemoveStar.
type RemoveStarInput struct {
	// The Starrable ID to unstar.
	StarrableID ID "json:\"starrableId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RemoveStarInput implements the Input interface.
var _ Input = (*RemoveStarInput)(nil)

// isInput implements the Input interface.
func (RemoveStarInput) isInput() {}

// RemoveUpvoteInput is an autogenerated input type of RemoveUpvote.
type RemoveUpvoteInput struct {
	// The Node ID of the discussion or comment to remove upvote.
	SubjectID ID "json:\"subjectId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RemoveUpvoteInput implements the Input interface.
var _ Input = (*RemoveUpvoteInput)(nil)

// isInput implements the Input interface.
func (RemoveUpvoteInput) isInput() {}

// ReopenDiscussionInput is an autogenerated input type of ReopenDiscussion.
type ReopenDiscussionInput struct {
	// ID of the discussion to be reopened.
	DiscussionID ID "json:\"discussionId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ReopenDiscussionInput implements the Input interface.
var _ Input = (*ReopenDiscussionInput)(nil)

// isInput implements the Input interface.
func (ReopenDiscussionInput) isInput() {}

// ReopenIssueInput is an autogenerated input type of ReopenIssue.
type ReopenIssueInput struct {
	// ID of the issue to be opened.
	IssueID ID "json:\"issueId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ReopenIssueInput implements the Input interface.
var _ Input = (*ReopenIssueInput)(nil)

// isInput implements the Input interface.
func (ReopenIssueInput) isInput() {}

// ReopenPullRequestInput is an autogenerated input type of ReopenPullRequest.
type ReopenPullRequestInput struct {
	// ID of the pull request to be reopened.
	PullRequestID ID "json:\"pullRequestId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ReopenPullRequestInput implements the Input interface.
var _ Input = (*ReopenPullRequestInput)(nil)

// isInput implements the Input interface.
func (ReopenPullRequestInput) isInput() {}

// RepoAccessAuditEntryVisibility represents the privacy of a repository.
type RepoAccessAuditEntryVisibility string

const (
	// RepoAccessAuditEntryVisibilityInternal. The repository is visible only to users in the same business.
	RepoAccessAuditEntryVisibilityInternal RepoAccessAuditEntryVisibility = "INTERNAL"
	// RepoAccessAuditEntryVisibilityPrivate. The repository is visible only to those with explicit access.
	RepoAccessAuditEntryVisibilityPrivate RepoAccessAuditEntryVisibility = "PRIVATE"
	// RepoAccessAuditEntryVisibilityPublic. The repository is visible to everyone.
	RepoAccessAuditEntryVisibilityPublic RepoAccessAuditEntryVisibility = "PUBLIC"
)

// RepoAddMemberAuditEntryVisibility represents the privacy of a repository.
type RepoAddMemberAuditEntryVisibility string

const (
	// RepoAddMemberAuditEntryVisibilityInternal. The repository is visible only to users in the same business.
	RepoAddMemberAuditEntryVisibilityInternal RepoAddMemberAuditEntryVisibility = "INTERNAL"
	// RepoAddMemberAuditEntryVisibilityPrivate. The repository is visible only to those with explicit access.
	RepoAddMemberAuditEntryVisibilityPrivate RepoAddMemberAuditEntryVisibility = "PRIVATE"
	// RepoAddMemberAuditEntryVisibilityPublic. The repository is visible to everyone.
	RepoAddMemberAuditEntryVisibilityPublic RepoAddMemberAuditEntryVisibility = "PUBLIC"
)

// RepoArchivedAuditEntryVisibility represents the privacy of a repository.
type RepoArchivedAuditEntryVisibility string

const (
	// RepoArchivedAuditEntryVisibilityInternal. The repository is visible only to users in the same business.
	RepoArchivedAuditEntryVisibilityInternal RepoArchivedAuditEntryVisibility = "INTERNAL"
	// RepoArchivedAuditEntryVisibilityPrivate. The repository is visible only to those with explicit access.
	RepoArchivedAuditEntryVisibilityPrivate RepoArchivedAuditEntryVisibility = "PRIVATE"
	// RepoArchivedAuditEntryVisibilityPublic. The repository is visible to everyone.
	RepoArchivedAuditEntryVisibilityPublic RepoArchivedAuditEntryVisibility = "PUBLIC"
)

// RepoChangeMergeSettingAuditEntryMergeType represents the merge options available for pull requests to this repository.
type RepoChangeMergeSettingAuditEntryMergeType string

const (
	// RepoChangeMergeSettingAuditEntryMergeTypeMerge. The pull request is added to the base branch in a merge commit.
	RepoChangeMergeSettingAuditEntryMergeTypeMerge RepoChangeMergeSettingAuditEntryMergeType = "MERGE"
	// RepoChangeMergeSettingAuditEntryMergeTypeRebase. Commits from the pull request are added onto the base branch individually without a merge commit.
	RepoChangeMergeSettingAuditEntryMergeTypeRebase RepoChangeMergeSettingAuditEntryMergeType = "REBASE"
	// RepoChangeMergeSettingAuditEntryMergeTypeSquash. The pull request's commits are squashed into a single commit before they are merged to the base branch.
	RepoChangeMergeSettingAuditEntryMergeTypeSquash RepoChangeMergeSettingAuditEntryMergeType = "SQUASH"
)

// RepoCreateAuditEntryVisibility represents the privacy of a repository.
type RepoCreateAuditEntryVisibility string

const (
	// RepoCreateAuditEntryVisibilityInternal. The repository is visible only to users in the same business.
	RepoCreateAuditEntryVisibilityInternal RepoCreateAuditEntryVisibility = "INTERNAL"
	// RepoCreateAuditEntryVisibilityPrivate. The repository is visible only to those with explicit access.
	RepoCreateAuditEntryVisibilityPrivate RepoCreateAuditEntryVisibility = "PRIVATE"
	// RepoCreateAuditEntryVisibilityPublic. The repository is visible to everyone.
	RepoCreateAuditEntryVisibilityPublic RepoCreateAuditEntryVisibility = "PUBLIC"
)

// RepoDestroyAuditEntryVisibility represents the privacy of a repository.
type RepoDestroyAuditEntryVisibility string

const (
	// RepoDestroyAuditEntryVisibilityInternal. The repository is visible only to users in the same business.
	RepoDestroyAuditEntryVisibilityInternal RepoDestroyAuditEntryVisibility = "INTERNAL"
	// RepoDestroyAuditEntryVisibilityPrivate. The repository is visible only to those with explicit access.
	RepoDestroyAuditEntryVisibilityPrivate RepoDestroyAuditEntryVisibility = "PRIVATE"
	// RepoDestroyAuditEntryVisibilityPublic. The repository is visible to everyone.
	RepoDestroyAuditEntryVisibilityPublic RepoDestroyAuditEntryVisibility = "PUBLIC"
)

// RepoRemoveMemberAuditEntryVisibility represents the privacy of a repository.
type RepoRemoveMemberAuditEntryVisibility string

const (
	// RepoRemoveMemberAuditEntryVisibilityInternal. The repository is visible only to users in the same business.
	RepoRemoveMemberAuditEntryVisibilityInternal RepoRemoveMemberAuditEntryVisibility = "INTERNAL"
	// RepoRemoveMemberAuditEntryVisibilityPrivate. The repository is visible only to those with explicit access.
	RepoRemoveMemberAuditEntryVisibilityPrivate RepoRemoveMemberAuditEntryVisibility = "PRIVATE"
	// RepoRemoveMemberAuditEntryVisibilityPublic. The repository is visible to everyone.
	RepoRemoveMemberAuditEntryVisibilityPublic RepoRemoveMemberAuditEntryVisibility = "PUBLIC"
)

// ReportedContentClassifiers represents the reasons a piece of content can be reported or minimized.
type ReportedContentClassifiers string

const (
	// ReportedContentClassifiersSpam. A spammy piece of content.
	ReportedContentClassifiersSpam ReportedContentClassifiers = "SPAM"
	// ReportedContentClassifiersAbuse. An abusive or harassing piece of content.
	ReportedContentClassifiersAbuse ReportedContentClassifiers = "ABUSE"
	// ReportedContentClassifiersOffTopic. An irrelevant piece of content.
	ReportedContentClassifiersOffTopic ReportedContentClassifiers = "OFF_TOPIC"
	// ReportedContentClassifiersOutdated. An outdated piece of content.
	ReportedContentClassifiersOutdated ReportedContentClassifiers = "OUTDATED"
	// ReportedContentClassifiersDuplicate. A duplicated piece of content.
	ReportedContentClassifiersDuplicate ReportedContentClassifiers = "DUPLICATE"
	// ReportedContentClassifiersResolved. The content has been resolved.
	ReportedContentClassifiersResolved ReportedContentClassifiers = "RESOLVED"
)

// RepositoryAffiliation represents the affiliation of a user to a repository.
type RepositoryAffiliation string

const (
	// RepositoryAffiliationOwner. Repositories that are owned by the authenticated user.
	RepositoryAffiliationOwner RepositoryAffiliation = "OWNER"
	// RepositoryAffiliationCollaborator. Repositories that the user has been added to as a collaborator.
	RepositoryAffiliationCollaborator RepositoryAffiliation = "COLLABORATOR"
	// RepositoryAffiliationOrganizationMember. Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
	RepositoryAffiliationOrganizationMember RepositoryAffiliation = "ORGANIZATION_MEMBER"
)

// RepositoryContributionType represents the reason a repository is listed as 'contributed'.
type RepositoryContributionType string

const (
	// RepositoryContributionTypeCommit. Created a commit.
	RepositoryContributionTypeCommit RepositoryContributionType = "COMMIT"
	// RepositoryContributionTypeIssue. Created an issue.
	RepositoryContributionTypeIssue RepositoryContributionType = "ISSUE"
	// RepositoryContributionTypePullRequest. Created a pull request.
	RepositoryContributionTypePullRequest RepositoryContributionType = "PULL_REQUEST"
	// RepositoryContributionTypeRepository. Created the repository.
	RepositoryContributionTypeRepository RepositoryContributionType = "REPOSITORY"
	// RepositoryContributionTypePullRequestReview. Reviewed a pull request.
	RepositoryContributionTypePullRequestReview RepositoryContributionType = "PULL_REQUEST_REVIEW"
)

// RepositoryInteractionLimit represents a repository interaction limit.
type RepositoryInteractionLimit string

const (
	// RepositoryInteractionLimitExistingUsers. Users that have recently created their account will be unable to interact with the repository.
	RepositoryInteractionLimitExistingUsers RepositoryInteractionLimit = "EXISTING_USERS"
	// RepositoryInteractionLimitContributorsOnly. Users that have not previously committed to a repository’s default branch will be unable to interact with the repository.
	RepositoryInteractionLimitContributorsOnly RepositoryInteractionLimit = "CONTRIBUTORS_ONLY"
	// RepositoryInteractionLimitCollaboratorsOnly. Users that are not collaborators will not be able to interact with the repository.
	RepositoryInteractionLimitCollaboratorsOnly RepositoryInteractionLimit = "COLLABORATORS_ONLY"
	// RepositoryInteractionLimitNoLimit. No interaction limits are enabled.
	RepositoryInteractionLimitNoLimit RepositoryInteractionLimit = "NO_LIMIT"
)

// RepositoryInteractionLimitExpiry represents the length for a repository interaction limit to be enabled for.
type RepositoryInteractionLimitExpiry string

const (
	// RepositoryInteractionLimitExpiryOneDay. The interaction limit will expire after 1 day.
	RepositoryInteractionLimitExpiryOneDay RepositoryInteractionLimitExpiry = "ONE_DAY"
	// RepositoryInteractionLimitExpiryThreeDays. The interaction limit will expire after 3 days.
	RepositoryInteractionLimitExpiryThreeDays RepositoryInteractionLimitExpiry = "THREE_DAYS"
	// RepositoryInteractionLimitExpiryOneWeek. The interaction limit will expire after 1 week.
	RepositoryInteractionLimitExpiryOneWeek RepositoryInteractionLimitExpiry = "ONE_WEEK"
	// RepositoryInteractionLimitExpiryOneMonth. The interaction limit will expire after 1 month.
	RepositoryInteractionLimitExpiryOneMonth RepositoryInteractionLimitExpiry = "ONE_MONTH"
	// RepositoryInteractionLimitExpirySixMonths. The interaction limit will expire after 6 months.
	RepositoryInteractionLimitExpirySixMonths RepositoryInteractionLimitExpiry = "SIX_MONTHS"
)

// RepositoryInteractionLimitOrigin represents indicates where an interaction limit is configured.
type RepositoryInteractionLimitOrigin string

const (
	// RepositoryInteractionLimitOriginRepository. A limit that is configured at the repository level.
	RepositoryInteractionLimitOriginRepository RepositoryInteractionLimitOrigin = "REPOSITORY"
	// RepositoryInteractionLimitOriginOrganization. A limit that is configured at the organization level.
	RepositoryInteractionLimitOriginOrganization RepositoryInteractionLimitOrigin = "ORGANIZATION"
	// RepositoryInteractionLimitOriginUser. A limit that is configured at the user-wide level.
	RepositoryInteractionLimitOriginUser RepositoryInteractionLimitOrigin = "USER"
)

// RepositoryInvitationOrder represents ordering options for repository invitation connections.
type RepositoryInvitationOrder struct {
	// The field to order repository invitations by.
	Field RepositoryInvitationOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that RepositoryInvitationOrder implements the Input interface.
var _ Input = (*RepositoryInvitationOrder)(nil)

// isInput implements the Input interface.
func (RepositoryInvitationOrder) isInput() {}

// RepositoryInvitationOrderField represents properties by which repository invitation connections can be ordered.
type RepositoryInvitationOrderField string

const (
	// RepositoryInvitationOrderFieldCreatedAt. Order repository invitations by creation time.
	RepositoryInvitationOrderFieldCreatedAt RepositoryInvitationOrderField = "CREATED_AT"
)

// RepositoryLockReason represents the possible reasons a given repository could be in a locked state.
type RepositoryLockReason string

const (
	// RepositoryLockReasonMoving. The repository is locked due to a move.
	RepositoryLockReasonMoving RepositoryLockReason = "MOVING"
	// RepositoryLockReasonBilling. The repository is locked due to a billing related reason.
	RepositoryLockReasonBilling RepositoryLockReason = "BILLING"
	// RepositoryLockReasonRename. The repository is locked due to a rename.
	RepositoryLockReasonRename RepositoryLockReason = "RENAME"
	// RepositoryLockReasonMigrating. The repository is locked due to a migration.
	RepositoryLockReasonMigrating RepositoryLockReason = "MIGRATING"
	// RepositoryLockReasonTradeRestriction. The repository is locked due to a trade controls related reason.
	RepositoryLockReasonTradeRestriction RepositoryLockReason = "TRADE_RESTRICTION"
)

// RepositoryMigrationOrder represents ordering options for repository migrations.
type RepositoryMigrationOrder struct {
	// The field to order repository migrations by.
	Field RepositoryMigrationOrderField "json:\"field\""
	// The ordering direction.
	Direction RepositoryMigrationOrderDirection "json:\"direction\""
}

// Compile-time assertion that RepositoryMigrationOrder implements the Input interface.
var _ Input = (*RepositoryMigrationOrder)(nil)

// isInput implements the Input interface.
func (RepositoryMigrationOrder) isInput() {}

// RepositoryMigrationOrderDirection represents possible directions in which to order a list of repository migrations when provided an `orderBy` argument.
type RepositoryMigrationOrderDirection string

const (
	// RepositoryMigrationOrderDirectionAsc. Specifies an ascending order for a given `orderBy` argument.
	RepositoryMigrationOrderDirectionAsc RepositoryMigrationOrderDirection = "ASC"
	// RepositoryMigrationOrderDirectionDesc. Specifies a descending order for a given `orderBy` argument.
	RepositoryMigrationOrderDirectionDesc RepositoryMigrationOrderDirection = "DESC"
)

// RepositoryMigrationOrderField represents properties by which repository migrations can be ordered.
type RepositoryMigrationOrderField string

const (
	// RepositoryMigrationOrderFieldCreatedAt. Order mannequins why when they were created.
	RepositoryMigrationOrderFieldCreatedAt RepositoryMigrationOrderField = "CREATED_AT"
)

// RepositoryNameConditionTargetInput represents parameters to be used for the repository_name condition.
type RepositoryNameConditionTargetInput struct {
	// Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
	Exclude []string "json:\"exclude\""
	// Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
	Include []string "json:\"include\""
	// Target changes that match these patterns will be prevented except by those with bypass permissions.
	Protected *bool "json:\"protected\""
}

// Compile-time assertion that RepositoryNameConditionTargetInput implements the Input interface.
var _ Input = (*RepositoryNameConditionTargetInput)(nil)

// isInput implements the Input interface.
func (RepositoryNameConditionTargetInput) isInput() {}

// RepositoryOrder represents ordering options for repository connections.
type RepositoryOrder struct {
	// The field to order repositories by.
	Field RepositoryOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that RepositoryOrder implements the Input interface.
var _ Input = (*RepositoryOrder)(nil)

// isInput implements the Input interface.
func (RepositoryOrder) isInput() {}

// RepositoryOrderField represents properties by which repository connections can be ordered.
type RepositoryOrderField string

const (
	// RepositoryOrderFieldCreatedAt. Order repositories by creation time.
	RepositoryOrderFieldCreatedAt RepositoryOrderField = "CREATED_AT"
	// RepositoryOrderFieldUpdatedAt. Order repositories by update time.
	RepositoryOrderFieldUpdatedAt RepositoryOrderField = "UPDATED_AT"
	// RepositoryOrderFieldPushedAt. Order repositories by push time.
	RepositoryOrderFieldPushedAt RepositoryOrderField = "PUSHED_AT"
	// RepositoryOrderFieldName. Order repositories by name.
	RepositoryOrderFieldName RepositoryOrderField = "NAME"
	// RepositoryOrderFieldStargazers. Order repositories by number of stargazers.
	RepositoryOrderFieldStargazers RepositoryOrderField = "STARGAZERS"
)

// RepositoryPermission represents the access level to a repository.
type RepositoryPermission string

const (
	// RepositoryPermissionAdmin. Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators.
	RepositoryPermissionAdmin RepositoryPermission = "ADMIN"
	// RepositoryPermissionMaintain. Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings.
	RepositoryPermissionMaintain RepositoryPermission = "MAINTAIN"
	// RepositoryPermissionWrite. Can read, clone, and push to this repository. Can also manage issues and pull requests.
	RepositoryPermissionWrite RepositoryPermission = "WRITE"
	// RepositoryPermissionTriage. Can read and clone this repository. Can also manage issues and pull requests.
	RepositoryPermissionTriage RepositoryPermission = "TRIAGE"
	// RepositoryPermissionRead. Can read and clone this repository. Can also open and comment on issues and pull requests.
	RepositoryPermissionRead RepositoryPermission = "READ"
)

// RepositoryPrivacy represents the privacy of a repository.
type RepositoryPrivacy string

const (
	// RepositoryPrivacyPublic. Public.
	RepositoryPrivacyPublic RepositoryPrivacy = "PUBLIC"
	// RepositoryPrivacyPrivate. Private.
	RepositoryPrivacyPrivate RepositoryPrivacy = "PRIVATE"
)

// RepositoryRuleConditionsInput represents specifies the conditions required for a ruleset to evaluate.
type RepositoryRuleConditionsInput struct {
	// Configuration for the ref_name condition.
	RefName *RefNameConditionTargetInput "json:\"refName\""
	// Configuration for the repository_name condition.
	RepositoryName *RepositoryNameConditionTargetInput "json:\"repositoryName\""
}

// Compile-time assertion that RepositoryRuleConditionsInput implements the Input interface.
var _ Input = (*RepositoryRuleConditionsInput)(nil)

// isInput implements the Input interface.
func (RepositoryRuleConditionsInput) isInput() {}

// RepositoryRuleInput represents specifies the attributes for a new or updated rule.
type RepositoryRuleInput struct {
	// Optional ID of this rule when updating.
	ID *ID "json:\"id\""
	// The type of rule to create.
	Type RepositoryRuleType "json:\"type\""
	// The parameters for the rule.
	Parameters *RuleParametersInput "json:\"parameters\""
}

// Compile-time assertion that RepositoryRuleInput implements the Input interface.
var _ Input = (*RepositoryRuleInput)(nil)

// isInput implements the Input interface.
func (RepositoryRuleInput) isInput() {}

// RepositoryRuleType represents the rule types supported in rulesets.
type RepositoryRuleType string

const (
	// RepositoryRuleTypeCreation. Only allow users with bypass permission to create matching refs.
	RepositoryRuleTypeCreation RepositoryRuleType = "CREATION"
	// RepositoryRuleTypeUpdate. Only allow users with bypass permission to update matching refs.
	RepositoryRuleTypeUpdate RepositoryRuleType = "UPDATE"
	// RepositoryRuleTypeDeletion. Only allow users with bypass permissions to delete matching refs.
	RepositoryRuleTypeDeletion RepositoryRuleType = "DELETION"
	// RepositoryRuleTypeRequiredLinearHistory. Prevent merge commits from being pushed to matching branches.
	RepositoryRuleTypeRequiredLinearHistory RepositoryRuleType = "REQUIRED_LINEAR_HISTORY"
	// RepositoryRuleTypeRequiredDeployments. Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule.
	RepositoryRuleTypeRequiredDeployments RepositoryRuleType = "REQUIRED_DEPLOYMENTS"
	// RepositoryRuleTypeRequiredSignatures. Commits pushed to matching branches must have verified signatures.
	RepositoryRuleTypeRequiredSignatures RepositoryRuleType = "REQUIRED_SIGNATURES"
	// RepositoryRuleTypePullRequest. Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
	RepositoryRuleTypePullRequest RepositoryRuleType = "PULL_REQUEST"
	// RepositoryRuleTypeRequiredStatusChecks. Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed.
	RepositoryRuleTypeRequiredStatusChecks RepositoryRuleType = "REQUIRED_STATUS_CHECKS"
	// RepositoryRuleTypeNonFastForward. Prevent users with push access from force pushing to branches.
	RepositoryRuleTypeNonFastForward RepositoryRuleType = "NON_FAST_FORWARD"
	// RepositoryRuleTypeCommitMessagePattern. Commit message pattern.
	RepositoryRuleTypeCommitMessagePattern RepositoryRuleType = "COMMIT_MESSAGE_PATTERN"
	// RepositoryRuleTypeCommitAuthorEmailPattern. Commit author email pattern.
	RepositoryRuleTypeCommitAuthorEmailPattern RepositoryRuleType = "COMMIT_AUTHOR_EMAIL_PATTERN"
	// RepositoryRuleTypeCommitterEmailPattern. Committer email pattern.
	RepositoryRuleTypeCommitterEmailPattern RepositoryRuleType = "COMMITTER_EMAIL_PATTERN"
	// RepositoryRuleTypeBranchNamePattern. Branch name pattern.
	RepositoryRuleTypeBranchNamePattern RepositoryRuleType = "BRANCH_NAME_PATTERN"
	// RepositoryRuleTypeTagNamePattern. Tag name pattern.
	RepositoryRuleTypeTagNamePattern RepositoryRuleType = "TAG_NAME_PATTERN"
)

// RepositoryRulesetTarget represents the targets supported for rulesets.
type RepositoryRulesetTarget string

const (
	// RepositoryRulesetTargetBranch. Branch.
	RepositoryRulesetTargetBranch RepositoryRulesetTarget = "BRANCH"
	// RepositoryRulesetTargetTag. Tag.
	RepositoryRulesetTargetTag RepositoryRulesetTarget = "TAG"
)

// RepositoryVisibility represents the repository's visibility level.
type RepositoryVisibility string

const (
	// RepositoryVisibilityPrivate. The repository is visible only to those with explicit access.
	RepositoryVisibilityPrivate RepositoryVisibility = "PRIVATE"
	// RepositoryVisibilityPublic. The repository is visible to everyone.
	RepositoryVisibilityPublic RepositoryVisibility = "PUBLIC"
	// RepositoryVisibilityInternal. The repository is visible only to users in the same business.
	RepositoryVisibilityInternal RepositoryVisibility = "INTERNAL"
)

// RepositoryVulnerabilityAlertDependencyScope represents the possible scopes of an alert's dependency.
type RepositoryVulnerabilityAlertDependencyScope string

const (
	// RepositoryVulnerabilityAlertDependencyScopeRuntime. A dependency that is leveraged during application runtime.
	RepositoryVulnerabilityAlertDependencyScopeRuntime RepositoryVulnerabilityAlertDependencyScope = "RUNTIME"
	// RepositoryVulnerabilityAlertDependencyScopeDevelopment. A dependency that is only used in development.
	RepositoryVulnerabilityAlertDependencyScopeDevelopment RepositoryVulnerabilityAlertDependencyScope = "DEVELOPMENT"
)

// RepositoryVulnerabilityAlertState represents the possible states of an alert.
type RepositoryVulnerabilityAlertState string

const (
	// RepositoryVulnerabilityAlertStateOpen. An alert that is still open.
	RepositoryVulnerabilityAlertStateOpen RepositoryVulnerabilityAlertState = "OPEN"
	// RepositoryVulnerabilityAlertStateFixed. An alert that has been resolved by a code change.
	RepositoryVulnerabilityAlertStateFixed RepositoryVulnerabilityAlertState = "FIXED"
	// RepositoryVulnerabilityAlertStateDismissed. An alert that has been manually closed by a user.
	RepositoryVulnerabilityAlertStateDismissed RepositoryVulnerabilityAlertState = "DISMISSED"
	// RepositoryVulnerabilityAlertStateAutoDismissed. An alert that has been automatically closed by Dependabot.
	RepositoryVulnerabilityAlertStateAutoDismissed RepositoryVulnerabilityAlertState = "AUTO_DISMISSED"
)

// RequestReviewsInput is an autogenerated input type of RequestReviews.
type RequestReviewsInput struct {
	// The Node ID of the pull request to modify.
	PullRequestID ID "json:\"pullRequestId\""
	// The Node IDs of the user to request.
	UserIDs *[]ID "json:\"userIds\""
	// The Node IDs of the team to request.
	TeamIDs *[]ID "json:\"teamIds\""
	// Add users to the set rather than replace.
	Union *bool "json:\"union\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RequestReviewsInput implements the Input interface.
var _ Input = (*RequestReviewsInput)(nil)

// isInput implements the Input interface.
func (RequestReviewsInput) isInput() {}

// RequestableCheckStatusState represents the possible states that can be requested when creating a check run.
type RequestableCheckStatusState string

const (
	// RequestableCheckStatusStateQueued. The check suite or run has been queued.
	RequestableCheckStatusStateQueued RequestableCheckStatusState = "QUEUED"
	// RequestableCheckStatusStateInProgress. The check suite or run is in progress.
	RequestableCheckStatusStateInProgress RequestableCheckStatusState = "IN_PROGRESS"
	// RequestableCheckStatusStateCompleted. The check suite or run has been completed.
	RequestableCheckStatusStateCompleted RequestableCheckStatusState = "COMPLETED"
	// RequestableCheckStatusStateWaiting. The check suite or run is in waiting state.
	RequestableCheckStatusStateWaiting RequestableCheckStatusState = "WAITING"
	// RequestableCheckStatusStatePending. The check suite or run is in pending state.
	RequestableCheckStatusStatePending RequestableCheckStatusState = "PENDING"
)

// RequiredDeploymentsParametersInput represents choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule.
type RequiredDeploymentsParametersInput struct {
	// The environments that must be successfully deployed to before branches can be merged.
	RequiredDeploymentEnvironments []string "json:\"requiredDeploymentEnvironments\""
}

// Compile-time assertion that RequiredDeploymentsParametersInput implements the Input interface.
var _ Input = (*RequiredDeploymentsParametersInput)(nil)

// isInput implements the Input interface.
func (RequiredDeploymentsParametersInput) isInput() {}

// RequiredStatusCheckInput represents specifies the attributes for a new or updated required status check.
type RequiredStatusCheckInput struct {
	// Status check context that must pass for commits to be accepted to the matching branch.
	Context string "json:\"context\""
	// The ID of the App that must set the status in order for it to be accepted. Omit this value to use whichever app has recently been setting this status, or use "any" to allow any app to set the status.
	AppID *ID "json:\"appId\""
}

// Compile-time assertion that RequiredStatusCheckInput implements the Input interface.
var _ Input = (*RequiredStatusCheckInput)(nil)

// isInput implements the Input interface.
func (RequiredStatusCheckInput) isInput() {}

// RequiredStatusChecksParametersInput represents choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed.
type RequiredStatusChecksParametersInput struct {
	// Status checks that are required.
	RequiredStatusChecks []StatusCheckConfigurationInput "json:\"requiredStatusChecks\""
	// Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
	StrictRequiredStatusChecksPolicy bool "json:\"strictRequiredStatusChecksPolicy\""
}

// Compile-time assertion that RequiredStatusChecksParametersInput implements the Input interface.
var _ Input = (*RequiredStatusChecksParametersInput)(nil)

// isInput implements the Input interface.
func (RequiredStatusChecksParametersInput) isInput() {}

// RerequestCheckSuiteInput is an autogenerated input type of RerequestCheckSuite.
type RerequestCheckSuiteInput struct {
	// The Node ID of the repository.
	RepositoryID ID "json:\"repositoryId\""
	// The Node ID of the check suite.
	CheckSuiteID ID "json:\"checkSuiteId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RerequestCheckSuiteInput implements the Input interface.
var _ Input = (*RerequestCheckSuiteInput)(nil)

// isInput implements the Input interface.
func (RerequestCheckSuiteInput) isInput() {}

// ResolveReviewThreadInput is an autogenerated input type of ResolveReviewThread.
type ResolveReviewThreadInput struct {
	// The ID of the thread to resolve.
	ThreadID ID "json:\"threadId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that ResolveReviewThreadInput implements the Input interface.
var _ Input = (*ResolveReviewThreadInput)(nil)

// isInput implements the Input interface.
func (ResolveReviewThreadInput) isInput() {}

// RetireSponsorsTierInput is an autogenerated input type of RetireSponsorsTier.
type RetireSponsorsTierInput struct {
	// The ID of the published tier to retire.
	TierID ID "json:\"tierId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RetireSponsorsTierInput implements the Input interface.
var _ Input = (*RetireSponsorsTierInput)(nil)

// isInput implements the Input interface.
func (RetireSponsorsTierInput) isInput() {}

// RevertPullRequestInput is an autogenerated input type of RevertPullRequest.
type RevertPullRequestInput struct {
	// The ID of the pull request to revert.
	PullRequestID ID "json:\"pullRequestId\""
	// The title of the revert pull request.
	Title *string "json:\"title\""
	// The description of the revert pull request.
	Body *string "json:\"body\""
	// Indicates whether the revert pull request should be a draft.
	Draft *bool "json:\"draft\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RevertPullRequestInput implements the Input interface.
var _ Input = (*RevertPullRequestInput)(nil)

// isInput implements the Input interface.
func (RevertPullRequestInput) isInput() {}

// RevokeEnterpriseOrganizationsMigratorRoleInput is an autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole.
type RevokeEnterpriseOrganizationsMigratorRoleInput struct {
	// The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
	EnterpriseID ID "json:\"enterpriseId\""
	// The login of the user to revoke the migrator role.
	Login string "json:\"login\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RevokeEnterpriseOrganizationsMigratorRoleInput implements the Input interface.
var _ Input = (*RevokeEnterpriseOrganizationsMigratorRoleInput)(nil)

// isInput implements the Input interface.
func (RevokeEnterpriseOrganizationsMigratorRoleInput) isInput() {}

// RevokeMigratorRoleInput is an autogenerated input type of RevokeMigratorRole.
type RevokeMigratorRoleInput struct {
	// The ID of the organization that the user/team belongs to.
	OrganizationID ID "json:\"organizationId\""
	// The user login or Team slug to revoke the migrator role from.
	Actor string "json:\"actor\""
	// Specifies the type of the actor, can be either USER or TEAM.
	ActorType ActorType "json:\"actorType\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that RevokeMigratorRoleInput implements the Input interface.
var _ Input = (*RevokeMigratorRoleInput)(nil)

// isInput implements the Input interface.
func (RevokeMigratorRoleInput) isInput() {}

// RoleInOrganization represents possible roles a user may have in relation to an organization.
type RoleInOrganization string

const (
	// RoleInOrganizationOwner. A user with full administrative access to the organization.
	RoleInOrganizationOwner RoleInOrganization = "OWNER"
	// RoleInOrganizationDirectMember. A user who is a direct member of the organization.
	RoleInOrganizationDirectMember RoleInOrganization = "DIRECT_MEMBER"
	// RoleInOrganizationUnaffiliated. A user who is unaffiliated with the organization.
	RoleInOrganizationUnaffiliated RoleInOrganization = "UNAFFILIATED"
)

// RuleBypassMode represents the bypass mode for a rule or ruleset.
type RuleBypassMode string

const (
	// RuleBypassModeNone. Bypassing is disabled.
	RuleBypassModeNone RuleBypassMode = "NONE"
	// RuleBypassModeRepository. Those with bypass permission at the repository level can bypass.
	RuleBypassModeRepository RuleBypassMode = "REPOSITORY"
	// RuleBypassModeOrganization. Those with bypass permission at the organization level can bypass.
	RuleBypassModeOrganization RuleBypassMode = "ORGANIZATION"
)

// RuleEnforcement represents the level of enforcement for a rule or ruleset.
type RuleEnforcement string

const (
	// RuleEnforcementDisabled. Do not evaluate or enforce rules.
	RuleEnforcementDisabled RuleEnforcement = "DISABLED"
	// RuleEnforcementActive. Rules will be enforced.
	RuleEnforcementActive RuleEnforcement = "ACTIVE"
	// RuleEnforcementEvaluate. Allow admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
	RuleEnforcementEvaluate RuleEnforcement = "EVALUATE"
)

// RuleParametersInput represents specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
type RuleParametersInput struct {
	// Parameters used for the `update` rule type.
	Update *UpdateParametersInput "json:\"update\""
	// Parameters used for the `required_deployments` rule type.
	RequiredDeployments *RequiredDeploymentsParametersInput "json:\"requiredDeployments\""
	// Parameters used for the `pull_request` rule type.
	PullRequest *PullRequestParametersInput "json:\"pullRequest\""
	// Parameters used for the `required_status_checks` rule type.
	RequiredStatusChecks *RequiredStatusChecksParametersInput "json:\"requiredStatusChecks\""
	// Parameters used for the `commit_message_pattern` rule type.
	CommitMessagePattern *CommitMessagePatternParametersInput "json:\"commitMessagePattern\""
	// Parameters used for the `commit_author_email_pattern` rule type.
	CommitAuthorEmailPattern *CommitAuthorEmailPatternParametersInput "json:\"commitAuthorEmailPattern\""
	// Parameters used for the `committer_email_pattern` rule type.
	CommitterEmailPattern *CommitterEmailPatternParametersInput "json:\"committerEmailPattern\""
	// Parameters used for the `branch_name_pattern` rule type.
	BranchNamePattern *BranchNamePatternParametersInput "json:\"branchNamePattern\""
	// Parameters used for the `tag_name_pattern` rule type.
	TagNamePattern *TagNamePatternParametersInput "json:\"tagNamePattern\""
}

// Compile-time assertion that RuleParametersInput implements the Input interface.
var _ Input = (*RuleParametersInput)(nil)

// isInput implements the Input interface.
func (RuleParametersInput) isInput() {}

// SamlDigestAlgorithm represents the possible digest algorithms used to sign SAML requests for an identity provider.
type SamlDigestAlgorithm string

const (
	// SamlDigestAlgorithmSha1. SHA1.
	SamlDigestAlgorithmSha1 SamlDigestAlgorithm = "SHA1"
	// SamlDigestAlgorithmSha256. SHA256.
	SamlDigestAlgorithmSha256 SamlDigestAlgorithm = "SHA256"
	// SamlDigestAlgorithmSha384. SHA384.
	SamlDigestAlgorithmSha384 SamlDigestAlgorithm = "SHA384"
	// SamlDigestAlgorithmSha512. SHA512.
	SamlDigestAlgorithmSha512 SamlDigestAlgorithm = "SHA512"
)

// SamlSignatureAlgorithm represents the possible signature algorithms used to sign SAML requests for a Identity Provider.
type SamlSignatureAlgorithm string

const (
	// SamlSignatureAlgorithmRsaSha1. RSA-SHA1.
	SamlSignatureAlgorithmRsaSha1 SamlSignatureAlgorithm = "RSA_SHA1"
	// SamlSignatureAlgorithmRsaSha256. RSA-SHA256.
	SamlSignatureAlgorithmRsaSha256 SamlSignatureAlgorithm = "RSA_SHA256"
	// SamlSignatureAlgorithmRsaSha384. RSA-SHA384.
	SamlSignatureAlgorithmRsaSha384 SamlSignatureAlgorithm = "RSA_SHA384"
	// SamlSignatureAlgorithmRsaSha512. RSA-SHA512.
	SamlSignatureAlgorithmRsaSha512 SamlSignatureAlgorithm = "RSA_SHA512"
)

// SavedReplyOrder represents ordering options for saved reply connections.
type SavedReplyOrder struct {
	// The field to order saved replies by.
	Field SavedReplyOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that SavedReplyOrder implements the Input interface.
var _ Input = (*SavedReplyOrder)(nil)

// isInput implements the Input interface.
func (SavedReplyOrder) isInput() {}

// SavedReplyOrderField represents properties by which saved reply connections can be ordered.
type SavedReplyOrderField string

const (
	// SavedReplyOrderFieldUpdatedAt. Order saved reply by when they were updated.
	SavedReplyOrderFieldUpdatedAt SavedReplyOrderField = "UPDATED_AT"
)

// SearchType represents represents the individual results of a search.
type SearchType string

const (
	// SearchTypeIssue. Returns results matching issues in repositories.
	SearchTypeIssue SearchType = "ISSUE"
	// SearchTypeRepository. Returns results matching repositories.
	SearchTypeRepository SearchType = "REPOSITORY"
	// SearchTypeUser. Returns results matching users and organizations on GitHub.
	SearchTypeUser SearchType = "USER"
	// SearchTypeDiscussion. Returns matching discussions in repositories.
	SearchTypeDiscussion SearchType = "DISCUSSION"
)

// SecurityAdvisoryClassification represents classification of the advisory.
type SecurityAdvisoryClassification string

const (
	// SecurityAdvisoryClassificationGeneral. Classification of general advisories.
	SecurityAdvisoryClassificationGeneral SecurityAdvisoryClassification = "GENERAL"
	// SecurityAdvisoryClassificationMalware. Classification of malware advisories.
	SecurityAdvisoryClassificationMalware SecurityAdvisoryClassification = "MALWARE"
)

// SecurityAdvisoryEcosystem represents the possible ecosystems of a security vulnerability's package.
type SecurityAdvisoryEcosystem string

const (
	// SecurityAdvisoryEcosystemComposer. PHP packages hosted at packagist.org.
	SecurityAdvisoryEcosystemComposer SecurityAdvisoryEcosystem = "COMPOSER"
	// SecurityAdvisoryEcosystemErlang. Erlang/Elixir packages hosted at hex.pm.
	SecurityAdvisoryEcosystemErlang SecurityAdvisoryEcosystem = "ERLANG"
	// SecurityAdvisoryEcosystemActions. GitHub Actions.
	SecurityAdvisoryEcosystemActions SecurityAdvisoryEcosystem = "ACTIONS"
	// SecurityAdvisoryEcosystemGo. Go modules.
	SecurityAdvisoryEcosystemGo SecurityAdvisoryEcosystem = "GO"
	// SecurityAdvisoryEcosystemMaven. Java artifacts hosted at the Maven central repository.
	SecurityAdvisoryEcosystemMaven SecurityAdvisoryEcosystem = "MAVEN"
	// SecurityAdvisoryEcosystemNpm. JavaScript packages hosted at npmjs.com.
	SecurityAdvisoryEcosystemNpm SecurityAdvisoryEcosystem = "NPM"
	// SecurityAdvisoryEcosystemNuget. .NET packages hosted at the NuGet Gallery.
	SecurityAdvisoryEcosystemNuget SecurityAdvisoryEcosystem = "NUGET"
	// SecurityAdvisoryEcosystemPip. Python packages hosted at PyPI.org.
	SecurityAdvisoryEcosystemPip SecurityAdvisoryEcosystem = "PIP"
	// SecurityAdvisoryEcosystemPub. Dart packages hosted at pub.dev.
	SecurityAdvisoryEcosystemPub SecurityAdvisoryEcosystem = "PUB"
	// SecurityAdvisoryEcosystemRubygems. Ruby gems hosted at RubyGems.org.
	SecurityAdvisoryEcosystemRubygems SecurityAdvisoryEcosystem = "RUBYGEMS"
	// SecurityAdvisoryEcosystemRust. Rust crates.
	SecurityAdvisoryEcosystemRust SecurityAdvisoryEcosystem = "RUST"
)

// SecurityAdvisoryIdentifierFilter represents an advisory identifier to filter results on.
type SecurityAdvisoryIdentifierFilter struct {
	// The identifier type.
	Type SecurityAdvisoryIdentifierType "json:\"type\""
	// The identifier string. Supports exact or partial matching.
	Value string "json:\"value\""
}

// Compile-time assertion that SecurityAdvisoryIdentifierFilter implements the Input interface.
var _ Input = (*SecurityAdvisoryIdentifierFilter)(nil)

// isInput implements the Input interface.
func (SecurityAdvisoryIdentifierFilter) isInput() {}

// SecurityAdvisoryIdentifierType represents identifier formats available for advisories.
type SecurityAdvisoryIdentifierType string

const (
	// SecurityAdvisoryIdentifierTypeCve. Common Vulnerabilities and Exposures Identifier.
	SecurityAdvisoryIdentifierTypeCve SecurityAdvisoryIdentifierType = "CVE"
	// SecurityAdvisoryIdentifierTypeGhsa. GitHub Security Advisory ID.
	SecurityAdvisoryIdentifierTypeGhsa SecurityAdvisoryIdentifierType = "GHSA"
)

// SecurityAdvisoryOrder represents ordering options for security advisory connections.
type SecurityAdvisoryOrder struct {
	// The field to order security advisories by.
	Field SecurityAdvisoryOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that SecurityAdvisoryOrder implements the Input interface.
var _ Input = (*SecurityAdvisoryOrder)(nil)

// isInput implements the Input interface.
func (SecurityAdvisoryOrder) isInput() {}

// SecurityAdvisoryOrderField represents properties by which security advisory connections can be ordered.
type SecurityAdvisoryOrderField string

const (
	// SecurityAdvisoryOrderFieldPublishedAt. Order advisories by publication time.
	SecurityAdvisoryOrderFieldPublishedAt SecurityAdvisoryOrderField = "PUBLISHED_AT"
	// SecurityAdvisoryOrderFieldUpdatedAt. Order advisories by update time.
	SecurityAdvisoryOrderFieldUpdatedAt SecurityAdvisoryOrderField = "UPDATED_AT"
)

// SecurityAdvisorySeverity represents severity of the vulnerability.
type SecurityAdvisorySeverity string

const (
	// SecurityAdvisorySeverityLow. Low.
	SecurityAdvisorySeverityLow SecurityAdvisorySeverity = "LOW"
	// SecurityAdvisorySeverityModerate. Moderate.
	SecurityAdvisorySeverityModerate SecurityAdvisorySeverity = "MODERATE"
	// SecurityAdvisorySeverityHigh. High.
	SecurityAdvisorySeverityHigh SecurityAdvisorySeverity = "HIGH"
	// SecurityAdvisorySeverityCritical. Critical.
	SecurityAdvisorySeverityCritical SecurityAdvisorySeverity = "CRITICAL"
)

// SecurityVulnerabilityOrder represents ordering options for security vulnerability connections.
type SecurityVulnerabilityOrder struct {
	// The field to order security vulnerabilities by.
	Field SecurityVulnerabilityOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that SecurityVulnerabilityOrder implements the Input interface.
var _ Input = (*SecurityVulnerabilityOrder)(nil)

// isInput implements the Input interface.
func (SecurityVulnerabilityOrder) isInput() {}

// SecurityVulnerabilityOrderField represents properties by which security vulnerability connections can be ordered.
type SecurityVulnerabilityOrderField string

const (
	// SecurityVulnerabilityOrderFieldUpdatedAt. Order vulnerability by update time.
	SecurityVulnerabilityOrderFieldUpdatedAt SecurityVulnerabilityOrderField = "UPDATED_AT"
)

// SetEnterpriseIdentityProviderInput is an autogenerated input type of SetEnterpriseIdentityProvider.
type SetEnterpriseIdentityProviderInput struct {
	// The ID of the enterprise on which to set an identity provider.
	EnterpriseID ID "json:\"enterpriseId\""
	// The URL endpoint for the identity provider's SAML SSO.
	SsoURL URI "json:\"ssoUrl\""
	// The Issuer Entity ID for the SAML identity provider.
	Issuer *string "json:\"issuer\""
	// The x509 certificate used by the identity provider to sign assertions and responses.
	IdpCertificate string "json:\"idpCertificate\""
	// The signature algorithm used to sign SAML requests for the identity provider.
	SignatureMethod SamlSignatureAlgorithm "json:\"signatureMethod\""
	// The digest algorithm used to sign SAML requests for the identity provider.
	DigestMethod SamlDigestAlgorithm "json:\"digestMethod\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that SetEnterpriseIdentityProviderInput implements the Input interface.
var _ Input = (*SetEnterpriseIdentityProviderInput)(nil)

// isInput implements the Input interface.
func (SetEnterpriseIdentityProviderInput) isInput() {}

// SetOrganizationInteractionLimitInput is an autogenerated input type of SetOrganizationInteractionLimit.
type SetOrganizationInteractionLimitInput struct {
	// The ID of the organization to set a limit for.
	OrganizationID ID "json:\"organizationId\""
	// The limit to set.
	Limit RepositoryInteractionLimit "json:\"limit\""
	// When this limit should expire.
	Expiry *RepositoryInteractionLimitExpiry "json:\"expiry\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that SetOrganizationInteractionLimitInput implements the Input interface.
var _ Input = (*SetOrganizationInteractionLimitInput)(nil)

// isInput implements the Input interface.
func (SetOrganizationInteractionLimitInput) isInput() {}

// SetRepositoryInteractionLimitInput is an autogenerated input type of SetRepositoryInteractionLimit.
type SetRepositoryInteractionLimitInput struct {
	// The ID of the repository to set a limit for.
	RepositoryID ID "json:\"repositoryId\""
	// The limit to set.
	Limit RepositoryInteractionLimit "json:\"limit\""
	// When this limit should expire.
	Expiry *RepositoryInteractionLimitExpiry "json:\"expiry\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that SetRepositoryInteractionLimitInput implements the Input interface.
var _ Input = (*SetRepositoryInteractionLimitInput)(nil)

// isInput implements the Input interface.
func (SetRepositoryInteractionLimitInput) isInput() {}

// SetUserInteractionLimitInput is an autogenerated input type of SetUserInteractionLimit.
type SetUserInteractionLimitInput struct {
	// The ID of the user to set a limit for.
	UserID ID "json:\"userId\""
	// The limit to set.
	Limit RepositoryInteractionLimit "json:\"limit\""
	// When this limit should expire.
	Expiry *RepositoryInteractionLimitExpiry "json:\"expiry\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that SetUserInteractionLimitInput implements the Input interface.
var _ Input = (*SetUserInteractionLimitInput)(nil)

// isInput implements the Input interface.
func (SetUserInteractionLimitInput) isInput() {}

// SocialAccountProvider represents software or company that hosts social media accounts.
type SocialAccountProvider string

const (
	// SocialAccountProviderGeneric. Catch-all for social media providers that do not yet have specific handling.
	SocialAccountProviderGeneric SocialAccountProvider = "GENERIC"
	// SocialAccountProviderFacebook. Social media and networking website.
	SocialAccountProviderFacebook SocialAccountProvider = "FACEBOOK"
	// SocialAccountProviderHometown. Fork of Mastodon with a greater focus on local posting.
	SocialAccountProviderHometown SocialAccountProvider = "HOMETOWN"
	// SocialAccountProviderInstagram. Social media website with a focus on photo and video sharing.
	SocialAccountProviderInstagram SocialAccountProvider = "INSTAGRAM"
	// SocialAccountProviderLinkedin. Professional networking website.
	SocialAccountProviderLinkedin SocialAccountProvider = "LINKEDIN"
	// SocialAccountProviderMastodon. Open-source federated microblogging service.
	SocialAccountProviderMastodon SocialAccountProvider = "MASTODON"
	// SocialAccountProviderReddit. Social news aggregation and discussion website.
	SocialAccountProviderReddit SocialAccountProvider = "REDDIT"
	// SocialAccountProviderTwitch. Live-streaming service.
	SocialAccountProviderTwitch SocialAccountProvider = "TWITCH"
	// SocialAccountProviderTwitter. Microblogging website.
	SocialAccountProviderTwitter SocialAccountProvider = "TWITTER"
	// SocialAccountProviderYoutube. Online video platform.
	SocialAccountProviderYoutube SocialAccountProvider = "YOUTUBE"
)

// SponsorOrder represents ordering options for connections to get sponsor entities for GitHub Sponsors.
type SponsorOrder struct {
	// The field to order sponsor entities by.
	Field SponsorOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that SponsorOrder implements the Input interface.
var _ Input = (*SponsorOrder)(nil)

// isInput implements the Input interface.
func (SponsorOrder) isInput() {}

// SponsorOrderField represents properties by which sponsor connections can be ordered.
type SponsorOrderField string

const (
	// SponsorOrderFieldLogin. Order sponsorable entities by login (username).
	SponsorOrderFieldLogin SponsorOrderField = "LOGIN"
	// SponsorOrderFieldRelevance. Order sponsors by their relevance to the viewer.
	SponsorOrderFieldRelevance SponsorOrderField = "RELEVANCE"
)

// SponsorableOrder represents ordering options for connections to get sponsorable entities for GitHub Sponsors.
type SponsorableOrder struct {
	// The field to order sponsorable entities by.
	Field SponsorableOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that SponsorableOrder implements the Input interface.
var _ Input = (*SponsorableOrder)(nil)

// isInput implements the Input interface.
func (SponsorableOrder) isInput() {}

// SponsorableOrderField represents properties by which sponsorable connections can be ordered.
type SponsorableOrderField string

const (
	// SponsorableOrderFieldLogin. Order sponsorable entities by login (username).
	SponsorableOrderFieldLogin SponsorableOrderField = "LOGIN"
)

// SponsorsActivityAction represents the possible actions that GitHub Sponsors activities can represent.
type SponsorsActivityAction string

const (
	// SponsorsActivityActionNewSponsorship. The activity was starting a sponsorship.
	SponsorsActivityActionNewSponsorship SponsorsActivityAction = "NEW_SPONSORSHIP"
	// SponsorsActivityActionCancelledSponsorship. The activity was cancelling a sponsorship.
	SponsorsActivityActionCancelledSponsorship SponsorsActivityAction = "CANCELLED_SPONSORSHIP"
	// SponsorsActivityActionTierChange. The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
	SponsorsActivityActionTierChange SponsorsActivityAction = "TIER_CHANGE"
	// SponsorsActivityActionRefund. The activity was funds being refunded to the sponsor or GitHub.
	SponsorsActivityActionRefund SponsorsActivityAction = "REFUND"
	// SponsorsActivityActionPendingChange. The activity was scheduling a downgrade or cancellation.
	SponsorsActivityActionPendingChange SponsorsActivityAction = "PENDING_CHANGE"
	// SponsorsActivityActionSponsorMatchDisabled. The activity was disabling matching for a previously matched sponsorship.
	SponsorsActivityActionSponsorMatchDisabled SponsorsActivityAction = "SPONSOR_MATCH_DISABLED"
)

// SponsorsActivityOrder represents ordering options for GitHub Sponsors activity connections.
type SponsorsActivityOrder struct {
	// The field to order activity by.
	Field SponsorsActivityOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that SponsorsActivityOrder implements the Input interface.
var _ Input = (*SponsorsActivityOrder)(nil)

// isInput implements the Input interface.
func (SponsorsActivityOrder) isInput() {}

// SponsorsActivityOrderField represents properties by which GitHub Sponsors activity connections can be ordered.
type SponsorsActivityOrderField string

const (
	// SponsorsActivityOrderFieldTimestamp. Order activities by when they happened.
	SponsorsActivityOrderFieldTimestamp SponsorsActivityOrderField = "TIMESTAMP"
)

// SponsorsActivityPeriod represents the possible time periods for which Sponsors activities can be requested.
type SponsorsActivityPeriod string

const (
	// SponsorsActivityPeriodDay. The previous calendar day.
	SponsorsActivityPeriodDay SponsorsActivityPeriod = "DAY"
	// SponsorsActivityPeriodWeek. The previous seven days.
	SponsorsActivityPeriodWeek SponsorsActivityPeriod = "WEEK"
	// SponsorsActivityPeriodMonth. The previous thirty days.
	SponsorsActivityPeriodMonth SponsorsActivityPeriod = "MONTH"
	// SponsorsActivityPeriodAll. Don't restrict the activity to any date range, include all activity.
	SponsorsActivityPeriodAll SponsorsActivityPeriod = "ALL"
)

// SponsorsCountryOrRegionCode represents represents countries or regions for billing and residence for a GitHub Sponsors profile.
type SponsorsCountryOrRegionCode string

const (
	// SponsorsCountryOrRegionCodeAf. Afghanistan.
	SponsorsCountryOrRegionCodeAf SponsorsCountryOrRegionCode = "AF"
	// SponsorsCountryOrRegionCodeAx. Åland.
	SponsorsCountryOrRegionCodeAx SponsorsCountryOrRegionCode = "AX"
	// SponsorsCountryOrRegionCodeAl. Albania.
	SponsorsCountryOrRegionCodeAl SponsorsCountryOrRegionCode = "AL"
	// SponsorsCountryOrRegionCodeDz. Algeria.
	SponsorsCountryOrRegionCodeDz SponsorsCountryOrRegionCode = "DZ"
	// SponsorsCountryOrRegionCodeAs. American Samoa.
	SponsorsCountryOrRegionCodeAs SponsorsCountryOrRegionCode = "AS"
	// SponsorsCountryOrRegionCodeAd. Andorra.
	SponsorsCountryOrRegionCodeAd SponsorsCountryOrRegionCode = "AD"
	// SponsorsCountryOrRegionCodeAo. Angola.
	SponsorsCountryOrRegionCodeAo SponsorsCountryOrRegionCode = "AO"
	// SponsorsCountryOrRegionCodeAi. Anguilla.
	SponsorsCountryOrRegionCodeAi SponsorsCountryOrRegionCode = "AI"
	// SponsorsCountryOrRegionCodeAq. Antarctica.
	SponsorsCountryOrRegionCodeAq SponsorsCountryOrRegionCode = "AQ"
	// SponsorsCountryOrRegionCodeAg. Antigua and Barbuda.
	SponsorsCountryOrRegionCodeAg SponsorsCountryOrRegionCode = "AG"
	// SponsorsCountryOrRegionCodeAr. Argentina.
	SponsorsCountryOrRegionCodeAr SponsorsCountryOrRegionCode = "AR"
	// SponsorsCountryOrRegionCodeAm. Armenia.
	SponsorsCountryOrRegionCodeAm SponsorsCountryOrRegionCode = "AM"
	// SponsorsCountryOrRegionCodeAw. Aruba.
	SponsorsCountryOrRegionCodeAw SponsorsCountryOrRegionCode = "AW"
	// SponsorsCountryOrRegionCodeAu. Australia.
	SponsorsCountryOrRegionCodeAu SponsorsCountryOrRegionCode = "AU"
	// SponsorsCountryOrRegionCodeAt. Austria.
	SponsorsCountryOrRegionCodeAt SponsorsCountryOrRegionCode = "AT"
	// SponsorsCountryOrRegionCodeAz. Azerbaijan.
	SponsorsCountryOrRegionCodeAz SponsorsCountryOrRegionCode = "AZ"
	// SponsorsCountryOrRegionCodeBs. Bahamas.
	SponsorsCountryOrRegionCodeBs SponsorsCountryOrRegionCode = "BS"
	// SponsorsCountryOrRegionCodeBh. Bahrain.
	SponsorsCountryOrRegionCodeBh SponsorsCountryOrRegionCode = "BH"
	// SponsorsCountryOrRegionCodeBd. Bangladesh.
	SponsorsCountryOrRegionCodeBd SponsorsCountryOrRegionCode = "BD"
	// SponsorsCountryOrRegionCodeBb. Barbados.
	SponsorsCountryOrRegionCodeBb SponsorsCountryOrRegionCode = "BB"
	// SponsorsCountryOrRegionCodeBy. Belarus.
	SponsorsCountryOrRegionCodeBy SponsorsCountryOrRegionCode = "BY"
	// SponsorsCountryOrRegionCodeBe. Belgium.
	SponsorsCountryOrRegionCodeBe SponsorsCountryOrRegionCode = "BE"
	// SponsorsCountryOrRegionCodeBz. Belize.
	SponsorsCountryOrRegionCodeBz SponsorsCountryOrRegionCode = "BZ"
	// SponsorsCountryOrRegionCodeBj. Benin.
	SponsorsCountryOrRegionCodeBj SponsorsCountryOrRegionCode = "BJ"
	// SponsorsCountryOrRegionCodeBm. Bermuda.
	SponsorsCountryOrRegionCodeBm SponsorsCountryOrRegionCode = "BM"
	// SponsorsCountryOrRegionCodeBt. Bhutan.
	SponsorsCountryOrRegionCodeBt SponsorsCountryOrRegionCode = "BT"
	// SponsorsCountryOrRegionCodeBo. Bolivia.
	SponsorsCountryOrRegionCodeBo SponsorsCountryOrRegionCode = "BO"
	// SponsorsCountryOrRegionCodeBq. Bonaire, Sint Eustatius and Saba.
	SponsorsCountryOrRegionCodeBq SponsorsCountryOrRegionCode = "BQ"
	// SponsorsCountryOrRegionCodeBa. Bosnia and Herzegovina.
	SponsorsCountryOrRegionCodeBa SponsorsCountryOrRegionCode = "BA"
	// SponsorsCountryOrRegionCodeBw. Botswana.
	SponsorsCountryOrRegionCodeBw SponsorsCountryOrRegionCode = "BW"
	// SponsorsCountryOrRegionCodeBv. Bouvet Island.
	SponsorsCountryOrRegionCodeBv SponsorsCountryOrRegionCode = "BV"
	// SponsorsCountryOrRegionCodeBr. Brazil.
	SponsorsCountryOrRegionCodeBr SponsorsCountryOrRegionCode = "BR"
	// SponsorsCountryOrRegionCodeIo. British Indian Ocean Territory.
	SponsorsCountryOrRegionCodeIo SponsorsCountryOrRegionCode = "IO"
	// SponsorsCountryOrRegionCodeBn. Brunei Darussalam.
	SponsorsCountryOrRegionCodeBn SponsorsCountryOrRegionCode = "BN"
	// SponsorsCountryOrRegionCodeBg. Bulgaria.
	SponsorsCountryOrRegionCodeBg SponsorsCountryOrRegionCode = "BG"
	// SponsorsCountryOrRegionCodeBf. Burkina Faso.
	SponsorsCountryOrRegionCodeBf SponsorsCountryOrRegionCode = "BF"
	// SponsorsCountryOrRegionCodeBi. Burundi.
	SponsorsCountryOrRegionCodeBi SponsorsCountryOrRegionCode = "BI"
	// SponsorsCountryOrRegionCodeKh. Cambodia.
	SponsorsCountryOrRegionCodeKh SponsorsCountryOrRegionCode = "KH"
	// SponsorsCountryOrRegionCodeCm. Cameroon.
	SponsorsCountryOrRegionCodeCm SponsorsCountryOrRegionCode = "CM"
	// SponsorsCountryOrRegionCodeCa. Canada.
	SponsorsCountryOrRegionCodeCa SponsorsCountryOrRegionCode = "CA"
	// SponsorsCountryOrRegionCodeCv. Cape Verde.
	SponsorsCountryOrRegionCodeCv SponsorsCountryOrRegionCode = "CV"
	// SponsorsCountryOrRegionCodeKy. Cayman Islands.
	SponsorsCountryOrRegionCodeKy SponsorsCountryOrRegionCode = "KY"
	// SponsorsCountryOrRegionCodeCf. Central African Republic.
	SponsorsCountryOrRegionCodeCf SponsorsCountryOrRegionCode = "CF"
	// SponsorsCountryOrRegionCodeTd. Chad.
	SponsorsCountryOrRegionCodeTd SponsorsCountryOrRegionCode = "TD"
	// SponsorsCountryOrRegionCodeCl. Chile.
	SponsorsCountryOrRegionCodeCl SponsorsCountryOrRegionCode = "CL"
	// SponsorsCountryOrRegionCodeCn. China.
	SponsorsCountryOrRegionCodeCn SponsorsCountryOrRegionCode = "CN"
	// SponsorsCountryOrRegionCodeCx. Christmas Island.
	SponsorsCountryOrRegionCodeCx SponsorsCountryOrRegionCode = "CX"
	// SponsorsCountryOrRegionCodeCc. Cocos (Keeling) Islands.
	SponsorsCountryOrRegionCodeCc SponsorsCountryOrRegionCode = "CC"
	// SponsorsCountryOrRegionCodeCo. Colombia.
	SponsorsCountryOrRegionCodeCo SponsorsCountryOrRegionCode = "CO"
	// SponsorsCountryOrRegionCodeKm. Comoros.
	SponsorsCountryOrRegionCodeKm SponsorsCountryOrRegionCode = "KM"
	// SponsorsCountryOrRegionCodeCg. Congo (Brazzaville).
	SponsorsCountryOrRegionCodeCg SponsorsCountryOrRegionCode = "CG"
	// SponsorsCountryOrRegionCodeCd. Congo (Kinshasa).
	SponsorsCountryOrRegionCodeCd SponsorsCountryOrRegionCode = "CD"
	// SponsorsCountryOrRegionCodeCk. Cook Islands.
	SponsorsCountryOrRegionCodeCk SponsorsCountryOrRegionCode = "CK"
	// SponsorsCountryOrRegionCodeCr. Costa Rica.
	SponsorsCountryOrRegionCodeCr SponsorsCountryOrRegionCode = "CR"
	// SponsorsCountryOrRegionCodeCi. Côte d'Ivoire.
	SponsorsCountryOrRegionCodeCi SponsorsCountryOrRegionCode = "CI"
	// SponsorsCountryOrRegionCodeHr. Croatia.
	SponsorsCountryOrRegionCodeHr SponsorsCountryOrRegionCode = "HR"
	// SponsorsCountryOrRegionCodeCw. Curaçao.
	SponsorsCountryOrRegionCodeCw SponsorsCountryOrRegionCode = "CW"
	// SponsorsCountryOrRegionCodeCy. Cyprus.
	SponsorsCountryOrRegionCodeCy SponsorsCountryOrRegionCode = "CY"
	// SponsorsCountryOrRegionCodeCz. Czech Republic.
	SponsorsCountryOrRegionCodeCz SponsorsCountryOrRegionCode = "CZ"
	// SponsorsCountryOrRegionCodeDk. Denmark.
	SponsorsCountryOrRegionCodeDk SponsorsCountryOrRegionCode = "DK"
	// SponsorsCountryOrRegionCodeDj. Djibouti.
	SponsorsCountryOrRegionCodeDj SponsorsCountryOrRegionCode = "DJ"
	// SponsorsCountryOrRegionCodeDm. Dominica.
	SponsorsCountryOrRegionCodeDm SponsorsCountryOrRegionCode = "DM"
	// SponsorsCountryOrRegionCodeDo. Dominican Republic.
	SponsorsCountryOrRegionCodeDo SponsorsCountryOrRegionCode = "DO"
	// SponsorsCountryOrRegionCodeEc. Ecuador.
	SponsorsCountryOrRegionCodeEc SponsorsCountryOrRegionCode = "EC"
	// SponsorsCountryOrRegionCodeEg. Egypt.
	SponsorsCountryOrRegionCodeEg SponsorsCountryOrRegionCode = "EG"
	// SponsorsCountryOrRegionCodeSv. El Salvador.
	SponsorsCountryOrRegionCodeSv SponsorsCountryOrRegionCode = "SV"
	// SponsorsCountryOrRegionCodeGq. Equatorial Guinea.
	SponsorsCountryOrRegionCodeGq SponsorsCountryOrRegionCode = "GQ"
	// SponsorsCountryOrRegionCodeEr. Eritrea.
	SponsorsCountryOrRegionCodeEr SponsorsCountryOrRegionCode = "ER"
	// SponsorsCountryOrRegionCodeEe. Estonia.
	SponsorsCountryOrRegionCodeEe SponsorsCountryOrRegionCode = "EE"
	// SponsorsCountryOrRegionCodeEt. Ethiopia.
	SponsorsCountryOrRegionCodeEt SponsorsCountryOrRegionCode = "ET"
	// SponsorsCountryOrRegionCodeFk. Falkland Islands.
	SponsorsCountryOrRegionCodeFk SponsorsCountryOrRegionCode = "FK"
	// SponsorsCountryOrRegionCodeFo. Faroe Islands.
	SponsorsCountryOrRegionCodeFo SponsorsCountryOrRegionCode = "FO"
	// SponsorsCountryOrRegionCodeFj. Fiji.
	SponsorsCountryOrRegionCodeFj SponsorsCountryOrRegionCode = "FJ"
	// SponsorsCountryOrRegionCodeFi. Finland.
	SponsorsCountryOrRegionCodeFi SponsorsCountryOrRegionCode = "FI"
	// SponsorsCountryOrRegionCodeFr. France.
	SponsorsCountryOrRegionCodeFr SponsorsCountryOrRegionCode = "FR"
	// SponsorsCountryOrRegionCodeGf. French Guiana.
	SponsorsCountryOrRegionCodeGf SponsorsCountryOrRegionCode = "GF"
	// SponsorsCountryOrRegionCodePf. French Polynesia.
	SponsorsCountryOrRegionCodePf SponsorsCountryOrRegionCode = "PF"
	// SponsorsCountryOrRegionCodeTf. French Southern Lands.
	SponsorsCountryOrRegionCodeTf SponsorsCountryOrRegionCode = "TF"
	// SponsorsCountryOrRegionCodeGa. Gabon.
	SponsorsCountryOrRegionCodeGa SponsorsCountryOrRegionCode = "GA"
	// SponsorsCountryOrRegionCodeGm. Gambia.
	SponsorsCountryOrRegionCodeGm SponsorsCountryOrRegionCode = "GM"
	// SponsorsCountryOrRegionCodeGe. Georgia.
	SponsorsCountryOrRegionCodeGe SponsorsCountryOrRegionCode = "GE"
	// SponsorsCountryOrRegionCodeDe. Germany.
	SponsorsCountryOrRegionCodeDe SponsorsCountryOrRegionCode = "DE"
	// SponsorsCountryOrRegionCodeGh. Ghana.
	SponsorsCountryOrRegionCodeGh SponsorsCountryOrRegionCode = "GH"
	// SponsorsCountryOrRegionCodeGi. Gibraltar.
	SponsorsCountryOrRegionCodeGi SponsorsCountryOrRegionCode = "GI"
	// SponsorsCountryOrRegionCodeGr. Greece.
	SponsorsCountryOrRegionCodeGr SponsorsCountryOrRegionCode = "GR"
	// SponsorsCountryOrRegionCodeGl. Greenland.
	SponsorsCountryOrRegionCodeGl SponsorsCountryOrRegionCode = "GL"
	// SponsorsCountryOrRegionCodeGd. Grenada.
	SponsorsCountryOrRegionCodeGd SponsorsCountryOrRegionCode = "GD"
	// SponsorsCountryOrRegionCodeGp. Guadeloupe.
	SponsorsCountryOrRegionCodeGp SponsorsCountryOrRegionCode = "GP"
	// SponsorsCountryOrRegionCodeGu. Guam.
	SponsorsCountryOrRegionCodeGu SponsorsCountryOrRegionCode = "GU"
	// SponsorsCountryOrRegionCodeGt. Guatemala.
	SponsorsCountryOrRegionCodeGt SponsorsCountryOrRegionCode = "GT"
	// SponsorsCountryOrRegionCodeGg. Guernsey.
	SponsorsCountryOrRegionCodeGg SponsorsCountryOrRegionCode = "GG"
	// SponsorsCountryOrRegionCodeGn. Guinea.
	SponsorsCountryOrRegionCodeGn SponsorsCountryOrRegionCode = "GN"
	// SponsorsCountryOrRegionCodeGw. Guinea-Bissau.
	SponsorsCountryOrRegionCodeGw SponsorsCountryOrRegionCode = "GW"
	// SponsorsCountryOrRegionCodeGy. Guyana.
	SponsorsCountryOrRegionCodeGy SponsorsCountryOrRegionCode = "GY"
	// SponsorsCountryOrRegionCodeHt. Haiti.
	SponsorsCountryOrRegionCodeHt SponsorsCountryOrRegionCode = "HT"
	// SponsorsCountryOrRegionCodeHm. Heard and McDonald Islands.
	SponsorsCountryOrRegionCodeHm SponsorsCountryOrRegionCode = "HM"
	// SponsorsCountryOrRegionCodeHn. Honduras.
	SponsorsCountryOrRegionCodeHn SponsorsCountryOrRegionCode = "HN"
	// SponsorsCountryOrRegionCodeHk. Hong Kong.
	SponsorsCountryOrRegionCodeHk SponsorsCountryOrRegionCode = "HK"
	// SponsorsCountryOrRegionCodeHu. Hungary.
	SponsorsCountryOrRegionCodeHu SponsorsCountryOrRegionCode = "HU"
	// SponsorsCountryOrRegionCodeIs. Iceland.
	SponsorsCountryOrRegionCodeIs SponsorsCountryOrRegionCode = "IS"
	// SponsorsCountryOrRegionCodeIn. India.
	SponsorsCountryOrRegionCodeIn SponsorsCountryOrRegionCode = "IN"
	// SponsorsCountryOrRegionCodeID. Indonesia.
	SponsorsCountryOrRegionCodeID SponsorsCountryOrRegionCode = "ID"
	// SponsorsCountryOrRegionCodeIr. Iran.
	SponsorsCountryOrRegionCodeIr SponsorsCountryOrRegionCode = "IR"
	// SponsorsCountryOrRegionCodeIq. Iraq.
	SponsorsCountryOrRegionCodeIq SponsorsCountryOrRegionCode = "IQ"
	// SponsorsCountryOrRegionCodeIe. Ireland.
	SponsorsCountryOrRegionCodeIe SponsorsCountryOrRegionCode = "IE"
	// SponsorsCountryOrRegionCodeIm. Isle of Man.
	SponsorsCountryOrRegionCodeIm SponsorsCountryOrRegionCode = "IM"
	// SponsorsCountryOrRegionCodeIl. Israel.
	SponsorsCountryOrRegionCodeIl SponsorsCountryOrRegionCode = "IL"
	// SponsorsCountryOrRegionCodeIt. Italy.
	SponsorsCountryOrRegionCodeIt SponsorsCountryOrRegionCode = "IT"
	// SponsorsCountryOrRegionCodeJm. Jamaica.
	SponsorsCountryOrRegionCodeJm SponsorsCountryOrRegionCode = "JM"
	// SponsorsCountryOrRegionCodeJp. Japan.
	SponsorsCountryOrRegionCodeJp SponsorsCountryOrRegionCode = "JP"
	// SponsorsCountryOrRegionCodeJe. Jersey.
	SponsorsCountryOrRegionCodeJe SponsorsCountryOrRegionCode = "JE"
	// SponsorsCountryOrRegionCodeJo. Jordan.
	SponsorsCountryOrRegionCodeJo SponsorsCountryOrRegionCode = "JO"
	// SponsorsCountryOrRegionCodeKz. Kazakhstan.
	SponsorsCountryOrRegionCodeKz SponsorsCountryOrRegionCode = "KZ"
	// SponsorsCountryOrRegionCodeKe. Kenya.
	SponsorsCountryOrRegionCodeKe SponsorsCountryOrRegionCode = "KE"
	// SponsorsCountryOrRegionCodeKi. Kiribati.
	SponsorsCountryOrRegionCodeKi SponsorsCountryOrRegionCode = "KI"
	// SponsorsCountryOrRegionCodeKr. Korea, South.
	SponsorsCountryOrRegionCodeKr SponsorsCountryOrRegionCode = "KR"
	// SponsorsCountryOrRegionCodeKw. Kuwait.
	SponsorsCountryOrRegionCodeKw SponsorsCountryOrRegionCode = "KW"
	// SponsorsCountryOrRegionCodeKg. Kyrgyzstan.
	SponsorsCountryOrRegionCodeKg SponsorsCountryOrRegionCode = "KG"
	// SponsorsCountryOrRegionCodeLa. Laos.
	SponsorsCountryOrRegionCodeLa SponsorsCountryOrRegionCode = "LA"
	// SponsorsCountryOrRegionCodeLv. Latvia.
	SponsorsCountryOrRegionCodeLv SponsorsCountryOrRegionCode = "LV"
	// SponsorsCountryOrRegionCodeLb. Lebanon.
	SponsorsCountryOrRegionCodeLb SponsorsCountryOrRegionCode = "LB"
	// SponsorsCountryOrRegionCodeLs. Lesotho.
	SponsorsCountryOrRegionCodeLs SponsorsCountryOrRegionCode = "LS"
	// SponsorsCountryOrRegionCodeLr. Liberia.
	SponsorsCountryOrRegionCodeLr SponsorsCountryOrRegionCode = "LR"
	// SponsorsCountryOrRegionCodeLy. Libya.
	SponsorsCountryOrRegionCodeLy SponsorsCountryOrRegionCode = "LY"
	// SponsorsCountryOrRegionCodeLi. Liechtenstein.
	SponsorsCountryOrRegionCodeLi SponsorsCountryOrRegionCode = "LI"
	// SponsorsCountryOrRegionCodeLt. Lithuania.
	SponsorsCountryOrRegionCodeLt SponsorsCountryOrRegionCode = "LT"
	// SponsorsCountryOrRegionCodeLu. Luxembourg.
	SponsorsCountryOrRegionCodeLu SponsorsCountryOrRegionCode = "LU"
	// SponsorsCountryOrRegionCodeMo. Macau.
	SponsorsCountryOrRegionCodeMo SponsorsCountryOrRegionCode = "MO"
	// SponsorsCountryOrRegionCodeMk. Macedonia.
	SponsorsCountryOrRegionCodeMk SponsorsCountryOrRegionCode = "MK"
	// SponsorsCountryOrRegionCodeMg. Madagascar.
	SponsorsCountryOrRegionCodeMg SponsorsCountryOrRegionCode = "MG"
	// SponsorsCountryOrRegionCodeMw. Malawi.
	SponsorsCountryOrRegionCodeMw SponsorsCountryOrRegionCode = "MW"
	// SponsorsCountryOrRegionCodeMy. Malaysia.
	SponsorsCountryOrRegionCodeMy SponsorsCountryOrRegionCode = "MY"
	// SponsorsCountryOrRegionCodeMv. Maldives.
	SponsorsCountryOrRegionCodeMv SponsorsCountryOrRegionCode = "MV"
	// SponsorsCountryOrRegionCodeMl. Mali.
	SponsorsCountryOrRegionCodeMl SponsorsCountryOrRegionCode = "ML"
	// SponsorsCountryOrRegionCodeMt. Malta.
	SponsorsCountryOrRegionCodeMt SponsorsCountryOrRegionCode = "MT"
	// SponsorsCountryOrRegionCodeMh. Marshall Islands.
	SponsorsCountryOrRegionCodeMh SponsorsCountryOrRegionCode = "MH"
	// SponsorsCountryOrRegionCodeMq. Martinique.
	SponsorsCountryOrRegionCodeMq SponsorsCountryOrRegionCode = "MQ"
	// SponsorsCountryOrRegionCodeMr. Mauritania.
	SponsorsCountryOrRegionCodeMr SponsorsCountryOrRegionCode = "MR"
	// SponsorsCountryOrRegionCodeMu. Mauritius.
	SponsorsCountryOrRegionCodeMu SponsorsCountryOrRegionCode = "MU"
	// SponsorsCountryOrRegionCodeYt. Mayotte.
	SponsorsCountryOrRegionCodeYt SponsorsCountryOrRegionCode = "YT"
	// SponsorsCountryOrRegionCodeMx. Mexico.
	SponsorsCountryOrRegionCodeMx SponsorsCountryOrRegionCode = "MX"
	// SponsorsCountryOrRegionCodeFm. Micronesia.
	SponsorsCountryOrRegionCodeFm SponsorsCountryOrRegionCode = "FM"
	// SponsorsCountryOrRegionCodeMd. Moldova.
	SponsorsCountryOrRegionCodeMd SponsorsCountryOrRegionCode = "MD"
	// SponsorsCountryOrRegionCodeMc. Monaco.
	SponsorsCountryOrRegionCodeMc SponsorsCountryOrRegionCode = "MC"
	// SponsorsCountryOrRegionCodeMn. Mongolia.
	SponsorsCountryOrRegionCodeMn SponsorsCountryOrRegionCode = "MN"
	// SponsorsCountryOrRegionCodeMe. Montenegro.
	SponsorsCountryOrRegionCodeMe SponsorsCountryOrRegionCode = "ME"
	// SponsorsCountryOrRegionCodeMs. Montserrat.
	SponsorsCountryOrRegionCodeMs SponsorsCountryOrRegionCode = "MS"
	// SponsorsCountryOrRegionCodeMa. Morocco.
	SponsorsCountryOrRegionCodeMa SponsorsCountryOrRegionCode = "MA"
	// SponsorsCountryOrRegionCodeMz. Mozambique.
	SponsorsCountryOrRegionCodeMz SponsorsCountryOrRegionCode = "MZ"
	// SponsorsCountryOrRegionCodeMm. Myanmar.
	SponsorsCountryOrRegionCodeMm SponsorsCountryOrRegionCode = "MM"
	// SponsorsCountryOrRegionCodeNa. Namibia.
	SponsorsCountryOrRegionCodeNa SponsorsCountryOrRegionCode = "NA"
	// SponsorsCountryOrRegionCodeNr. Nauru.
	SponsorsCountryOrRegionCodeNr SponsorsCountryOrRegionCode = "NR"
	// SponsorsCountryOrRegionCodeNp. Nepal.
	SponsorsCountryOrRegionCodeNp SponsorsCountryOrRegionCode = "NP"
	// SponsorsCountryOrRegionCodeNl. Netherlands.
	SponsorsCountryOrRegionCodeNl SponsorsCountryOrRegionCode = "NL"
	// SponsorsCountryOrRegionCodeNc. New Caledonia.
	SponsorsCountryOrRegionCodeNc SponsorsCountryOrRegionCode = "NC"
	// SponsorsCountryOrRegionCodeNz. New Zealand.
	SponsorsCountryOrRegionCodeNz SponsorsCountryOrRegionCode = "NZ"
	// SponsorsCountryOrRegionCodeNi. Nicaragua.
	SponsorsCountryOrRegionCodeNi SponsorsCountryOrRegionCode = "NI"
	// SponsorsCountryOrRegionCodeNe. Niger.
	SponsorsCountryOrRegionCodeNe SponsorsCountryOrRegionCode = "NE"
	// SponsorsCountryOrRegionCodeNg. Nigeria.
	SponsorsCountryOrRegionCodeNg SponsorsCountryOrRegionCode = "NG"
	// SponsorsCountryOrRegionCodeNu. Niue.
	SponsorsCountryOrRegionCodeNu SponsorsCountryOrRegionCode = "NU"
	// SponsorsCountryOrRegionCodeNf. Norfolk Island.
	SponsorsCountryOrRegionCodeNf SponsorsCountryOrRegionCode = "NF"
	// SponsorsCountryOrRegionCodeMp. Northern Mariana Islands.
	SponsorsCountryOrRegionCodeMp SponsorsCountryOrRegionCode = "MP"
	// SponsorsCountryOrRegionCodeNo. Norway.
	SponsorsCountryOrRegionCodeNo SponsorsCountryOrRegionCode = "NO"
	// SponsorsCountryOrRegionCodeOm. Oman.
	SponsorsCountryOrRegionCodeOm SponsorsCountryOrRegionCode = "OM"
	// SponsorsCountryOrRegionCodePk. Pakistan.
	SponsorsCountryOrRegionCodePk SponsorsCountryOrRegionCode = "PK"
	// SponsorsCountryOrRegionCodePw. Palau.
	SponsorsCountryOrRegionCodePw SponsorsCountryOrRegionCode = "PW"
	// SponsorsCountryOrRegionCodePs. Palestine.
	SponsorsCountryOrRegionCodePs SponsorsCountryOrRegionCode = "PS"
	// SponsorsCountryOrRegionCodePa. Panama.
	SponsorsCountryOrRegionCodePa SponsorsCountryOrRegionCode = "PA"
	// SponsorsCountryOrRegionCodePg. Papua New Guinea.
	SponsorsCountryOrRegionCodePg SponsorsCountryOrRegionCode = "PG"
	// SponsorsCountryOrRegionCodePy. Paraguay.
	SponsorsCountryOrRegionCodePy SponsorsCountryOrRegionCode = "PY"
	// SponsorsCountryOrRegionCodePe. Peru.
	SponsorsCountryOrRegionCodePe SponsorsCountryOrRegionCode = "PE"
	// SponsorsCountryOrRegionCodePh. Philippines.
	SponsorsCountryOrRegionCodePh SponsorsCountryOrRegionCode = "PH"
	// SponsorsCountryOrRegionCodePn. Pitcairn.
	SponsorsCountryOrRegionCodePn SponsorsCountryOrRegionCode = "PN"
	// SponsorsCountryOrRegionCodePl. Poland.
	SponsorsCountryOrRegionCodePl SponsorsCountryOrRegionCode = "PL"
	// SponsorsCountryOrRegionCodePt. Portugal.
	SponsorsCountryOrRegionCodePt SponsorsCountryOrRegionCode = "PT"
	// SponsorsCountryOrRegionCodePr. Puerto Rico.
	SponsorsCountryOrRegionCodePr SponsorsCountryOrRegionCode = "PR"
	// SponsorsCountryOrRegionCodeQa. Qatar.
	SponsorsCountryOrRegionCodeQa SponsorsCountryOrRegionCode = "QA"
	// SponsorsCountryOrRegionCodeRe. Reunion.
	SponsorsCountryOrRegionCodeRe SponsorsCountryOrRegionCode = "RE"
	// SponsorsCountryOrRegionCodeRo. Romania.
	SponsorsCountryOrRegionCodeRo SponsorsCountryOrRegionCode = "RO"
	// SponsorsCountryOrRegionCodeRu. Russian Federation.
	SponsorsCountryOrRegionCodeRu SponsorsCountryOrRegionCode = "RU"
	// SponsorsCountryOrRegionCodeRw. Rwanda.
	SponsorsCountryOrRegionCodeRw SponsorsCountryOrRegionCode = "RW"
	// SponsorsCountryOrRegionCodeBl. Saint Barthélemy.
	SponsorsCountryOrRegionCodeBl SponsorsCountryOrRegionCode = "BL"
	// SponsorsCountryOrRegionCodeSh. Saint Helena.
	SponsorsCountryOrRegionCodeSh SponsorsCountryOrRegionCode = "SH"
	// SponsorsCountryOrRegionCodeKn. Saint Kitts and Nevis.
	SponsorsCountryOrRegionCodeKn SponsorsCountryOrRegionCode = "KN"
	// SponsorsCountryOrRegionCodeLc. Saint Lucia.
	SponsorsCountryOrRegionCodeLc SponsorsCountryOrRegionCode = "LC"
	// SponsorsCountryOrRegionCodeMf. Saint Martin (French part).
	SponsorsCountryOrRegionCodeMf SponsorsCountryOrRegionCode = "MF"
	// SponsorsCountryOrRegionCodePm. Saint Pierre and Miquelon.
	SponsorsCountryOrRegionCodePm SponsorsCountryOrRegionCode = "PM"
	// SponsorsCountryOrRegionCodeVc. Saint Vincent and the Grenadines.
	SponsorsCountryOrRegionCodeVc SponsorsCountryOrRegionCode = "VC"
	// SponsorsCountryOrRegionCodeWs. Samoa.
	SponsorsCountryOrRegionCodeWs SponsorsCountryOrRegionCode = "WS"
	// SponsorsCountryOrRegionCodeSm. San Marino.
	SponsorsCountryOrRegionCodeSm SponsorsCountryOrRegionCode = "SM"
	// SponsorsCountryOrRegionCodeSt. Sao Tome and Principe.
	SponsorsCountryOrRegionCodeSt SponsorsCountryOrRegionCode = "ST"
	// SponsorsCountryOrRegionCodeSa. Saudi Arabia.
	SponsorsCountryOrRegionCodeSa SponsorsCountryOrRegionCode = "SA"
	// SponsorsCountryOrRegionCodeSn. Senegal.
	SponsorsCountryOrRegionCodeSn SponsorsCountryOrRegionCode = "SN"
	// SponsorsCountryOrRegionCodeRs. Serbia.
	SponsorsCountryOrRegionCodeRs SponsorsCountryOrRegionCode = "RS"
	// SponsorsCountryOrRegionCodeSc. Seychelles.
	SponsorsCountryOrRegionCodeSc SponsorsCountryOrRegionCode = "SC"
	// SponsorsCountryOrRegionCodeSl. Sierra Leone.
	SponsorsCountryOrRegionCodeSl SponsorsCountryOrRegionCode = "SL"
	// SponsorsCountryOrRegionCodeSg. Singapore.
	SponsorsCountryOrRegionCodeSg SponsorsCountryOrRegionCode = "SG"
	// SponsorsCountryOrRegionCodeSx. Sint Maarten (Dutch part).
	SponsorsCountryOrRegionCodeSx SponsorsCountryOrRegionCode = "SX"
	// SponsorsCountryOrRegionCodeSk. Slovakia.
	SponsorsCountryOrRegionCodeSk SponsorsCountryOrRegionCode = "SK"
	// SponsorsCountryOrRegionCodeSi. Slovenia.
	SponsorsCountryOrRegionCodeSi SponsorsCountryOrRegionCode = "SI"
	// SponsorsCountryOrRegionCodeSb. Solomon Islands.
	SponsorsCountryOrRegionCodeSb SponsorsCountryOrRegionCode = "SB"
	// SponsorsCountryOrRegionCodeSo. Somalia.
	SponsorsCountryOrRegionCodeSo SponsorsCountryOrRegionCode = "SO"
	// SponsorsCountryOrRegionCodeZa. South Africa.
	SponsorsCountryOrRegionCodeZa SponsorsCountryOrRegionCode = "ZA"
	// SponsorsCountryOrRegionCodeGs. South Georgia and South Sandwich Islands.
	SponsorsCountryOrRegionCodeGs SponsorsCountryOrRegionCode = "GS"
	// SponsorsCountryOrRegionCodeSs. South Sudan.
	SponsorsCountryOrRegionCodeSs SponsorsCountryOrRegionCode = "SS"
	// SponsorsCountryOrRegionCodeEs. Spain.
	SponsorsCountryOrRegionCodeEs SponsorsCountryOrRegionCode = "ES"
	// SponsorsCountryOrRegionCodeLk. Sri Lanka.
	SponsorsCountryOrRegionCodeLk SponsorsCountryOrRegionCode = "LK"
	// SponsorsCountryOrRegionCodeSd. Sudan.
	SponsorsCountryOrRegionCodeSd SponsorsCountryOrRegionCode = "SD"
	// SponsorsCountryOrRegionCodeSr. Suriname.
	SponsorsCountryOrRegionCodeSr SponsorsCountryOrRegionCode = "SR"
	// SponsorsCountryOrRegionCodeSj. Svalbard and Jan Mayen Islands.
	SponsorsCountryOrRegionCodeSj SponsorsCountryOrRegionCode = "SJ"
	// SponsorsCountryOrRegionCodeSz. Swaziland.
	SponsorsCountryOrRegionCodeSz SponsorsCountryOrRegionCode = "SZ"
	// SponsorsCountryOrRegionCodeSe. Sweden.
	SponsorsCountryOrRegionCodeSe SponsorsCountryOrRegionCode = "SE"
	// SponsorsCountryOrRegionCodeCh. Switzerland.
	SponsorsCountryOrRegionCodeCh SponsorsCountryOrRegionCode = "CH"
	// SponsorsCountryOrRegionCodeTw. Taiwan.
	SponsorsCountryOrRegionCodeTw SponsorsCountryOrRegionCode = "TW"
	// SponsorsCountryOrRegionCodeTj. Tajikistan.
	SponsorsCountryOrRegionCodeTj SponsorsCountryOrRegionCode = "TJ"
	// SponsorsCountryOrRegionCodeTz. Tanzania.
	SponsorsCountryOrRegionCodeTz SponsorsCountryOrRegionCode = "TZ"
	// SponsorsCountryOrRegionCodeTh. Thailand.
	SponsorsCountryOrRegionCodeTh SponsorsCountryOrRegionCode = "TH"
	// SponsorsCountryOrRegionCodeTl. Timor-Leste.
	SponsorsCountryOrRegionCodeTl SponsorsCountryOrRegionCode = "TL"
	// SponsorsCountryOrRegionCodeTg. Togo.
	SponsorsCountryOrRegionCodeTg SponsorsCountryOrRegionCode = "TG"
	// SponsorsCountryOrRegionCodeTk. Tokelau.
	SponsorsCountryOrRegionCodeTk SponsorsCountryOrRegionCode = "TK"
	// SponsorsCountryOrRegionCodeTo. Tonga.
	SponsorsCountryOrRegionCodeTo SponsorsCountryOrRegionCode = "TO"
	// SponsorsCountryOrRegionCodeTt. Trinidad and Tobago.
	SponsorsCountryOrRegionCodeTt SponsorsCountryOrRegionCode = "TT"
	// SponsorsCountryOrRegionCodeTn. Tunisia.
	SponsorsCountryOrRegionCodeTn SponsorsCountryOrRegionCode = "TN"
	// SponsorsCountryOrRegionCodeTr. Turkey.
	SponsorsCountryOrRegionCodeTr SponsorsCountryOrRegionCode = "TR"
	// SponsorsCountryOrRegionCodeTm. Turkmenistan.
	SponsorsCountryOrRegionCodeTm SponsorsCountryOrRegionCode = "TM"
	// SponsorsCountryOrRegionCodeTc. Turks and Caicos Islands.
	SponsorsCountryOrRegionCodeTc SponsorsCountryOrRegionCode = "TC"
	// SponsorsCountryOrRegionCodeTv. Tuvalu.
	SponsorsCountryOrRegionCodeTv SponsorsCountryOrRegionCode = "TV"
	// SponsorsCountryOrRegionCodeUg. Uganda.
	SponsorsCountryOrRegionCodeUg SponsorsCountryOrRegionCode = "UG"
	// SponsorsCountryOrRegionCodeUa. Ukraine.
	SponsorsCountryOrRegionCodeUa SponsorsCountryOrRegionCode = "UA"
	// SponsorsCountryOrRegionCodeAe. United Arab Emirates.
	SponsorsCountryOrRegionCodeAe SponsorsCountryOrRegionCode = "AE"
	// SponsorsCountryOrRegionCodeGb. United Kingdom.
	SponsorsCountryOrRegionCodeGb SponsorsCountryOrRegionCode = "GB"
	// SponsorsCountryOrRegionCodeUm. United States Minor Outlying Islands.
	SponsorsCountryOrRegionCodeUm SponsorsCountryOrRegionCode = "UM"
	// SponsorsCountryOrRegionCodeUs. United States of America.
	SponsorsCountryOrRegionCodeUs SponsorsCountryOrRegionCode = "US"
	// SponsorsCountryOrRegionCodeUy. Uruguay.
	SponsorsCountryOrRegionCodeUy SponsorsCountryOrRegionCode = "UY"
	// SponsorsCountryOrRegionCodeUz. Uzbekistan.
	SponsorsCountryOrRegionCodeUz SponsorsCountryOrRegionCode = "UZ"
	// SponsorsCountryOrRegionCodeVu. Vanuatu.
	SponsorsCountryOrRegionCodeVu SponsorsCountryOrRegionCode = "VU"
	// SponsorsCountryOrRegionCodeVa. Vatican City.
	SponsorsCountryOrRegionCodeVa SponsorsCountryOrRegionCode = "VA"
	// SponsorsCountryOrRegionCodeVe. Venezuela.
	SponsorsCountryOrRegionCodeVe SponsorsCountryOrRegionCode = "VE"
	// SponsorsCountryOrRegionCodeVn. Vietnam.
	SponsorsCountryOrRegionCodeVn SponsorsCountryOrRegionCode = "VN"
	// SponsorsCountryOrRegionCodeVg. Virgin Islands, British.
	SponsorsCountryOrRegionCodeVg SponsorsCountryOrRegionCode = "VG"
	// SponsorsCountryOrRegionCodeVi. Virgin Islands, U.S.
	SponsorsCountryOrRegionCodeVi SponsorsCountryOrRegionCode = "VI"
	// SponsorsCountryOrRegionCodeWf. Wallis and Futuna Islands.
	SponsorsCountryOrRegionCodeWf SponsorsCountryOrRegionCode = "WF"
	// SponsorsCountryOrRegionCodeEh. Western Sahara.
	SponsorsCountryOrRegionCodeEh SponsorsCountryOrRegionCode = "EH"
	// SponsorsCountryOrRegionCodeYe. Yemen.
	SponsorsCountryOrRegionCodeYe SponsorsCountryOrRegionCode = "YE"
	// SponsorsCountryOrRegionCodeZm. Zambia.
	SponsorsCountryOrRegionCodeZm SponsorsCountryOrRegionCode = "ZM"
	// SponsorsCountryOrRegionCodeZw. Zimbabwe.
	SponsorsCountryOrRegionCodeZw SponsorsCountryOrRegionCode = "ZW"
)

// SponsorsGoalKind represents the different kinds of goals a GitHub Sponsors member can have.
type SponsorsGoalKind string

const (
	// SponsorsGoalKindTotalSponsorsCount. The goal is about reaching a certain number of sponsors.
	SponsorsGoalKindTotalSponsorsCount SponsorsGoalKind = "TOTAL_SPONSORS_COUNT"
	// SponsorsGoalKindMonthlySponsorshipAmount. The goal is about getting a certain amount in USD from sponsorships each month.
	SponsorsGoalKindMonthlySponsorshipAmount SponsorsGoalKind = "MONTHLY_SPONSORSHIP_AMOUNT"
)

// SponsorsListingFeaturedItemFeatureableType represents the different kinds of records that can be featured on a GitHub Sponsors profile page.
type SponsorsListingFeaturedItemFeatureableType string

const (
	// SponsorsListingFeaturedItemFeatureableTypeRepository. A repository owned by the user or organization with the GitHub Sponsors profile.
	SponsorsListingFeaturedItemFeatureableTypeRepository SponsorsListingFeaturedItemFeatureableType = "REPOSITORY"
	// SponsorsListingFeaturedItemFeatureableTypeUser. A user who belongs to the organization with the GitHub Sponsors profile.
	SponsorsListingFeaturedItemFeatureableTypeUser SponsorsListingFeaturedItemFeatureableType = "USER"
)

// SponsorsTierOrder represents ordering options for Sponsors tiers connections.
type SponsorsTierOrder struct {
	// The field to order tiers by.
	Field SponsorsTierOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that SponsorsTierOrder implements the Input interface.
var _ Input = (*SponsorsTierOrder)(nil)

// isInput implements the Input interface.
func (SponsorsTierOrder) isInput() {}

// SponsorsTierOrderField represents properties by which Sponsors tiers connections can be ordered.
type SponsorsTierOrderField string

const (
	// SponsorsTierOrderFieldCreatedAt. Order tiers by creation time.
	SponsorsTierOrderFieldCreatedAt SponsorsTierOrderField = "CREATED_AT"
	// SponsorsTierOrderFieldMonthlyPriceInCents. Order tiers by their monthly price in cents.
	SponsorsTierOrderFieldMonthlyPriceInCents SponsorsTierOrderField = "MONTHLY_PRICE_IN_CENTS"
)

// SponsorshipNewsletterOrder represents ordering options for sponsorship newsletter connections.
type SponsorshipNewsletterOrder struct {
	// The field to order sponsorship newsletters by.
	Field SponsorshipNewsletterOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that SponsorshipNewsletterOrder implements the Input interface.
var _ Input = (*SponsorshipNewsletterOrder)(nil)

// isInput implements the Input interface.
func (SponsorshipNewsletterOrder) isInput() {}

// SponsorshipNewsletterOrderField represents properties by which sponsorship update connections can be ordered.
type SponsorshipNewsletterOrderField string

const (
	// SponsorshipNewsletterOrderFieldCreatedAt. Order sponsorship newsletters by when they were created.
	SponsorshipNewsletterOrderFieldCreatedAt SponsorshipNewsletterOrderField = "CREATED_AT"
)

// SponsorshipOrder represents ordering options for sponsorship connections.
type SponsorshipOrder struct {
	// The field to order sponsorship by.
	Field SponsorshipOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that SponsorshipOrder implements the Input interface.
var _ Input = (*SponsorshipOrder)(nil)

// isInput implements the Input interface.
func (SponsorshipOrder) isInput() {}

// SponsorshipOrderField represents properties by which sponsorship connections can be ordered.
type SponsorshipOrderField string

const (
	// SponsorshipOrderFieldCreatedAt. Order sponsorship by creation time.
	SponsorshipOrderFieldCreatedAt SponsorshipOrderField = "CREATED_AT"
)

// SponsorshipPrivacy represents the privacy of a sponsorship.
type SponsorshipPrivacy string

const (
	// SponsorshipPrivacyPublic. Public.
	SponsorshipPrivacyPublic SponsorshipPrivacy = "PUBLIC"
	// SponsorshipPrivacyPrivate. Private.
	SponsorshipPrivacyPrivate SponsorshipPrivacy = "PRIVATE"
)

// SquashMergeCommitMessage represents the possible default commit messages for squash merges.
type SquashMergeCommitMessage string

const (
	// SquashMergeCommitMessagePrBody. Default to the pull request's body.
	SquashMergeCommitMessagePrBody SquashMergeCommitMessage = "PR_BODY"
	// SquashMergeCommitMessageCommitMessages. Default to the branch's commit messages.
	SquashMergeCommitMessageCommitMessages SquashMergeCommitMessage = "COMMIT_MESSAGES"
	// SquashMergeCommitMessageBlank. Default to a blank commit message.
	SquashMergeCommitMessageBlank SquashMergeCommitMessage = "BLANK"
)

// SquashMergeCommitTitle represents the possible default commit titles for squash merges.
type SquashMergeCommitTitle string

const (
	// SquashMergeCommitTitlePrTitle. Default to the pull request's title.
	SquashMergeCommitTitlePrTitle SquashMergeCommitTitle = "PR_TITLE"
	// SquashMergeCommitTitleCommitOrPrTitle. Default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
	SquashMergeCommitTitleCommitOrPrTitle SquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
)

// StarOrder represents ways in which star connections can be ordered.
type StarOrder struct {
	// The field in which to order nodes by.
	Field StarOrderField "json:\"field\""
	// The direction in which to order nodes.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that StarOrder implements the Input interface.
var _ Input = (*StarOrder)(nil)

// isInput implements the Input interface.
func (StarOrder) isInput() {}

// StarOrderField represents properties by which star connections can be ordered.
type StarOrderField string

const (
	// StarOrderFieldStarredAt. Allows ordering a list of stars by when they were created.
	StarOrderFieldStarredAt StarOrderField = "STARRED_AT"
)

// StartOrganizationMigrationInput is an autogenerated input type of StartOrganizationMigration.
type StartOrganizationMigrationInput struct {
	// The URL of the organization to migrate.
	SourceOrgURL URI "json:\"sourceOrgUrl\""
	// The name of the target organization.
	TargetOrgName string "json:\"targetOrgName\""
	// The ID of the enterprise the target organization belongs to.
	TargetEnterpriseID ID "json:\"targetEnterpriseId\""
	// The migration source access token.
	SourceAccessToken string "json:\"sourceAccessToken\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that StartOrganizationMigrationInput implements the Input interface.
var _ Input = (*StartOrganizationMigrationInput)(nil)

// isInput implements the Input interface.
func (StartOrganizationMigrationInput) isInput() {}

// StartRepositoryMigrationInput is an autogenerated input type of StartRepositoryMigration.
type StartRepositoryMigrationInput struct {
	// The ID of the migration source.
	SourceID ID "json:\"sourceId\""
	// The ID of the organization that will own the imported repository.
	OwnerID ID "json:\"ownerId\""
	// The URL of the source repository.
	SourceRepositoryURL *URI "json:\"sourceRepositoryUrl\""
	// The name of the imported repository.
	RepositoryName string "json:\"repositoryName\""
	// Whether to continue the migration on error. Defaults to `false`.
	ContinueOnError *bool "json:\"continueOnError\""
	// The signed URL to access the user-uploaded git archive.
	GitArchiveURL *string "json:\"gitArchiveUrl\""
	// The signed URL to access the user-uploaded metadata archive.
	MetadataArchiveURL *string "json:\"metadataArchiveUrl\""
	// The migration source access token.
	AccessToken *string "json:\"accessToken\""
	// The GitHub personal access token of the user importing to the target repository.
	GitHubPat *string "json:\"githubPat\""
	// Whether to skip migrating releases for the repository.
	SkipReleases *bool "json:\"skipReleases\""
	// The visibility of the imported repository.
	TargetRepoVisibility *string "json:\"targetRepoVisibility\""
	// Whether to lock the source repository.
	LockSource *bool "json:\"lockSource\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that StartRepositoryMigrationInput implements the Input interface.
var _ Input = (*StartRepositoryMigrationInput)(nil)

// isInput implements the Input interface.
func (StartRepositoryMigrationInput) isInput() {}

// StatusCheckConfigurationInput represents required status check.
type StatusCheckConfigurationInput struct {
	// The status check context name that must be present on the commit.
	Context string "json:\"context\""
	// The optional integration ID that this status check must originate from.
	IntegrationID *int "json:\"integrationId\""
}

// Compile-time assertion that StatusCheckConfigurationInput implements the Input interface.
var _ Input = (*StatusCheckConfigurationInput)(nil)

// isInput implements the Input interface.
func (StatusCheckConfigurationInput) isInput() {}

// StatusState represents the possible commit status states.
type StatusState string

const (
	// StatusStateExpected. Status is expected.
	StatusStateExpected StatusState = "EXPECTED"
	// StatusStateError. Status is errored.
	StatusStateError StatusState = "ERROR"
	// StatusStateFailure. Status is failing.
	StatusStateFailure StatusState = "FAILURE"
	// StatusStatePending. Status is pending.
	StatusStatePending StatusState = "PENDING"
	// StatusStateSuccess. Status is successful.
	StatusStateSuccess StatusState = "SUCCESS"
)

// SubmitPullRequestReviewInput is an autogenerated input type of SubmitPullRequestReview.
type SubmitPullRequestReviewInput struct {
	// The Pull Request ID to submit any pending reviews.
	PullRequestID *ID "json:\"pullRequestId\""
	// The Pull Request Review ID to submit.
	PullRequestReviewID *ID "json:\"pullRequestReviewId\""
	// The event to send to the Pull Request Review.
	Event PullRequestReviewEvent "json:\"event\""
	// The text field to set on the Pull Request Review.
	Body *string "json:\"body\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that SubmitPullRequestReviewInput implements the Input interface.
var _ Input = (*SubmitPullRequestReviewInput)(nil)

// isInput implements the Input interface.
func (SubmitPullRequestReviewInput) isInput() {}

// SubscriptionState represents the possible states of a subscription.
type SubscriptionState string

const (
	// SubscriptionStateUnsubscribed. The User is only notified when participating or @mentioned.
	SubscriptionStateUnsubscribed SubscriptionState = "UNSUBSCRIBED"
	// SubscriptionStateSubscribed. The User is notified of all conversations.
	SubscriptionStateSubscribed SubscriptionState = "SUBSCRIBED"
	// SubscriptionStateIgnored. The User is never notified.
	SubscriptionStateIgnored SubscriptionState = "IGNORED"
)

// TagNamePatternParametersInput represents parameters to be used for the tag_name_pattern rule.
type TagNamePatternParametersInput struct {
	// How this rule will appear to users.
	Name *string "json:\"name\""
	// If true, the rule will fail if the pattern matches.
	Negate *bool "json:\"negate\""
	// The operator to use for matching.
	Operator string "json:\"operator\""
	// The pattern to match with.
	Pattern string "json:\"pattern\""
}

// Compile-time assertion that TagNamePatternParametersInput implements the Input interface.
var _ Input = (*TagNamePatternParametersInput)(nil)

// isInput implements the Input interface.
func (TagNamePatternParametersInput) isInput() {}

// TeamDiscussionCommentOrder represents ways in which team discussion comment connections can be ordered.
type TeamDiscussionCommentOrder struct {
	// The field by which to order nodes.
	Field TeamDiscussionCommentOrderField "json:\"field\""
	// The direction in which to order nodes.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that TeamDiscussionCommentOrder implements the Input interface.
var _ Input = (*TeamDiscussionCommentOrder)(nil)

// isInput implements the Input interface.
func (TeamDiscussionCommentOrder) isInput() {}

// TeamDiscussionCommentOrderField represents properties by which team discussion comment connections can be ordered.
type TeamDiscussionCommentOrderField string

const (
	// TeamDiscussionCommentOrderFieldNumber. Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering).
	TeamDiscussionCommentOrderFieldNumber TeamDiscussionCommentOrderField = "NUMBER"
)

// TeamDiscussionOrder represents ways in which team discussion connections can be ordered.
type TeamDiscussionOrder struct {
	// The field by which to order nodes.
	Field TeamDiscussionOrderField "json:\"field\""
	// The direction in which to order nodes.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that TeamDiscussionOrder implements the Input interface.
var _ Input = (*TeamDiscussionOrder)(nil)

// isInput implements the Input interface.
func (TeamDiscussionOrder) isInput() {}

// TeamDiscussionOrderField represents properties by which team discussion connections can be ordered.
type TeamDiscussionOrderField string

const (
	// TeamDiscussionOrderFieldCreatedAt. Allows chronological ordering of team discussions.
	TeamDiscussionOrderFieldCreatedAt TeamDiscussionOrderField = "CREATED_AT"
)

// TeamMemberOrder represents ordering options for team member connections.
type TeamMemberOrder struct {
	// The field to order team members by.
	Field TeamMemberOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that TeamMemberOrder implements the Input interface.
var _ Input = (*TeamMemberOrder)(nil)

// isInput implements the Input interface.
func (TeamMemberOrder) isInput() {}

// TeamMemberOrderField represents properties by which team member connections can be ordered.
type TeamMemberOrderField string

const (
	// TeamMemberOrderFieldLogin. Order team members by login.
	TeamMemberOrderFieldLogin TeamMemberOrderField = "LOGIN"
	// TeamMemberOrderFieldCreatedAt. Order team members by creation time.
	TeamMemberOrderFieldCreatedAt TeamMemberOrderField = "CREATED_AT"
)

// TeamMemberRole represents the possible team member roles; either 'maintainer' or 'member'.
type TeamMemberRole string

const (
	// TeamMemberRoleMaintainer. A team maintainer has permission to add and remove team members.
	TeamMemberRoleMaintainer TeamMemberRole = "MAINTAINER"
	// TeamMemberRoleMember. A team member has no administrative permissions on the team.
	TeamMemberRoleMember TeamMemberRole = "MEMBER"
)

// TeamMembershipType represents defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
type TeamMembershipType string

const (
	// TeamMembershipTypeImmediate. Includes only immediate members of the team.
	TeamMembershipTypeImmediate TeamMembershipType = "IMMEDIATE"
	// TeamMembershipTypeChildTeam. Includes only child team members for the team.
	TeamMembershipTypeChildTeam TeamMembershipType = "CHILD_TEAM"
	// TeamMembershipTypeAll. Includes immediate and child team members for the team.
	TeamMembershipTypeAll TeamMembershipType = "ALL"
)

// TeamNotificationSetting represents the possible team notification values.
type TeamNotificationSetting string

const (
	// TeamNotificationSettingNotificationsEnabled. Everyone will receive notifications when the team is @mentioned.
	TeamNotificationSettingNotificationsEnabled TeamNotificationSetting = "NOTIFICATIONS_ENABLED"
	// TeamNotificationSettingNotificationsDisabled. No one will receive notifications.
	TeamNotificationSettingNotificationsDisabled TeamNotificationSetting = "NOTIFICATIONS_DISABLED"
)

// TeamOrder represents ways in which team connections can be ordered.
type TeamOrder struct {
	// The field in which to order nodes by.
	Field TeamOrderField "json:\"field\""
	// The direction in which to order nodes.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that TeamOrder implements the Input interface.
var _ Input = (*TeamOrder)(nil)

// isInput implements the Input interface.
func (TeamOrder) isInput() {}

// TeamOrderField represents properties by which team connections can be ordered.
type TeamOrderField string

const (
	// TeamOrderFieldName. Allows ordering a list of teams by name.
	TeamOrderFieldName TeamOrderField = "NAME"
)

// TeamPrivacy represents the possible team privacy values.
type TeamPrivacy string

const (
	// TeamPrivacySecret. A secret team can only be seen by its members.
	TeamPrivacySecret TeamPrivacy = "SECRET"
	// TeamPrivacyVisible. A visible team can be seen and @mentioned by every member of the organization.
	TeamPrivacyVisible TeamPrivacy = "VISIBLE"
)

// TeamRepositoryOrder represents ordering options for team repository connections.
type TeamRepositoryOrder struct {
	// The field to order repositories by.
	Field TeamRepositoryOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that TeamRepositoryOrder implements the Input interface.
var _ Input = (*TeamRepositoryOrder)(nil)

// isInput implements the Input interface.
func (TeamRepositoryOrder) isInput() {}

// TeamRepositoryOrderField represents properties by which team repository connections can be ordered.
type TeamRepositoryOrderField string

const (
	// TeamRepositoryOrderFieldCreatedAt. Order repositories by creation time.
	TeamRepositoryOrderFieldCreatedAt TeamRepositoryOrderField = "CREATED_AT"
	// TeamRepositoryOrderFieldUpdatedAt. Order repositories by update time.
	TeamRepositoryOrderFieldUpdatedAt TeamRepositoryOrderField = "UPDATED_AT"
	// TeamRepositoryOrderFieldPushedAt. Order repositories by push time.
	TeamRepositoryOrderFieldPushedAt TeamRepositoryOrderField = "PUSHED_AT"
	// TeamRepositoryOrderFieldName. Order repositories by name.
	TeamRepositoryOrderFieldName TeamRepositoryOrderField = "NAME"
	// TeamRepositoryOrderFieldPermission. Order repositories by permission.
	TeamRepositoryOrderFieldPermission TeamRepositoryOrderField = "PERMISSION"
	// TeamRepositoryOrderFieldStargazers. Order repositories by number of stargazers.
	TeamRepositoryOrderFieldStargazers TeamRepositoryOrderField = "STARGAZERS"
)

// TeamRole represents the role of a user on a team.
type TeamRole string

const (
	// TeamRoleAdmin. User has admin rights on the team.
	TeamRoleAdmin TeamRole = "ADMIN"
	// TeamRoleMember. User is a member of the team.
	TeamRoleMember TeamRole = "MEMBER"
)

// TopicSuggestionDeclineReason represents reason that the suggested topic is declined.
type TopicSuggestionDeclineReason string

const (
	// TopicSuggestionDeclineReasonNotRelevant. The suggested topic is not relevant to the repository.
	TopicSuggestionDeclineReasonNotRelevant TopicSuggestionDeclineReason = "NOT_RELEVANT"
	// TopicSuggestionDeclineReasonTooSpecific. The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
	TopicSuggestionDeclineReasonTooSpecific TopicSuggestionDeclineReason = "TOO_SPECIFIC"
	// TopicSuggestionDeclineReasonPersonalPreference. The viewer does not like the suggested topic.
	TopicSuggestionDeclineReasonPersonalPreference TopicSuggestionDeclineReason = "PERSONAL_PREFERENCE"
	// TopicSuggestionDeclineReasonTooGeneral. The suggested topic is too general for the repository.
	TopicSuggestionDeclineReasonTooGeneral TopicSuggestionDeclineReason = "TOO_GENERAL"
)

// TrackedIssueStates represents the possible states of a tracked issue.
type TrackedIssueStates string

const (
	// TrackedIssueStatesOpen. The tracked issue is open.
	TrackedIssueStatesOpen TrackedIssueStates = "OPEN"
	// TrackedIssueStatesClosed. The tracked issue is closed.
	TrackedIssueStatesClosed TrackedIssueStates = "CLOSED"
)

// TransferEnterpriseOrganizationInput is an autogenerated input type of TransferEnterpriseOrganization.
type TransferEnterpriseOrganizationInput struct {
	// The ID of the organization to transfer.
	OrganizationID ID "json:\"organizationId\""
	// The ID of the enterprise where the organization should be transferred.
	DestinationEnterpriseID ID "json:\"destinationEnterpriseId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that TransferEnterpriseOrganizationInput implements the Input interface.
var _ Input = (*TransferEnterpriseOrganizationInput)(nil)

// isInput implements the Input interface.
func (TransferEnterpriseOrganizationInput) isInput() {}

// TransferIssueInput is an autogenerated input type of TransferIssue.
type TransferIssueInput struct {
	// The Node ID of the issue to be transferred.
	IssueID ID "json:\"issueId\""
	// The Node ID of the repository the issue should be transferred to.
	RepositoryID ID "json:\"repositoryId\""
	// Whether to create labels if they don't exist in the target repository (matched by name).
	CreateLabelsIfMissing *bool "json:\"createLabelsIfMissing\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that TransferIssueInput implements the Input interface.
var _ Input = (*TransferIssueInput)(nil)

// isInput implements the Input interface.
func (TransferIssueInput) isInput() {}

// UnarchiveProjectV2ItemInput is an autogenerated input type of UnarchiveProjectV2Item.
type UnarchiveProjectV2ItemInput struct {
	// The ID of the Project to archive the item from.
	ProjectID ID "json:\"projectId\""
	// The ID of the ProjectV2Item to unarchive.
	ItemID ID "json:\"itemId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnarchiveProjectV2ItemInput implements the Input interface.
var _ Input = (*UnarchiveProjectV2ItemInput)(nil)

// isInput implements the Input interface.
func (UnarchiveProjectV2ItemInput) isInput() {}

// UnarchiveRepositoryInput is an autogenerated input type of UnarchiveRepository.
type UnarchiveRepositoryInput struct {
	// The ID of the repository to unarchive.
	RepositoryID ID "json:\"repositoryId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnarchiveRepositoryInput implements the Input interface.
var _ Input = (*UnarchiveRepositoryInput)(nil)

// isInput implements the Input interface.
func (UnarchiveRepositoryInput) isInput() {}

// UnfollowOrganizationInput is an autogenerated input type of UnfollowOrganization.
type UnfollowOrganizationInput struct {
	// ID of the organization to unfollow.
	OrganizationID ID "json:\"organizationId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnfollowOrganizationInput implements the Input interface.
var _ Input = (*UnfollowOrganizationInput)(nil)

// isInput implements the Input interface.
func (UnfollowOrganizationInput) isInput() {}

// UnfollowUserInput is an autogenerated input type of UnfollowUser.
type UnfollowUserInput struct {
	// ID of the user to unfollow.
	UserID ID "json:\"userId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnfollowUserInput implements the Input interface.
var _ Input = (*UnfollowUserInput)(nil)

// isInput implements the Input interface.
func (UnfollowUserInput) isInput() {}

// UnlinkProjectV2FromRepositoryInput is an autogenerated input type of UnlinkProjectV2FromRepository.
type UnlinkProjectV2FromRepositoryInput struct {
	// The ID of the project to unlink from the repository.
	ProjectID ID "json:\"projectId\""
	// The ID of the repository to unlink from the project.
	RepositoryID ID "json:\"repositoryId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnlinkProjectV2FromRepositoryInput implements the Input interface.
var _ Input = (*UnlinkProjectV2FromRepositoryInput)(nil)

// isInput implements the Input interface.
func (UnlinkProjectV2FromRepositoryInput) isInput() {}

// UnlinkProjectV2FromTeamInput is an autogenerated input type of UnlinkProjectV2FromTeam.
type UnlinkProjectV2FromTeamInput struct {
	// The ID of the project to unlink from the team.
	ProjectID ID "json:\"projectId\""
	// The ID of the team to unlink from the project.
	TeamID ID "json:\"teamId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnlinkProjectV2FromTeamInput implements the Input interface.
var _ Input = (*UnlinkProjectV2FromTeamInput)(nil)

// isInput implements the Input interface.
func (UnlinkProjectV2FromTeamInput) isInput() {}

// UnlinkRepositoryFromProjectInput is an autogenerated input type of UnlinkRepositoryFromProject.
type UnlinkRepositoryFromProjectInput struct {
	// The ID of the Project linked to the Repository.
	ProjectID ID "json:\"projectId\""
	// The ID of the Repository linked to the Project.
	RepositoryID ID "json:\"repositoryId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnlinkRepositoryFromProjectInput implements the Input interface.
var _ Input = (*UnlinkRepositoryFromProjectInput)(nil)

// isInput implements the Input interface.
func (UnlinkRepositoryFromProjectInput) isInput() {}

// UnlockLockableInput is an autogenerated input type of UnlockLockable.
type UnlockLockableInput struct {
	// ID of the item to be unlocked.
	LockableID ID "json:\"lockableId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnlockLockableInput implements the Input interface.
var _ Input = (*UnlockLockableInput)(nil)

// isInput implements the Input interface.
func (UnlockLockableInput) isInput() {}

// UnmarkDiscussionCommentAsAnswerInput is an autogenerated input type of UnmarkDiscussionCommentAsAnswer.
type UnmarkDiscussionCommentAsAnswerInput struct {
	// The Node ID of the discussion comment to unmark as an answer.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnmarkDiscussionCommentAsAnswerInput implements the Input interface.
var _ Input = (*UnmarkDiscussionCommentAsAnswerInput)(nil)

// isInput implements the Input interface.
func (UnmarkDiscussionCommentAsAnswerInput) isInput() {}

// UnmarkFileAsViewedInput is an autogenerated input type of UnmarkFileAsViewed.
type UnmarkFileAsViewedInput struct {
	// The Node ID of the pull request.
	PullRequestID ID "json:\"pullRequestId\""
	// The path of the file to mark as unviewed.
	Path string "json:\"path\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnmarkFileAsViewedInput implements the Input interface.
var _ Input = (*UnmarkFileAsViewedInput)(nil)

// isInput implements the Input interface.
func (UnmarkFileAsViewedInput) isInput() {}

// UnmarkIssueAsDuplicateInput is an autogenerated input type of UnmarkIssueAsDuplicate.
type UnmarkIssueAsDuplicateInput struct {
	// ID of the issue or pull request currently marked as a duplicate.
	DuplicateID ID "json:\"duplicateId\""
	// ID of the issue or pull request currently considered canonical/authoritative/original.
	CanonicalID ID "json:\"canonicalId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnmarkIssueAsDuplicateInput implements the Input interface.
var _ Input = (*UnmarkIssueAsDuplicateInput)(nil)

// isInput implements the Input interface.
func (UnmarkIssueAsDuplicateInput) isInput() {}

// UnminimizeCommentInput is an autogenerated input type of UnminimizeComment.
type UnminimizeCommentInput struct {
	// The Node ID of the subject to modify.
	SubjectID ID "json:\"subjectId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnminimizeCommentInput implements the Input interface.
var _ Input = (*UnminimizeCommentInput)(nil)

// isInput implements the Input interface.
func (UnminimizeCommentInput) isInput() {}

// UnpinIssueInput is an autogenerated input type of UnpinIssue.
type UnpinIssueInput struct {
	// The ID of the issue to be unpinned.
	IssueID ID "json:\"issueId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnpinIssueInput implements the Input interface.
var _ Input = (*UnpinIssueInput)(nil)

// isInput implements the Input interface.
func (UnpinIssueInput) isInput() {}

// UnresolveReviewThreadInput is an autogenerated input type of UnresolveReviewThread.
type UnresolveReviewThreadInput struct {
	// The ID of the thread to unresolve.
	ThreadID ID "json:\"threadId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UnresolveReviewThreadInput implements the Input interface.
var _ Input = (*UnresolveReviewThreadInput)(nil)

// isInput implements the Input interface.
func (UnresolveReviewThreadInput) isInput() {}

// UpdateBranchProtectionRuleInput is an autogenerated input type of UpdateBranchProtectionRule.
type UpdateBranchProtectionRuleInput struct {
	// The global relay id of the branch protection rule to be updated.
	BranchProtectionRuleID ID "json:\"branchProtectionRuleId\""
	// The glob-like pattern used to determine matching branches.
	Pattern *string "json:\"pattern\""
	// Are approving reviews required to update matching branches.
	RequiresApprovingReviews *bool "json:\"requiresApprovingReviews\""
	// Number of approving reviews required to update matching branches.
	RequiredApprovingReviewCount *int "json:\"requiredApprovingReviewCount\""
	// Are commits required to be signed.
	RequiresCommitSignatures *bool "json:\"requiresCommitSignatures\""
	// Are merge commits prohibited from being pushed to this branch.
	RequiresLinearHistory *bool "json:\"requiresLinearHistory\""
	// Is branch creation a protected operation.
	BlocksCreations *bool "json:\"blocksCreations\""
	// Are force pushes allowed on this branch.
	AllowsForcePushes *bool "json:\"allowsForcePushes\""
	// Can this branch be deleted.
	AllowsDeletions *bool "json:\"allowsDeletions\""
	// Can admins overwrite branch protection.
	IsAdminEnforced *bool "json:\"isAdminEnforced\""
	// Are status checks required to update matching branches.
	RequiresStatusChecks *bool "json:\"requiresStatusChecks\""
	// Are branches required to be up to date before merging.
	RequiresStrictStatusChecks *bool "json:\"requiresStrictStatusChecks\""
	// Are reviews from code owners required to update matching branches.
	RequiresCodeOwnerReviews *bool "json:\"requiresCodeOwnerReviews\""
	// Will new commits pushed to matching branches dismiss pull request review approvals.
	DismissesStaleReviews *bool "json:\"dismissesStaleReviews\""
	// Is dismissal of pull request reviews restricted.
	RestrictsReviewDismissals *bool "json:\"restrictsReviewDismissals\""
	// A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.
	ReviewDismissalActorIDs *[]ID "json:\"reviewDismissalActorIds\""
	// A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.
	BypassPullRequestActorIDs *[]ID "json:\"bypassPullRequestActorIds\""
	// A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.
	BypassForcePushActorIDs *[]ID "json:\"bypassForcePushActorIds\""
	// Is pushing to matching branches restricted.
	RestrictsPushes *bool "json:\"restrictsPushes\""
	// A list of User, Team, or App IDs allowed to push to matching branches.
	PushActorIDs *[]ID "json:\"pushActorIds\""
	// List of required status check contexts that must pass for commits to be accepted to matching branches.
	RequiredStatusCheckContexts *[]string "json:\"requiredStatusCheckContexts\""
	// The list of required status checks.
	RequiredStatusChecks *[]RequiredStatusCheckInput "json:\"requiredStatusChecks\""
	// Are successful deployments required before merging.
	RequiresDeployments *bool "json:\"requiresDeployments\""
	// The list of required deployment environments.
	RequiredDeploymentEnvironments *[]string "json:\"requiredDeploymentEnvironments\""
	// Are conversations required to be resolved before merging.
	RequiresConversationResolution *bool "json:\"requiresConversationResolution\""
	// Whether the most recent push must be approved by someone other than the person who pushed it.
	RequireLastPushApproval *bool "json:\"requireLastPushApproval\""
	// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
	LockBranch *bool "json:\"lockBranch\""
	// Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
	LockAllowsFetchAndMerge *bool "json:\"lockAllowsFetchAndMerge\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateBranchProtectionRuleInput implements the Input interface.
var _ Input = (*UpdateBranchProtectionRuleInput)(nil)

// isInput implements the Input interface.
func (UpdateBranchProtectionRuleInput) isInput() {}

// UpdateCheckRunInput is an autogenerated input type of UpdateCheckRun.
type UpdateCheckRunInput struct {
	// The node ID of the repository.
	RepositoryID ID "json:\"repositoryId\""
	// The node of the check.
	CheckRunID ID "json:\"checkRunId\""
	// The name of the check.
	Name *string "json:\"name\""
	// The URL of the integrator's site that has the full details of the check.
	DetailsURL *URI "json:\"detailsUrl\""
	// A reference for the run on the integrator's system.
	ExternalID *string "json:\"externalId\""
	// The current status.
	Status *RequestableCheckStatusState "json:\"status\""
	// The time that the check run began.
	StartedAt *DateTime "json:\"startedAt\""
	// The final conclusion of the check.
	Conclusion *CheckConclusionState "json:\"conclusion\""
	// The time that the check run finished.
	CompletedAt *DateTime "json:\"completedAt\""
	// Descriptive details about the run.
	Output *CheckRunOutput "json:\"output\""
	// Possible further actions the integrator can perform, which a user may trigger.
	Actions *[]CheckRunAction "json:\"actions\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateCheckRunInput implements the Input interface.
var _ Input = (*UpdateCheckRunInput)(nil)

// isInput implements the Input interface.
func (UpdateCheckRunInput) isInput() {}

// UpdateCheckSuitePreferencesInput is an autogenerated input type of UpdateCheckSuitePreferences.
type UpdateCheckSuitePreferencesInput struct {
	// The Node ID of the repository.
	RepositoryID ID "json:\"repositoryId\""
	// The check suite preferences to modify.
	AutoTriggerPreferences []CheckSuiteAutoTriggerPreference "json:\"autoTriggerPreferences\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateCheckSuitePreferencesInput implements the Input interface.
var _ Input = (*UpdateCheckSuitePreferencesInput)(nil)

// isInput implements the Input interface.
func (UpdateCheckSuitePreferencesInput) isInput() {}

// UpdateDiscussionCommentInput is an autogenerated input type of UpdateDiscussionComment.
type UpdateDiscussionCommentInput struct {
	// The Node ID of the discussion comment to update.
	CommentID ID "json:\"commentId\""
	// The new contents of the comment body.
	Body string "json:\"body\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateDiscussionCommentInput implements the Input interface.
var _ Input = (*UpdateDiscussionCommentInput)(nil)

// isInput implements the Input interface.
func (UpdateDiscussionCommentInput) isInput() {}

// UpdateDiscussionInput is an autogenerated input type of UpdateDiscussion.
type UpdateDiscussionInput struct {
	// The Node ID of the discussion to update.
	DiscussionID ID "json:\"discussionId\""
	// The new discussion title.
	Title *string "json:\"title\""
	// The new contents of the discussion body.
	Body *string "json:\"body\""
	// The Node ID of a discussion category within the same repository to change this discussion to.
	CategoryID *ID "json:\"categoryId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateDiscussionInput implements the Input interface.
var _ Input = (*UpdateDiscussionInput)(nil)

// isInput implements the Input interface.
func (UpdateDiscussionInput) isInput() {}

// UpdateEnterpriseAdministratorRoleInput is an autogenerated input type of UpdateEnterpriseAdministratorRole.
type UpdateEnterpriseAdministratorRoleInput struct {
	// The ID of the Enterprise which the admin belongs to.
	EnterpriseID ID "json:\"enterpriseId\""
	// The login of a administrator whose role is being changed.
	Login string "json:\"login\""
	// The new role for the Enterprise administrator.
	Role EnterpriseAdministratorRole "json:\"role\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseAdministratorRoleInput implements the Input interface.
var _ Input = (*UpdateEnterpriseAdministratorRoleInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseAdministratorRoleInput) isInput() {}

// UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput is an autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting.
type UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput struct {
	// The ID of the enterprise on which to set the allow private repository forking setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// The value for the allow private repository forking setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue "json:\"settingValue\""
	// The value for the allow private repository forking policy on the enterprise.
	PolicyValue *EnterpriseAllowPrivateRepositoryForkingPolicyValue "json:\"policyValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput) isInput() {}

// UpdateEnterpriseDefaultRepositoryPermissionSettingInput is an autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting.
type UpdateEnterpriseDefaultRepositoryPermissionSettingInput struct {
	// The ID of the enterprise on which to set the base repository permission setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// The value for the base repository permission setting on the enterprise.
	SettingValue EnterpriseDefaultRepositoryPermissionSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseDefaultRepositoryPermissionSettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseDefaultRepositoryPermissionSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseDefaultRepositoryPermissionSettingInput) isInput() {}

// UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput is an autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting.
type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput struct {
	// The ID of the enterprise on which to set the members can change repository visibility setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// The value for the members can change repository visibility setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput) isInput() {}

// UpdateEnterpriseMembersCanCreateRepositoriesSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting.
type UpdateEnterpriseMembersCanCreateRepositoriesSettingInput struct {
	// The ID of the enterprise on which to set the members can create repositories setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided.
	SettingValue *EnterpriseMembersCanCreateRepositoriesSettingValue "json:\"settingValue\""
	// When false, allow member organizations to set their own repository creation member privileges.
	MembersCanCreateRepositoriesPolicyEnabled *bool "json:\"membersCanCreateRepositoriesPolicyEnabled\""
	// Allow members to create public repositories. Defaults to current value.
	MembersCanCreatePublicRepositories *bool "json:\"membersCanCreatePublicRepositories\""
	// Allow members to create private repositories. Defaults to current value.
	MembersCanCreatePrivateRepositories *bool "json:\"membersCanCreatePrivateRepositories\""
	// Allow members to create internal repositories. Defaults to current value.
	MembersCanCreateInternalRepositories *bool "json:\"membersCanCreateInternalRepositories\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseMembersCanCreateRepositoriesSettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseMembersCanCreateRepositoriesSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseMembersCanCreateRepositoriesSettingInput) isInput() {}

// UpdateEnterpriseMembersCanDeleteIssuesSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting.
type UpdateEnterpriseMembersCanDeleteIssuesSettingInput struct {
	// The ID of the enterprise on which to set the members can delete issues setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// The value for the members can delete issues setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseMembersCanDeleteIssuesSettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseMembersCanDeleteIssuesSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseMembersCanDeleteIssuesSettingInput) isInput() {}

// UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting.
type UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput struct {
	// The ID of the enterprise on which to set the members can delete repositories setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// The value for the members can delete repositories setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput) isInput() {}

// UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting.
type UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput struct {
	// The ID of the enterprise on which to set the members can invite collaborators setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// The value for the members can invite collaborators setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput) isInput() {}

// UpdateEnterpriseMembersCanMakePurchasesSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting.
type UpdateEnterpriseMembersCanMakePurchasesSettingInput struct {
	// The ID of the enterprise on which to set the members can make purchases setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// The value for the members can make purchases setting on the enterprise.
	SettingValue EnterpriseMembersCanMakePurchasesSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseMembersCanMakePurchasesSettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseMembersCanMakePurchasesSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseMembersCanMakePurchasesSettingInput) isInput() {}

// UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting.
type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput struct {
	// The ID of the enterprise on which to set the members can update protected branches setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// The value for the members can update protected branches setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput) isInput() {}

// UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting.
type UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput struct {
	// The ID of the enterprise on which to set the members can view dependency insights setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// The value for the members can view dependency insights setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput) isInput() {}

// UpdateEnterpriseOrganizationProjectsSettingInput is an autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting.
type UpdateEnterpriseOrganizationProjectsSettingInput struct {
	// The ID of the enterprise on which to set the organization projects setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// The value for the organization projects setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseOrganizationProjectsSettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseOrganizationProjectsSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseOrganizationProjectsSettingInput) isInput() {}

// UpdateEnterpriseOwnerOrganizationRoleInput is an autogenerated input type of UpdateEnterpriseOwnerOrganizationRole.
type UpdateEnterpriseOwnerOrganizationRoleInput struct {
	// The ID of the Enterprise which the owner belongs to.
	EnterpriseID ID "json:\"enterpriseId\""
	// The ID of the organization for membership change.
	OrganizationID ID "json:\"organizationId\""
	// The role to assume in the organization.
	OrganizationRole RoleInOrganization "json:\"organizationRole\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseOwnerOrganizationRoleInput implements the Input interface.
var _ Input = (*UpdateEnterpriseOwnerOrganizationRoleInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseOwnerOrganizationRoleInput) isInput() {}

// UpdateEnterpriseProfileInput is an autogenerated input type of UpdateEnterpriseProfile.
type UpdateEnterpriseProfileInput struct {
	// The Enterprise ID to update.
	EnterpriseID ID "json:\"enterpriseId\""
	// The name of the enterprise.
	Name *string "json:\"name\""
	// The description of the enterprise.
	Description *string "json:\"description\""
	// The URL of the enterprise's website.
	WebsiteURL *string "json:\"websiteUrl\""
	// The location of the enterprise.
	Location *string "json:\"location\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseProfileInput implements the Input interface.
var _ Input = (*UpdateEnterpriseProfileInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseProfileInput) isInput() {}

// UpdateEnterpriseRepositoryProjectsSettingInput is an autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting.
type UpdateEnterpriseRepositoryProjectsSettingInput struct {
	// The ID of the enterprise on which to set the repository projects setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// The value for the repository projects setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseRepositoryProjectsSettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseRepositoryProjectsSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseRepositoryProjectsSettingInput) isInput() {}

// UpdateEnterpriseTeamDiscussionsSettingInput is an autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting.
type UpdateEnterpriseTeamDiscussionsSettingInput struct {
	// The ID of the enterprise on which to set the team discussions setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// The value for the team discussions setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseTeamDiscussionsSettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseTeamDiscussionsSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseTeamDiscussionsSettingInput) isInput() {}

// UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput is an autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting.
type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput struct {
	// The ID of the enterprise on which to set the two factor authentication required setting.
	EnterpriseID ID "json:\"enterpriseId\""
	// The value for the two factor authentication required setting on the enterprise.
	SettingValue EnterpriseEnabledSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput implements the Input interface.
var _ Input = (*UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput) isInput() {}

// UpdateEnvironmentInput is an autogenerated input type of UpdateEnvironment.
type UpdateEnvironmentInput struct {
	// The node ID of the environment.
	EnvironmentID ID "json:\"environmentId\""
	// The wait timer in minutes.
	WaitTimer *int "json:\"waitTimer\""
	// The ids of users or teams that can approve deployments to this environment.
	Reviewers *[]ID "json:\"reviewers\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateEnvironmentInput implements the Input interface.
var _ Input = (*UpdateEnvironmentInput)(nil)

// isInput implements the Input interface.
func (UpdateEnvironmentInput) isInput() {}

// UpdateIPAllowListEnabledSettingInput is an autogenerated input type of UpdateIpAllowListEnabledSetting.
type UpdateIPAllowListEnabledSettingInput struct {
	// The ID of the owner on which to set the IP allow list enabled setting.
	OwnerID ID "json:\"ownerId\""
	// The value for the IP allow list enabled setting.
	SettingValue IPAllowListEnabledSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateIPAllowListEnabledSettingInput implements the Input interface.
var _ Input = (*UpdateIPAllowListEnabledSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateIPAllowListEnabledSettingInput) isInput() {}

// UpdateIPAllowListEntryInput is an autogenerated input type of UpdateIpAllowListEntry.
type UpdateIPAllowListEntryInput struct {
	// The ID of the IP allow list entry to update.
	IPAllowListEntryID ID "json:\"ipAllowListEntryId\""
	// An IP address or range of addresses in CIDR notation.
	AllowListValue string "json:\"allowListValue\""
	// An optional name for the IP allow list entry.
	Name *string "json:\"name\""
	// Whether the IP allow list entry is active when an IP allow list is enabled.
	IsActive bool "json:\"isActive\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateIPAllowListEntryInput implements the Input interface.
var _ Input = (*UpdateIPAllowListEntryInput)(nil)

// isInput implements the Input interface.
func (UpdateIPAllowListEntryInput) isInput() {}

// UpdateIPAllowListForInstalledAppsEnabledSettingInput is an autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting.
type UpdateIPAllowListForInstalledAppsEnabledSettingInput struct {
	// The ID of the owner.
	OwnerID ID "json:\"ownerId\""
	// The value for the IP allow list configuration for installed GitHub Apps setting.
	SettingValue IPAllowListForInstalledAppsEnabledSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateIPAllowListForInstalledAppsEnabledSettingInput implements the Input interface.
var _ Input = (*UpdateIPAllowListForInstalledAppsEnabledSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateIPAllowListForInstalledAppsEnabledSettingInput) isInput() {}

// UpdateIssueCommentInput is an autogenerated input type of UpdateIssueComment.
type UpdateIssueCommentInput struct {
	// The ID of the IssueComment to modify.
	ID ID "json:\"id\""
	// The updated text of the comment.
	Body string "json:\"body\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateIssueCommentInput implements the Input interface.
var _ Input = (*UpdateIssueCommentInput)(nil)

// isInput implements the Input interface.
func (UpdateIssueCommentInput) isInput() {}

// UpdateIssueInput is an autogenerated input type of UpdateIssue.
type UpdateIssueInput struct {
	// The ID of the Issue to modify.
	ID ID "json:\"id\""
	// The title for the issue.
	Title *string "json:\"title\""
	// The body for the issue description.
	Body *string "json:\"body\""
	// An array of Node IDs of users for this issue.
	AssigneeIDs *[]ID "json:\"assigneeIds\""
	// The Node ID of the milestone for this issue.
	MilestoneID *ID "json:\"milestoneId\""
	// An array of Node IDs of labels for this issue.
	LabelIDs *[]ID "json:\"labelIds\""
	// The desired issue state.
	State *IssueState "json:\"state\""
	// An array of Node IDs for projects associated with this issue.
	ProjectIDs *[]ID "json:\"projectIds\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateIssueInput implements the Input interface.
var _ Input = (*UpdateIssueInput)(nil)

// isInput implements the Input interface.
func (UpdateIssueInput) isInput() {}

// UpdateNotificationRestrictionSettingInput is an autogenerated input type of UpdateNotificationRestrictionSetting.
type UpdateNotificationRestrictionSettingInput struct {
	// The ID of the owner on which to set the restrict notifications setting.
	OwnerID ID "json:\"ownerId\""
	// The value for the restrict notifications setting.
	SettingValue NotificationRestrictionSettingValue "json:\"settingValue\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateNotificationRestrictionSettingInput implements the Input interface.
var _ Input = (*UpdateNotificationRestrictionSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateNotificationRestrictionSettingInput) isInput() {}

// UpdateOrganizationAllowPrivateRepositoryForkingSettingInput is an autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting.
type UpdateOrganizationAllowPrivateRepositoryForkingSettingInput struct {
	// The ID of the organization on which to set the allow private repository forking setting.
	OrganizationID ID "json:\"organizationId\""
	// Enable forking of private repositories in the organization?.
	ForkingEnabled bool "json:\"forkingEnabled\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateOrganizationAllowPrivateRepositoryForkingSettingInput implements the Input interface.
var _ Input = (*UpdateOrganizationAllowPrivateRepositoryForkingSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateOrganizationAllowPrivateRepositoryForkingSettingInput) isInput() {}

// UpdateOrganizationWebCommitSignoffSettingInput is an autogenerated input type of UpdateOrganizationWebCommitSignoffSetting.
type UpdateOrganizationWebCommitSignoffSettingInput struct {
	// The ID of the organization on which to set the web commit signoff setting.
	OrganizationID ID "json:\"organizationId\""
	// Enable signoff on web-based commits for repositories in the organization?.
	WebCommitSignoffRequired bool "json:\"webCommitSignoffRequired\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateOrganizationWebCommitSignoffSettingInput implements the Input interface.
var _ Input = (*UpdateOrganizationWebCommitSignoffSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateOrganizationWebCommitSignoffSettingInput) isInput() {}

// UpdateParametersInput represents only allow users with bypass permission to update matching refs.
type UpdateParametersInput struct {
	// Branch can pull changes from its upstream repository.
	UpdateAllowsFetchAndMerge bool "json:\"updateAllowsFetchAndMerge\""
}

// Compile-time assertion that UpdateParametersInput implements the Input interface.
var _ Input = (*UpdateParametersInput)(nil)

// isInput implements the Input interface.
func (UpdateParametersInput) isInput() {}

// UpdateProjectCardInput is an autogenerated input type of UpdateProjectCard.
type UpdateProjectCardInput struct {
	// The ProjectCard ID to update.
	ProjectCardID ID "json:\"projectCardId\""
	// Whether or not the ProjectCard should be archived.
	IsArchived *bool "json:\"isArchived\""
	// The note of ProjectCard.
	Note *string "json:\"note\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateProjectCardInput implements the Input interface.
var _ Input = (*UpdateProjectCardInput)(nil)

// isInput implements the Input interface.
func (UpdateProjectCardInput) isInput() {}

// UpdateProjectColumnInput is an autogenerated input type of UpdateProjectColumn.
type UpdateProjectColumnInput struct {
	// The ProjectColumn ID to update.
	ProjectColumnID ID "json:\"projectColumnId\""
	// The name of project column.
	Name string "json:\"name\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateProjectColumnInput implements the Input interface.
var _ Input = (*UpdateProjectColumnInput)(nil)

// isInput implements the Input interface.
func (UpdateProjectColumnInput) isInput() {}

// UpdateProjectInput is an autogenerated input type of UpdateProject.
type UpdateProjectInput struct {
	// The Project ID to update.
	ProjectID ID "json:\"projectId\""
	// The name of project.
	Name *string "json:\"name\""
	// The description of project.
	Body *string "json:\"body\""
	// Whether the project is open or closed.
	State *ProjectState "json:\"state\""
	// Whether the project is public or not.
	Public *bool "json:\"public\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateProjectInput implements the Input interface.
var _ Input = (*UpdateProjectInput)(nil)

// isInput implements the Input interface.
func (UpdateProjectInput) isInput() {}

// UpdateProjectV2DraftIssueInput is an autogenerated input type of UpdateProjectV2DraftIssue.
type UpdateProjectV2DraftIssueInput struct {
	// The ID of the draft issue to update.
	DraftIssueID ID "json:\"draftIssueId\""
	// The title of the draft issue.
	Title *string "json:\"title\""
	// The body of the draft issue.
	Body *string "json:\"body\""
	// The IDs of the assignees of the draft issue.
	AssigneeIDs *[]ID "json:\"assigneeIds\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateProjectV2DraftIssueInput implements the Input interface.
var _ Input = (*UpdateProjectV2DraftIssueInput)(nil)

// isInput implements the Input interface.
func (UpdateProjectV2DraftIssueInput) isInput() {}

// UpdateProjectV2Input is an autogenerated input type of UpdateProjectV2.
type UpdateProjectV2Input struct {
	// The ID of the Project to update.
	ProjectID ID "json:\"projectId\""
	// Set the title of the project.
	Title *string "json:\"title\""
	// Set the short description of the project.
	ShortDescription *string "json:\"shortDescription\""
	// Set the readme description of the project.
	Readme *string "json:\"readme\""
	// Set the project to closed or open.
	Closed *bool "json:\"closed\""
	// Set the project to public or private.
	Public *bool "json:\"public\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateProjectV2Input implements the Input interface.
var _ Input = (*UpdateProjectV2Input)(nil)

// isInput implements the Input interface.
func (UpdateProjectV2Input) isInput() {}

// UpdateProjectV2ItemFieldValueInput is an autogenerated input type of UpdateProjectV2ItemFieldValue.
type UpdateProjectV2ItemFieldValueInput struct {
	// The ID of the Project.
	ProjectID ID "json:\"projectId\""
	// The ID of the item to be updated.
	ItemID ID "json:\"itemId\""
	// The ID of the field to be updated.
	FieldID ID "json:\"fieldId\""
	// The value which will be set on the field.
	Value ProjectV2FieldValue "json:\"value\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateProjectV2ItemFieldValueInput implements the Input interface.
var _ Input = (*UpdateProjectV2ItemFieldValueInput)(nil)

// isInput implements the Input interface.
func (UpdateProjectV2ItemFieldValueInput) isInput() {}

// UpdateProjectV2ItemPositionInput is an autogenerated input type of UpdateProjectV2ItemPosition.
type UpdateProjectV2ItemPositionInput struct {
	// The ID of the Project.
	ProjectID ID "json:\"projectId\""
	// The ID of the item to be moved.
	ItemID ID "json:\"itemId\""
	// The ID of the item to position this item after. If omitted or set to null the item will be moved to top.
	AfterID *ID "json:\"afterId\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateProjectV2ItemPositionInput implements the Input interface.
var _ Input = (*UpdateProjectV2ItemPositionInput)(nil)

// isInput implements the Input interface.
func (UpdateProjectV2ItemPositionInput) isInput() {}

// UpdatePullRequestBranchInput is an autogenerated input type of UpdatePullRequestBranch.
type UpdatePullRequestBranchInput struct {
	// The Node ID of the pull request.
	PullRequestID ID "json:\"pullRequestId\""
	// The head ref oid for the upstream branch.
	ExpectedHeadOid *GitObjectID "json:\"expectedHeadOid\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdatePullRequestBranchInput implements the Input interface.
var _ Input = (*UpdatePullRequestBranchInput)(nil)

// isInput implements the Input interface.
func (UpdatePullRequestBranchInput) isInput() {}

// UpdatePullRequestInput is an autogenerated input type of UpdatePullRequest.
type UpdatePullRequestInput struct {
	// The Node ID of the pull request.
	PullRequestID ID "json:\"pullRequestId\""
	// The name of the branch you want your changes pulled into. This should be an existing branch
	// on the current repository.
	BaseRefName *string "json:\"baseRefName\""
	// The title of the pull request.
	Title *string "json:\"title\""
	// The contents of the pull request.
	Body *string "json:\"body\""
	// The target state of the pull request.
	State *PullRequestUpdateState "json:\"state\""
	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool "json:\"maintainerCanModify\""
	// An array of Node IDs of users for this pull request.
	AssigneeIDs *[]ID "json:\"assigneeIds\""
	// The Node ID of the milestone for this pull request.
	MilestoneID *ID "json:\"milestoneId\""
	// An array of Node IDs of labels for this pull request.
	LabelIDs *[]ID "json:\"labelIds\""
	// An array of Node IDs for projects associated with this pull request.
	ProjectIDs *[]ID "json:\"projectIds\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdatePullRequestInput implements the Input interface.
var _ Input = (*UpdatePullRequestInput)(nil)

// isInput implements the Input interface.
func (UpdatePullRequestInput) isInput() {}

// UpdatePullRequestReviewCommentInput is an autogenerated input type of UpdatePullRequestReviewComment.
type UpdatePullRequestReviewCommentInput struct {
	// The Node ID of the comment to modify.
	PullRequestReviewCommentID ID "json:\"pullRequestReviewCommentId\""
	// The text of the comment.
	Body string "json:\"body\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdatePullRequestReviewCommentInput implements the Input interface.
var _ Input = (*UpdatePullRequestReviewCommentInput)(nil)

// isInput implements the Input interface.
func (UpdatePullRequestReviewCommentInput) isInput() {}

// UpdatePullRequestReviewInput is an autogenerated input type of UpdatePullRequestReview.
type UpdatePullRequestReviewInput struct {
	// The Node ID of the pull request review to modify.
	PullRequestReviewID ID "json:\"pullRequestReviewId\""
	// The contents of the pull request review body.
	Body string "json:\"body\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdatePullRequestReviewInput implements the Input interface.
var _ Input = (*UpdatePullRequestReviewInput)(nil)

// isInput implements the Input interface.
func (UpdatePullRequestReviewInput) isInput() {}

// UpdateRefInput is an autogenerated input type of UpdateRef.
type UpdateRefInput struct {
	// The Node ID of the Ref to be updated.
	RefID ID "json:\"refId\""
	// The GitObjectID that the Ref shall be updated to target.
	Oid GitObjectID "json:\"oid\""
	// Permit updates of branch Refs that are not fast-forwards?.
	Force *bool "json:\"force\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateRefInput implements the Input interface.
var _ Input = (*UpdateRefInput)(nil)

// isInput implements the Input interface.
func (UpdateRefInput) isInput() {}

// UpdateRepositoryInput is an autogenerated input type of UpdateRepository.
type UpdateRepositoryInput struct {
	// The ID of the repository to update.
	RepositoryID ID "json:\"repositoryId\""
	// The new name of the repository.
	Name *string "json:\"name\""
	// A new description for the repository. Pass an empty string to erase the existing description.
	Description *string "json:\"description\""
	// Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
	Template *bool "json:\"template\""
	// The URL for a web page about this repository. Pass an empty string to erase the existing URL.
	HomepageURL *URI "json:\"homepageUrl\""
	// Indicates if the repository should have the wiki feature enabled.
	HasWikiEnabled *bool "json:\"hasWikiEnabled\""
	// Indicates if the repository should have the issues feature enabled.
	HasIssuesEnabled *bool "json:\"hasIssuesEnabled\""
	// Indicates if the repository should have the project boards feature enabled.
	HasProjectsEnabled *bool "json:\"hasProjectsEnabled\""
	// Indicates if the repository should have the discussions feature enabled.
	HasDiscussionsEnabled *bool "json:\"hasDiscussionsEnabled\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateRepositoryInput implements the Input interface.
var _ Input = (*UpdateRepositoryInput)(nil)

// isInput implements the Input interface.
func (UpdateRepositoryInput) isInput() {}

// UpdateRepositoryRulesetInput is an autogenerated input type of UpdateRepositoryRuleset.
type UpdateRepositoryRulesetInput struct {
	// The global relay id of the repository ruleset to be updated.
	RepositoryRulesetID ID "json:\"repositoryRulesetId\""
	// The name of the ruleset.
	Name *string "json:\"name\""
	// The target of the ruleset.
	Target *RepositoryRulesetTarget "json:\"target\""
	// The list of rules for this ruleset.
	Rules *[]RepositoryRuleInput "json:\"rules\""
	// The list of conditions for this ruleset.
	Conditions *RepositoryRuleConditionsInput "json:\"conditions\""
	// The enforcement level for this ruleset.
	Enforcement *RuleEnforcement "json:\"enforcement\""
	// The bypass mode for this ruleset.
	BypassMode *RuleBypassMode "json:\"bypassMode\""
	// A list of Team or App IDs allowed to bypass rules in this ruleset.
	BypassActorIDs *[]ID "json:\"bypassActorIds\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateRepositoryRulesetInput implements the Input interface.
var _ Input = (*UpdateRepositoryRulesetInput)(nil)

// isInput implements the Input interface.
func (UpdateRepositoryRulesetInput) isInput() {}

// UpdateRepositoryWebCommitSignoffSettingInput is an autogenerated input type of UpdateRepositoryWebCommitSignoffSetting.
type UpdateRepositoryWebCommitSignoffSettingInput struct {
	// The ID of the repository to update.
	RepositoryID ID "json:\"repositoryId\""
	// Indicates if the repository should require signoff on web-based commits.
	WebCommitSignoffRequired bool "json:\"webCommitSignoffRequired\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateRepositoryWebCommitSignoffSettingInput implements the Input interface.
var _ Input = (*UpdateRepositoryWebCommitSignoffSettingInput)(nil)

// isInput implements the Input interface.
func (UpdateRepositoryWebCommitSignoffSettingInput) isInput() {}

// UpdateSponsorshipPreferencesInput is an autogenerated input type of UpdateSponsorshipPreferences.
type UpdateSponsorshipPreferencesInput struct {
	// The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
	SponsorID *ID "json:\"sponsorId\""
	// The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
	SponsorLogin *string "json:\"sponsorLogin\""
	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
	SponsorableID *ID "json:\"sponsorableId\""
	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
	SponsorableLogin *string "json:\"sponsorableLogin\""
	// Whether the sponsor should receive email updates from the sponsorable.
	ReceiveEmails *bool "json:\"receiveEmails\""
	// Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used.
	PrivacyLevel *SponsorshipPrivacy "json:\"privacyLevel\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateSponsorshipPreferencesInput implements the Input interface.
var _ Input = (*UpdateSponsorshipPreferencesInput)(nil)

// isInput implements the Input interface.
func (UpdateSponsorshipPreferencesInput) isInput() {}

// UpdateSubscriptionInput is an autogenerated input type of UpdateSubscription.
type UpdateSubscriptionInput struct {
	// The Node ID of the subscribable object to modify.
	SubscribableID ID "json:\"subscribableId\""
	// The new state of the subscription.
	State SubscriptionState "json:\"state\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateSubscriptionInput implements the Input interface.
var _ Input = (*UpdateSubscriptionInput)(nil)

// isInput implements the Input interface.
func (UpdateSubscriptionInput) isInput() {}

// UpdateTeamDiscussionCommentInput is an autogenerated input type of UpdateTeamDiscussionComment.
type UpdateTeamDiscussionCommentInput struct {
	// The ID of the comment to modify.
	ID ID "json:\"id\""
	// The updated text of the comment.
	Body string "json:\"body\""
	// The current version of the body content.
	BodyVersion *string "json:\"bodyVersion\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateTeamDiscussionCommentInput implements the Input interface.
var _ Input = (*UpdateTeamDiscussionCommentInput)(nil)

// isInput implements the Input interface.
func (UpdateTeamDiscussionCommentInput) isInput() {}

// UpdateTeamDiscussionInput is an autogenerated input type of UpdateTeamDiscussion.
type UpdateTeamDiscussionInput struct {
	// The Node ID of the discussion to modify.
	ID ID "json:\"id\""
	// The updated title of the discussion.
	Title *string "json:\"title\""
	// The updated text of the discussion.
	Body *string "json:\"body\""
	// The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
	BodyVersion *string "json:\"bodyVersion\""
	// If provided, sets the pinned state of the updated discussion.
	Pinned *bool "json:\"pinned\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateTeamDiscussionInput implements the Input interface.
var _ Input = (*UpdateTeamDiscussionInput)(nil)

// isInput implements the Input interface.
func (UpdateTeamDiscussionInput) isInput() {}

// UpdateTeamsRepositoryInput is an autogenerated input type of UpdateTeamsRepository.
type UpdateTeamsRepositoryInput struct {
	// Repository ID being granted access to.
	RepositoryID ID "json:\"repositoryId\""
	// A list of teams being granted access. Limit: 10.
	TeamIDs []ID "json:\"teamIds\""
	// Permission that should be granted to the teams.
	Permission RepositoryPermission "json:\"permission\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateTeamsRepositoryInput implements the Input interface.
var _ Input = (*UpdateTeamsRepositoryInput)(nil)

// isInput implements the Input interface.
func (UpdateTeamsRepositoryInput) isInput() {}

// UpdateTopicsInput is an autogenerated input type of UpdateTopics.
type UpdateTopicsInput struct {
	// The Node ID of the repository.
	RepositoryID ID "json:\"repositoryId\""
	// An array of topic names.
	TopicNames []string "json:\"topicNames\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that UpdateTopicsInput implements the Input interface.
var _ Input = (*UpdateTopicsInput)(nil)

// isInput implements the Input interface.
func (UpdateTopicsInput) isInput() {}

// UserBlockDuration represents the possible durations that a user can be blocked for.
type UserBlockDuration string

const (
	// UserBlockDurationOneDay. The user was blocked for 1 day.
	UserBlockDurationOneDay UserBlockDuration = "ONE_DAY"
	// UserBlockDurationThreeDays. The user was blocked for 3 days.
	UserBlockDurationThreeDays UserBlockDuration = "THREE_DAYS"
	// UserBlockDurationOneWeek. The user was blocked for 7 days.
	UserBlockDurationOneWeek UserBlockDuration = "ONE_WEEK"
	// UserBlockDurationOneMonth. The user was blocked for 30 days.
	UserBlockDurationOneMonth UserBlockDuration = "ONE_MONTH"
	// UserBlockDurationPermanent. The user was blocked permanently.
	UserBlockDurationPermanent UserBlockDuration = "PERMANENT"
)

// UserStatusOrder represents ordering options for user status connections.
type UserStatusOrder struct {
	// The field to order user statuses by.
	Field UserStatusOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that UserStatusOrder implements the Input interface.
var _ Input = (*UserStatusOrder)(nil)

// isInput implements the Input interface.
func (UserStatusOrder) isInput() {}

// UserStatusOrderField represents properties by which user status connections can be ordered.
type UserStatusOrderField string

const (
	// UserStatusOrderFieldUpdatedAt. Order user statuses by when they were updated.
	UserStatusOrderFieldUpdatedAt UserStatusOrderField = "UPDATED_AT"
)

// VerifiableDomainOrder represents ordering options for verifiable domain connections.
type VerifiableDomainOrder struct {
	// The field to order verifiable domains by.
	Field VerifiableDomainOrderField "json:\"field\""
	// The ordering direction.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that VerifiableDomainOrder implements the Input interface.
var _ Input = (*VerifiableDomainOrder)(nil)

// isInput implements the Input interface.
func (VerifiableDomainOrder) isInput() {}

// VerifiableDomainOrderField represents properties by which verifiable domain connections can be ordered.
type VerifiableDomainOrderField string

const (
	// VerifiableDomainOrderFieldDomain. Order verifiable domains by the domain name.
	VerifiableDomainOrderFieldDomain VerifiableDomainOrderField = "DOMAIN"
	// VerifiableDomainOrderFieldCreatedAt. Order verifiable domains by their creation date.
	VerifiableDomainOrderFieldCreatedAt VerifiableDomainOrderField = "CREATED_AT"
)

// VerifyVerifiableDomainInput is an autogenerated input type of VerifyVerifiableDomain.
type VerifyVerifiableDomainInput struct {
	// The ID of the verifiable domain to verify.
	ID ID "json:\"id\""
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string "json:\"clientMutationId\""
}

// Compile-time assertion that VerifyVerifiableDomainInput implements the Input interface.
var _ Input = (*VerifyVerifiableDomainInput)(nil)

// isInput implements the Input interface.
func (VerifyVerifiableDomainInput) isInput() {}

// WorkflowRunOrder represents ways in which lists of workflow runs can be ordered upon return.
type WorkflowRunOrder struct {
	// The field by which to order workflows.
	Field WorkflowRunOrderField "json:\"field\""
	// The direction in which to order workflow runs by the specified field.
	Direction OrderDirection "json:\"direction\""
}

// Compile-time assertion that WorkflowRunOrder implements the Input interface.
var _ Input = (*WorkflowRunOrder)(nil)

// isInput implements the Input interface.
func (WorkflowRunOrder) isInput() {}

// WorkflowRunOrderField represents properties by which workflow run connections can be ordered.
type WorkflowRunOrderField string

const (
	// WorkflowRunOrderFieldCreatedAt. Order workflow runs by most recently created.
	WorkflowRunOrderFieldCreatedAt WorkflowRunOrderField = "CREATED_AT"
)

// WorkflowState represents the possible states for a workflow.
type WorkflowState string

const (
	// WorkflowStateActive. The workflow is active.
	WorkflowStateActive WorkflowState = "ACTIVE"
	// WorkflowStateDeleted. The workflow was deleted from the git repository.
	WorkflowStateDeleted WorkflowState = "DELETED"
	// WorkflowStateDisabledFork. The workflow was disabled by default on a fork.
	WorkflowStateDisabledFork WorkflowState = "DISABLED_FORK"
	// WorkflowStateDisabledInactivity. The workflow was disabled for inactivity in the repository.
	WorkflowStateDisabledInactivity WorkflowState = "DISABLED_INACTIVITY"
	// WorkflowStateDisabledManually. The workflow was disabled manually.
	WorkflowStateDisabledManually WorkflowState = "DISABLED_MANUALLY"
)
